{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prizePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controlledToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "prizePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "controlledToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "permitAndDepositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0x91817512578E22D4aB2a70683280BFbE11C504B4",
    "transactionIndex": 18,
    "gasUsed": "520120",
    "logsBloom": "0x
    "blockHash": "0xb631a4de2278f39b26594a5f3342025475918bfe62791e36fdf4105357af9092",
    "transactionHash": "0xc6ec6eb3f1ce9a35e9afbd3f2b7c57daf52a1bbe65c6c901ef91ca8502f69781",
    "logs": [],
    "blockNumber": 7679925,
    "cumulativeGasUsed": "1825016",
    "status": 1,
    "byzantium": true
  },
  "address": "0x91817512578E22D4aB2a70683280BFbE11C504B4",
  "args": [],
  "solcInputHash": "0xd7cd31f30aa30a6e349c3d93933b7744d0e3a59879a749ab42a3f83eb979d1b0",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controlledToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"controlledToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"permitAndDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositTo(address,address,address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount to deposit\",\"controlledToken\":\"The type of token to be minted in exchange (i.e. tickets or sponsorship)\",\"prizePool\":\"The prize pool to deposit into\",\"referrer\":\"The address that referred the deposit\",\"to\":\"The address that will receive the controlled tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permitAndDepositTo(address,address,uint256,uint256,bool,uint8,bytes32,bytes32,address,address,uint256,address,address)\":{\"details\":\"The Dai permit params match the Dai#permit function, but it expects the `spender` to be the address of this contract.\",\"params\":{\"allowed\":\"If true, then the spender is approving holder the max allowance.  False makes the allowance zero.\",\"amount\":\"The amount to deposit\",\"controlledToken\":\"The type of token to be minted in exchange (i.e. tickets or sponsorship)\",\"expiry\":\"The timestamp at which the sig expires\",\"holder\":\"The address spending the tokens\",\"nonce\":\"The nonce of the tx.  Should be retrieved from the Dai token\",\"prizePool\":\"The prize pool to deposit into\",\"r\":\"The `r` portion of the signature.\",\"referrer\":\"The address that referred the deposit\",\"s\":\"The `s` portion of the signature.\",\"to\":\"The address that will receive the controlled tokens\",\"v\":\"The `v` portion of the signature.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Allows users to approve and deposit dai into a prize pool in a single transaction.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositTo(address,address,address,uint256,address,address)\":{\"notice\":\"Deposits into a Prize Pool from the sender.  Tokens will be transferred from the sender then deposited into the Pool on the sender's behalf.  This can be called after permitAndDepositTo is called, as this contract will have full approval for a user.\"},\"permitAndDepositTo(address,address,uint256,uint256,bool,uint8,bytes32,bytes32,address,address,uint256,address,address)\":{\"notice\":\"Permits this contract to spend on a users behalf, and deposits into the prize pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/permit/PermitAndDepositDai.sol\":\"PermitAndDepositDai\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x04a69a78363214b4e3055db8e620bed222349f0c81e9d1cbe769eb849b69b73f\"},\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9175561c374ec1fc33045e5dfdde2057e63e00debf432875f9e1e3395d99c149\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa27d8d0bf389702f2b124fff3d86238b17ec0abd47d1401e81dc48a1509dbb9a\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f7da58ee3d9faa9b8999a93d49c8ff978f1afc88ae9bcfc6f9cbb44da011c2b\"},\"contracts/external/maker/DaiInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface DaiInterface is IERC20 {\\n    // --- Approve by signature ---\\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n  function transferFrom(address src, address dst, uint wad) external override returns (bool);\\n}\\n\",\"keccak256\":\"0x1e64ce2737de75db271c8832ef41446e914d2e30a435982ccd108f61cee5304d\",\"license\":\"GPL-3.0\"},\"contracts/permit/PermitAndDepositDai.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../external/maker/DaiInterface.sol\\\";\\nimport \\\"../prize-pool/PrizePoolInterface.sol\\\";\\n\\n/// @title Allows users to approve and deposit dai into a prize pool in a single transaction.\\ncontract PermitAndDepositDai is OwnableUpgradeSafe {\\n  using SafeERC20 for DaiInterface;\\n\\n  /// @notice Permits this contract to spend on a users behalf, and deposits into the prize pool.\\n  /// @dev The Dai permit params match the Dai#permit function, but it expects the `spender` to be\\n  /// the address of this contract.\\n  /// @param holder The address spending the tokens\\n  /// @param nonce The nonce of the tx.  Should be retrieved from the Dai token\\n  /// @param expiry The timestamp at which the sig expires\\n  /// @param allowed If true, then the spender is approving holder the max allowance.  False makes the allowance zero.\\n  /// @param v The `v` portion of the signature.\\n  /// @param r The `r` portion of the signature.\\n  /// @param s The `s` portion of the signature.\\n  /// @param prizePool The prize pool to deposit into\\n  /// @param to The address that will receive the controlled tokens\\n  /// @param amount The amount to deposit\\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\\n  /// @param referrer The address that referred the deposit\\n  function permitAndDepositTo(\\n    // --- Approve by signature ---\\n    address dai, address holder, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s,\\n    address prizePool, address to, uint256 amount, address controlledToken, address referrer\\n  ) external {\\n    require(msg.sender == holder, \\\"PermitAndDepositDai/only-signer\\\");\\n    DaiInterface(dai).permit(holder, address(this), nonce, expiry, allowed, v, r, s);\\n    _depositTo(dai, holder, prizePool, to, amount, controlledToken, referrer);\\n  }\\n\\n  /// @notice Deposits into a Prize Pool from the sender.  Tokens will be transferred from the sender\\n  /// then deposited into the Pool on the sender's behalf.  This can be called after permitAndDepositTo is called,\\n  /// as this contract will have full approval for a user.\\n  /// @param prizePool The prize pool to deposit into\\n  /// @param to The address that will receive the controlled tokens\\n  /// @param amount The amount to deposit\\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\\n  /// @param referrer The address that referred the deposit\\n  function depositTo(\\n    address dai,\\n    address prizePool,\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  ) external {\\n    _depositTo(dai, msg.sender, prizePool, to, amount, controlledToken, referrer);\\n  }\\n\\n  function _depositTo(\\n    address dai,\\n    address holder,\\n    address prizePool,\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  ) internal {\\n    DaiInterface(dai).safeTransferFrom(holder, address(this), amount);\\n    DaiInterface(dai).approve(address(prizePool), amount);\\n    PrizePoolInterface(prizePool).depositTo(to, amount, controlledToken, referrer);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xbb0037bb37bd3813abe2db60bf7081442eff0248432bc3a1d9b762f54b2b7507\",\"license\":\"GPL-3.0\"},\"contracts/prize-pool/PrizePoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\nimport \\\"../token/ControlledTokenInterface.sol\\\";\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\ninterface PrizePoolInterface {\\n\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n  /// @param to The address receiving the newly minted tokens\\n  /// @param amount The amount of assets to deposit\\n  /// @param controlledToken The address of the type of token the user is minting\\n  /// @param referrer The referrer of the deposit\\n  function depositTo(\\n    address to,\\n    uint256 amount,\\n    address controlledToken,\\n    address referrer\\n  )\\n    external;\\n\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\n  /// @param from The address to redeem tokens from.\\n  /// @param amount The amount of tokens to redeem for assets.\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\\n  /// @return The actual exit fee paid\\n  function withdrawInstantlyFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken,\\n    uint256 maximumExitFee\\n  ) external returns (uint256);\\n\\n  /// @notice Withdraw assets from the Prize Pool by placing them into the timelock.\\n  /// The timelock is used to ensure that the tickets have contributed their fair share of the prize.\\n  /// @dev Note that if the user has previously timelocked funds then this contract will try to sweep them.\\n  /// If the existing timelocked funds are still locked, then the incoming\\n  /// balance is added to their existing balance and the new timelock unlock timestamp will overwrite the old one.\\n  /// @param from The address to withdraw from\\n  /// @param amount The amount to withdraw\\n  /// @param controlledToken The type of token being withdrawn\\n  /// @return The timestamp from which the funds can be swept\\n  function withdrawWithTimelockFrom(\\n    address from,\\n    uint256 amount,\\n    address controlledToken\\n  ) external returns (uint256);\\n\\n  function withdrawReserve(address to) external returns (uint256);\\n\\n  /// @notice Returns the balance that is available to award.\\n  /// @dev captureAwardBalance() should be called first\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function awardBalance() external view returns (uint256);\\n\\n  /// @notice Captures any available interest as award balance.\\n  /// @dev This function also captures the reserve fees.\\n  /// @return The total amount of assets to be awarded for the current prize\\n  function captureAwardBalance() external returns (uint256);\\n\\n  /// @notice Called by the prize strategy to award prizes.\\n  /// @dev The amount awarded must be less than the awardBalance()\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of assets to be awarded\\n  /// @param controlledToken The address of the asset token being awarded\\n  function award(\\n    address to,\\n    uint256 amount,\\n    address controlledToken\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function transferExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param amount The amount of external assets to be awarded\\n  /// @param externalToken The address of the external asset token being awarded\\n  function awardExternalERC20(\\n    address to,\\n    address externalToken,\\n    uint256 amount\\n  )\\n    external;\\n\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n  /// @param to The address of the winner that receives the award\\n  /// @param externalToken The address of the external NFT token being awarded\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\n  function awardExternalERC721(\\n    address to,\\n    address externalToken,\\n    uint256[] calldata tokenIds\\n  )\\n    external;\\n\\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\\n  /// @param users An array of account addresses to sweep balances for\\n  /// @return The total amount of assets swept from the Prize Pool\\n  function sweepTimelockBalances(\\n    address[] calldata users\\n  )\\n    external\\n    returns (uint256);\\n\\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\\n  /// @param from The user who is withdrawing\\n  /// @param amount The amount the user is withdrawing\\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\\n  /// @return durationSeconds The duration of the timelock in seconds\\n  function calculateTimelockDuration(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external\\n    returns (\\n      uint256 durationSeconds,\\n      uint256 burnedCredit\\n    );\\n\\n  /// @notice Calculates the early exit fee for the given amount\\n  /// @param from The user who is withdrawing\\n  /// @param controlledToken The type of collateral being withdrawn\\n  /// @param amount The amount of collateral to be withdrawn\\n  /// @return exitFee The exit fee\\n  /// @return burnedCredit The user's credit that was burned\\n  function calculateEarlyExitFee(\\n    address from,\\n    address controlledToken,\\n    uint256 amount\\n  )\\n    external\\n    returns (\\n      uint256 exitFee,\\n      uint256 burnedCredit\\n    );\\n\\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\\n  /// @param _principal The principal amount on which interest is accruing\\n  /// @param _interest The amount of interest that must accrue\\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\n  function estimateCreditAccrualTime(\\n    address _controlledToken,\\n    uint256 _principal,\\n    uint256 _interest\\n  )\\n    external\\n    view\\n    returns (uint256 durationSeconds);\\n\\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\\n  /// @param user The user whose credit balance should be returned\\n  /// @return The balance of the users credit\\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\\n\\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\\n  /// @param _controlledToken The controlled token for whom to set the credit plan\\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\\n  function setCreditPlanOf(\\n    address _controlledToken,\\n    uint128 _creditRateMantissa,\\n    uint128 _creditLimitMantissa\\n  )\\n    external;\\n\\n  /// @notice Returns the credit rate of a controlled token\\n  /// @param controlledToken The controlled token to retrieve the credit rates for\\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\\n  function creditPlanOf(\\n    address controlledToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint128 creditLimitMantissa,\\n      uint128 creditRateMantissa\\n    );\\n\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\n  function setLiquidityCap(uint256 _liquidityCap) external;\\n\\n  /// @notice Allows the Governor to add Controlled Tokens to the Prize Pool\\n  /// @param _controlledToken The address of the Controlled Token to add\\n  function addControlledToken(ControlledTokenInterface _controlledToken) external;\\n\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\n  /// @param _prizeStrategy The new prize strategy.  Must implement TokenListenerInterface\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external;\\n\\n  /// @dev Returns the address of the underlying ERC20 asset\\n  /// @return The address of the asset\\n  function token() external view returns (address);\\n\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\n  /// @return An array of controlled token addresses\\n  function tokens() external view returns (address[] memory);\\n\\n  /// @notice The timestamp at which an account's timelocked balance will be made available to sweep\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The timestamp at which the locked assets will be made available\\n  function timelockBalanceAvailableAt(address user) external view returns (uint256);\\n\\n  /// @notice The balance of timelocked assets for an account\\n  /// @param user The address of an account with timelocked assets\\n  /// @return The amount of assets that have been timelocked\\n  function timelockBalanceOf(address user) external view returns (uint256);\\n\\n  /// @notice The total of all controlled tokens and timelock.\\n  /// @return The current total of all tokens and timelock.\\n  function accountedBalance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xabc491d04caf68d3985a4b26b8c91460609876ecdb2b0730f17692d4d3233b3d\",\"license\":\"GPL-3.0\"},\"contracts/token/ControlledTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface ControlledTokenInterface is IERC20 {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (TokenControllerInterface);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9b3e4b26e2b97f3c58d288aaae39322f31200e4697e6c28bfceed2b3f0282c45\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Controlled ERC20 Token Interface\\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\\ninterface TokenControllerInterface {\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5dd2346b0d9616b15bfad6bd8dab3a34ad41aa77a5d0c5f4c1b54c0d5009b77f\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenListenerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol\\\";\\n\\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\\ninterface TokenListenerInterface is IERC165 {\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\n}\\n\",\"keccak256\":\"0x1642772911e46a13b0f2f628650cf68ec65b4b5df6b7d4ecaff68f21df5c3024\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610871806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311728e291461005c5780634cd263e4146100e3578063715018a61461012f5780638da5cb5b14610137578063f2fde38b1461015b575b600080fd5b6100e160048036036101a081101561007357600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013591608082013515159160ff60a0820135169160c08201359160e081013591610100820135811691610120810135821691610140820135916101608101358216916101809091013516610181565b005b6100e1600480360360c08110156100f957600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013591608082013581169160a0013516610293565b6100e16102aa565b61013f61035e565b604080516001600160a01b039092168252519081900360200190f35b6100e16004803603602081101561017157600080fd5b50356001600160a01b031661036d565b336001600160a01b038d16146101de576040805162461bcd60e51b815260206004820152601f60248201527f5065726d6974416e644465706f7369744461692f6f6e6c792d7369676e657200604482015290519081900360640190fd5b604080516323f2ebc360e21b81526001600160a01b038e81166004830152306024830152604482018e9052606482018d90528b1515608483015260ff8b1660a483015260c482018a905260e482018990529151918f1691638fcbaf0c916101048082019260009290919082900301818387803b15801561025d57600080fd5b505af1158015610271573d6000803e3d6000fd5b505050506102848d8d8787878787610478565b50505050505050505050505050565b6102a286338787878787610478565b505050505050565b6102b2610593565b6065546001600160a01b03908116911614610314576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b610375610593565b6065546001600160a01b039081169116146103d7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661041c5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ec6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b61048d6001600160a01b038816873086610597565b866001600160a01b031663095ea7b386856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b505050506040513d602081101561050e57600080fd5b50506040805163e323f82560e01b81526001600160a01b038681166004830152602482018690528481166044830152838116606483015291519187169163e323f8259160848082019260009290919082900301818387803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b5050505050505050505050565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105f19085906105f7565b50505050565b610609826001600160a01b03166107af565b61065a576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106106985780518252601f199092019160209182019101610679565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106fa576040519150601f19603f3d011682016040523d82523d6000602084013e6106ff565b606091505b509150915081610756576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156105f15780806020019051602081101561077257600080fd5b50516105f15760405162461bcd60e51b815260040180806020018281038252602a815260200180610812602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906107e357508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ab0055c40517ea00933f24c356797a41a1b72c660eba01dbc663583ec626202d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806311728e291461005c5780634cd263e4146100e3578063715018a61461012f5780638da5cb5b14610137578063f2fde38b1461015b575b600080fd5b6100e160048036036101a081101561007357600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013591608082013515159160ff60a0820135169160c08201359160e081013591610100820135811691610120810135821691610140820135916101608101358216916101809091013516610181565b005b6100e1600480360360c08110156100f957600080fd5b506001600160a01b03813581169160208101358216916040820135811691606081013591608082013581169160a0013516610293565b6100e16102aa565b61013f61035e565b604080516001600160a01b039092168252519081900360200190f35b6100e16004803603602081101561017157600080fd5b50356001600160a01b031661036d565b336001600160a01b038d16146101de576040805162461bcd60e51b815260206004820152601f60248201527f5065726d6974416e644465706f7369744461692f6f6e6c792d7369676e657200604482015290519081900360640190fd5b604080516323f2ebc360e21b81526001600160a01b038e81166004830152306024830152604482018e9052606482018d90528b1515608483015260ff8b1660a483015260c482018a905260e482018990529151918f1691638fcbaf0c916101048082019260009290919082900301818387803b15801561025d57600080fd5b505af1158015610271573d6000803e3d6000fd5b505050506102848d8d8787878787610478565b50505050505050505050505050565b6102a286338787878787610478565b505050505050565b6102b2610593565b6065546001600160a01b03908116911614610314576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6065546001600160a01b031690565b610375610593565b6065546001600160a01b039081169116146103d7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661041c5760405162461bcd60e51b81526004018080602001828103825260268152602001806107ec6026913960400191505060405180910390fd5b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b61048d6001600160a01b038816873086610597565b866001600160a01b031663095ea7b386856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156104e457600080fd5b505af11580156104f8573d6000803e3d6000fd5b505050506040513d602081101561050e57600080fd5b50506040805163e323f82560e01b81526001600160a01b038681166004830152602482018690528481166044830152838116606483015291519187169163e323f8259160848082019260009290919082900301818387803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b5050505050505050505050565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526105f19085906105f7565b50505050565b610609826001600160a01b03166107af565b61065a576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106106985780518252601f199092019160209182019101610679565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106fa576040519150601f19603f3d011682016040523d82523d6000602084013e6106ff565b606091505b509150915081610756576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b8051156105f15780806020019051602081101561077257600080fd5b50516105f15760405162461bcd60e51b815260040180806020018281038252602a815260200180610812602a913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906107e357508115155b94935050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ab0055c40517ea00933f24c356797a41a1b72c660eba01dbc663583ec626202d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositTo(address,address,address,uint256,address,address)": {
        "params": {
          "amount": "The amount to deposit",
          "controlledToken": "The type of token to be minted in exchange (i.e. tickets or sponsorship)",
          "prizePool": "The prize pool to deposit into",
          "referrer": "The address that referred the deposit",
          "to": "The address that will receive the controlled tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permitAndDepositTo(address,address,uint256,uint256,bool,uint8,bytes32,bytes32,address,address,uint256,address,address)": {
        "details": "The Dai permit params match the Dai#permit function, but it expects the `spender` to be the address of this contract.",
        "params": {
          "allowed": "If true, then the spender is approving holder the max allowance.  False makes the allowance zero.",
          "amount": "The amount to deposit",
          "controlledToken": "The type of token to be minted in exchange (i.e. tickets or sponsorship)",
          "expiry": "The timestamp at which the sig expires",
          "holder": "The address spending the tokens",
          "nonce": "The nonce of the tx.  Should be retrieved from the Dai token",
          "prizePool": "The prize pool to deposit into",
          "r": "The `r` portion of the signature.",
          "referrer": "The address that referred the deposit",
          "s": "The `s` portion of the signature.",
          "to": "The address that will receive the controlled tokens",
          "v": "The `v` portion of the signature."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Allows users to approve and deposit dai into a prize pool in a single transaction.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositTo(address,address,address,uint256,address,address)": {
        "notice": "Deposits into a Prize Pool from the sender.  Tokens will be transferred from the sender then deposited into the Pool on the sender's behalf.  This can be called after permitAndDepositTo is called, as this contract will have full approval for a user."
      },
      "permitAndDepositTo(address,address,uint256,uint256,bool,uint8,bytes32,bytes32,address,address,uint256,address,address)": {
        "notice": "Permits this contract to spend on a users behalf, and deposits into the prize pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8756,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8759,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8824,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8749,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8836,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8954,
        "contract": "contracts/permit/PermitAndDepositDai.sol:PermitAndDepositDai",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "432200",
      "executionCost": "468",
      "totalCost": "432668"
    },
    "external": {
      "depositTo(address,address,address,uint256,address,address)": "infinite",
      "owner()": "1081",
      "permitAndDepositTo(address,address,uint256,uint256,bool,uint8,bytes32,bytes32,address,address,uint256,address,address)": "infinite",
      "renounceOwnership()": "24223",
      "transferOwnership(address)": "infinite"
    },
    "internal": {
      "_depositTo(address,address,address,address,uint256,address,address)": "infinite"
    }
  }
}