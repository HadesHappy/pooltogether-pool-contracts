{
  "language": "Solidity",
  "sources": {
    "contracts/builders/CompoundPrizePoolBuilder.sol": {
      "content": "pragma solidity 0.6.4;\npragma experimental ABIEncoderV2;\n\nimport \"../comptroller/ComptrollerInterface.sol\";\nimport \"../prize-strategy/PrizeStrategyProxyFactory.sol\";\nimport \"../prize-pool/compound/CompoundPrizePoolProxyFactory.sol\";\nimport \"../token/ControlledTokenProxyFactory.sol\";\nimport \"../external/compound/CTokenInterface.sol\";\nimport \"../external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol\";\n\n/* solium-disable security/no-block-members */\ncontract CompoundPrizePoolBuilder {\n  using SafeMath for uint256;\n\n  struct Config {\n    address proxyAdmin;\n    CTokenInterface cToken;\n    RNGInterface rngService;\n    uint256 prizePeriodStart;\n    uint256 prizePeriodSeconds;\n    string ticketName;\n    string ticketSymbol;\n    string sponsorshipName;\n    string sponsorshipSymbol;\n    uint256 maxExitFeeMantissa;\n    uint256 maxTimelockDuration;\n    uint256 exitFeeMantissa;\n    uint256 creditRateMantissa;\n    address[] externalERC20Awards;\n  }\n\n  event CompoundPrizePoolCreated (\n    address indexed creator,\n    address indexed prizePool,\n    address indexed prizeStrategy\n  );\n\n  ComptrollerInterface public comptroller;\n  CompoundPrizePoolProxyFactory public compoundPrizePoolProxyFactory;\n  ControlledTokenProxyFactory public controlledTokenProxyFactory;\n  PrizeStrategyProxyFactory public prizeStrategyProxyFactory;\n  OpenZeppelinProxyFactoryInterface public proxyFactory;\n  address public trustedForwarder;\n\n  constructor (\n    ComptrollerInterface _comptroller,\n    PrizeStrategyProxyFactory _prizeStrategyProxyFactory,\n    address _trustedForwarder,\n    CompoundPrizePoolProxyFactory _compoundPrizePoolProxyFactory,\n    ControlledTokenProxyFactory _controlledTokenProxyFactory,\n    OpenZeppelinProxyFactoryInterface _proxyFactory\n  ) public {\n    require(address(_comptroller) != address(0), \"CompoundPrizePoolBuilder/comptroller-not-zero\");\n    require(address(_prizeStrategyProxyFactory) != address(0), \"CompoundPrizePoolBuilder/prize-strategy-factory-not-zero\");\n    require(address(_compoundPrizePoolProxyFactory) != address(0), \"CompoundPrizePoolBuilder/compound-prize-pool-builder-not-zero\");\n    require(address(_controlledTokenProxyFactory) != address(0), \"CompoundPrizePoolBuilder/controlled-token-proxy-factory-not-zero\");\n    require(address(_proxyFactory) != address(0), \"CompoundPrizePoolBuilder/proxy-factory-not-zero\");\n    proxyFactory = _proxyFactory;\n    comptroller = _comptroller;\n    prizeStrategyProxyFactory = _prizeStrategyProxyFactory;\n    trustedForwarder = _trustedForwarder;\n    compoundPrizePoolProxyFactory = _compoundPrizePoolProxyFactory;\n    controlledTokenProxyFactory = _controlledTokenProxyFactory;\n  }\n\n  function create(Config calldata config) external returns (PrizeStrategy) {\n    PrizeStrategy prizeStrategy;\n    if (config.proxyAdmin != address(0)) {\n      prizeStrategy = PrizeStrategy(\n        proxyFactory.deploy(block.timestamp, address(prizeStrategyProxyFactory.instance()), config.proxyAdmin, \"\")\n      );\n    } else {\n      prizeStrategy = prizeStrategyProxyFactory.create();\n    }\n\n    (CompoundPrizePool prizePool, address[] memory tokens) = createPrizePoolAndTokens(\n      prizeStrategy,\n      config.cToken,\n      config.ticketName,\n      config.ticketSymbol,\n      config.sponsorshipName,\n      config.sponsorshipSymbol,\n      config.maxExitFeeMantissa,\n      config.maxTimelockDuration\n    );\n\n    prizePool.transferOwnership(msg.sender);\n\n    prizeStrategy.initialize(\n      trustedForwarder,\n      comptroller,\n      config.prizePeriodStart,\n      config.prizePeriodSeconds,\n      prizePool,\n      tokens[0],\n      tokens[1],\n      config.rngService,\n      config.externalERC20Awards\n    );\n\n    prizeStrategy.setExitFeeMantissa(config.exitFeeMantissa);\n    prizeStrategy.setCreditRateMantissa(config.creditRateMantissa);\n\n    prizeStrategy.transferOwnership(msg.sender);\n\n    emit CompoundPrizePoolCreated(\n      msg.sender,\n      address(prizePool),\n      address(prizeStrategy)\n    );\n\n    return prizeStrategy;\n  }\n\n  function createPrizePoolAndTokens(\n    PrizeStrategy prizeStrategy,\n    CTokenInterface _cToken,\n    string memory ticketName,\n    string memory ticketSymbol,\n    string memory sponsorshipName,\n    string memory sponsorshipSymbol,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  ) internal returns (CompoundPrizePool prizePool, address[] memory tokens) {\n    prizePool = compoundPrizePoolProxyFactory.create();\n    tokens = new address[](2);\n    tokens[0] = address(createControlledToken(prizePool, ticketName, ticketSymbol));\n    tokens[1] = address(createControlledToken(prizePool, sponsorshipName, sponsorshipSymbol));\n    prizePool.initialize(\n      trustedForwarder,\n      prizeStrategy,\n      tokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration,\n      _cToken\n    );\n  }\n\n  function createControlledToken(\n    TokenControllerInterface controller,\n    string memory name,\n    string memory symbol\n  ) internal returns (ControlledToken) {\n    ControlledToken token = controlledTokenProxyFactory.create();\n    token.initialize(string(name), string(symbol), trustedForwarder, controller);\n    return token;\n  }\n}\n"
    },
    "contracts/comptroller/ComptrollerInterface.sol": {
      "content": "pragma solidity >=0.5.0 <0.7.0;\n\ninterface ComptrollerInterface {\n  function reserveRateMantissa() external view returns (uint256);\n  function afterDepositTo(address to, uint256 amount, uint256 balance, uint256 totalSupply, address controlledToken, address referrer) external;\n  function afterWithdrawFrom(address to, uint256 amount, uint256 balance, uint256 totalSupply, address controlledToken) external;\n}\n"
    },
    "contracts/prize-strategy/PrizeStrategyProxyFactory.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"./PrizeStrategy.sol\";\nimport \"../external/openzeppelin/ProxyFactory.sol\";\n\ncontract PrizeStrategyProxyFactory is ProxyFactory {\n\n  PrizeStrategy public instance;\n\n  constructor () public {\n    instance = new PrizeStrategy();\n  }\n\n  function create() external returns (PrizeStrategy) {\n    return PrizeStrategy(deployMinimal(address(instance), \"\"));\n  }\n}"
    },
    "contracts/prize-strategy/PrizeStrategy.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\nimport \"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\";\nimport \"@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol\";\n\nimport \"./PrizeStrategyStorage.sol\";\nimport \"./PrizeStrategyInterface.sol\";\nimport \"../token/TokenControllerInterface.sol\";\nimport \"../token/ControlledToken.sol\";\nimport \"../prize-pool/PrizePool.sol\";\nimport \"../Constants.sol\";\nimport \"../utils/RelayRecipient.sol\";\n\n/* solium-disable security/no-block-members */\ncontract PrizeStrategy is PrizeStrategyStorage,\n                          Initializable,\n                          OwnableUpgradeSafe,\n                          RelayRecipient,\n                          ReentrancyGuardUpgradeSafe,\n                          PrizeStrategyInterface {\n\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n  bytes32 constant private TREE_KEY = keccak256(\"PoolTogether/Ticket\");\n  uint256 constant private MAX_TREE_LEAVES = 5;\n  uint256 internal constant ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA = 13.4 ether;\n\n  event PrizePoolOpened(\n    address indexed operator,\n    uint256 indexed prizePeriodStartedAt\n  );\n\n  event PrizePoolAwardStarted(\n    address indexed operator,\n    address indexed prizePool,\n    uint32 indexed rngRequestId,\n    uint32 rngLockBlock\n  );\n\n  event PrizePoolAwarded(\n    address indexed operator,\n    uint256 randomNumber,\n    uint256 prize,\n    uint256 reserveFee\n  );\n\n  event ExitFeeUpdated(\n    uint256 exitFeeMantissa\n  );\n\n  event CreditRateUpdated(\n    uint256 creditRateMantissa\n  );\n\n  event RngServiceUpdated(\n    address rngService\n  );\n\n  function initialize (\n    address _trustedForwarder,\n    ComptrollerInterface _comptroller,\n    uint256 _prizePeriodStart,\n    uint256 _prizePeriodSeconds,\n    PrizePool _prizePool,\n    address _ticket,\n    address _sponsorship,\n    RNGInterface _rng,\n    address[] memory _externalErc20s\n  ) public initializer {\n    require(address(_comptroller) != address(0), \"PrizeStrategy/comptroller-not-zero\");\n    require(_prizePeriodSeconds > 0, \"PrizeStrategy/prize-period-greater-than-zero\");\n    require(address(_prizePool) != address(0), \"PrizeStrategy/prize-pool-not-zero\");\n    require(address(_ticket) != address(0), \"PrizeStrategy/ticket-not-zero\");\n    require(address(_sponsorship) != address(0), \"PrizeStrategy/sponsorship-not-zero\");\n    require(address(_rng) != address(0), \"PrizeStrategy/rng-not-zero\");\n    prizePool = _prizePool;\n    ticket = IERC20(_ticket);\n    rng = _rng;\n    sponsorship = IERC20(_sponsorship);\n    trustedForwarder = _trustedForwarder;\n\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    comptroller = _comptroller;\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n\n    prizePeriodSeconds = _prizePeriodSeconds;\n    prizePeriodStartedAt = _prizePeriodStart;\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\n\n    exitFeeMantissa = 0.1 ether;\n    creditRateMantissa = exitFeeMantissa.div(prizePeriodSeconds);\n\n    for (uint256 i = 0; i < _externalErc20s.length; i++) {\n      require(prizePool.canAwardExternal(_externalErc20s[i]), \"PrizeStrategy/cannot-award-external\");\n    }\n    externalErc20s.initialize(_externalErc20s);\n    externalErc721s.initialize();\n\n    emit ExitFeeUpdated(exitFeeMantissa);\n    emit CreditRateUpdated(creditRateMantissa);\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }\n\n  /// @notice Returns the user's chance of winning.\n  function chanceOf(address user) external view returns (uint256) {\n    return sortitionSumTrees.stakeOf(TREE_KEY, bytes32(uint256(user)));\n  }\n\n  /// @notice Selects a user using a random number.  The random number will be uniformly bounded to the ticket totalSupply.\n  /// @param randomNumber The random number to use to select a user.\n  /// @return The winner\n  function draw(uint256 randomNumber) public view returns (address) {\n    uint256 bound = ticket.totalSupply();\n    address selected;\n    if (bound == 0) {\n      selected = address(0);\n    } else {\n      uint256 token = UniformRandomNumber.uniform(randomNumber, bound);\n      selected = address(uint256(sortitionSumTrees.draw(TREE_KEY, token)));\n    }\n    return selected;\n  }\n\n  /// @notice Accrues ticket credit for a user.\n  /// @param user The user for whom to accrue credit\n  function accrueTicketCredit(address user) public {\n    _accrueCredit(user, ticket.balanceOf(user));\n  }\n\n  /// @notice Accrues ticket credit for a user assuming their current balance is the passed balance.\n  /// @param user The user for whom to accrue credit\n  /// @param balance The balance to use for the user\n  function _accrueCredit(address user, uint256 balance) internal {\n    uint256 credit = calculateAccruedCredit(user, balance);\n    creditBalances[user] = Credit({\n      balance: _addCredit(user, balance, credit).toUint128(),\n      timestamp: _currentTime().toUint64()\n    });\n  }\n\n  /// @notice Adds credit to a users credit balance.  The balance cannot exceed the credit limit, which is calculated based on the exit fee.\n  /// @param user The user who is receiving the new credit\n  /// @param balance The users ticket balance (used to calculate credit limit)\n  /// @param newCredit The credit to be added\n  /// @return creditBalance The users new credit balance.  Will not exceed the credit limit.\n  function _addCredit(address user, uint256 balance, uint256 newCredit) internal view returns (uint256 creditBalance) {\n    uint256 creditLimit = FixedPoint.multiplyUintByMantissa(\n      balance,\n      exitFeeMantissa\n    );\n    creditBalance = uint256(creditBalances[user].balance).add(newCredit);\n    if (creditBalance > creditLimit) {\n      creditBalance = creditLimit;\n    }\n  }\n\n  /// @notice Calculates the accrued interest for a user\n  /// @param user The user whose credit should be calculated.\n  /// @param ticketBalance The current balance of the user's tickets.\n  /// @return accruedCredit The credit that has accrued since the last credit update.\n  function calculateAccruedCredit(address user, uint256 ticketBalance) internal view returns (uint256 accruedCredit) {\n    uint256 userTimestamp = creditBalances[user].timestamp;\n\n    if (userTimestamp == 0 || userTimestamp >= _currentTime()) {\n      return 0;\n    }\n\n    uint256 deltaTime = _currentTime().sub(userTimestamp);\n    uint256 creditPerSecond = FixedPoint.multiplyUintByMantissa(ticketBalance, creditRateMantissa);\n    return deltaTime.mul(creditPerSecond);\n  }\n\n  /// @notice Calculates and returns the currently accrued prize\n  /// @return The current prize size\n  function currentPrize() public returns (uint256) {\n    uint256 balance = prizePool.awardBalance();\n    uint256 reserveFee = _calculateReserveFee(balance);\n    return balance.sub(reserveFee);\n  }\n\n  /// @notice Called by the PrizePool before an instant withdrawal.  Calculates and returns the withdrawal fee\n  /// @param from The user who is withdrawing\n  /// @param amount The amount of collateral they are withdrawing\n  /// @param controlledToken The collateral type they are withdrawing\n  /// @return withdrawalFee The fee the user should be charged\n  function beforeWithdrawInstantlyFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata\n  )\n    external\n    override\n    onlyPrizePool\n    returns (uint256 withdrawalFee)\n  {\n    (uint256 remainingFee, uint256 burnedCredit) = _calculateInstantWithdrawalFee(from, amount, controlledToken);\n    if (burnedCredit > 0) {\n      _burnCredit(from, burnedCredit);\n    }\n    return remainingFee;\n  }\n\n  /// @notice Calculates the fee to withdraw collateral instantly.\n  /// @param from The user who is withdrawing\n  /// @param amount The amount of collateral they are withdrawing\n  /// @param controlledToken The type of collateral they are withdrawing (i.e. ticket or sponsorship)\n  /// @return remainingFee The fee that the user will be charged\n  /// @return burnedCredit The amount of credit that will be burned\n  function _calculateInstantWithdrawalFee(\n    address from,\n    uint256 amount,\n    address controlledToken\n  )\n    internal\n    returns (uint256 remainingFee, uint256 burnedCredit)\n  {\n    if (controlledToken == address(ticket)) {\n      return _calculateEarlyExitFeeLessCredit(from, amount);\n    }\n  }\n\n  /// @notice Calculates the fee to withdraw collateral instantly.\n  /// @param from The user who is withdrawing\n  /// @param amount The amount of collateral they are withdrawing\n  /// @param controlledToken The type of collateral they are withdrawing (i.e. ticket or sponsorship)\n  /// @return remainingFee The fee that the user will be charged\n  /// @return burnedCredit The amount of credit that will be burned\n  function calculateInstantWithdrawalFee(\n    address from,\n    uint256 amount,\n    address controlledToken\n  )\n    external\n    returns (uint256 remainingFee, uint256 burnedCredit)\n  {\n    return _calculateInstantWithdrawalFee(from, amount, controlledToken);\n  }\n\n  /// @notice Calculates the withdrawal unlock timestamp by estimated how long it would take to pay off the exit fee.\n  /// This function also accrues their ticket credit.\n  /// @param user The user who wishes to withdraw\n  /// @param controlledToken The token they are withdrawing\n  /// @return timestamp The absolute timestamp after which they are allowed to withdraw\n  function beforeWithdrawWithTimelockFrom(\n    address user,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata\n  )\n    external\n    override\n    onlyPrizePool\n    returns (uint256 timestamp)\n  {\n    (uint256 durationSeconds, uint256 burnedCredit) = _calculateTimelockDurationAndFee(user, amount, controlledToken);\n    if (burnedCredit > 0) {\n      _burnCredit(user, burnedCredit);\n    }\n    timestamp = _currentTime().add(durationSeconds);\n    return timestamp;\n  }\n\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\n  /// @param from The user who is withdrawing\n  /// @param amount The amount the user is withdrawing\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\n  /// @return durationSeconds The duration of the timelock in seconds\n  /// @return burnedCredit The credit that will be burned.\n  function calculateTimelockDurationAndFee(\n    address from,\n    uint256 amount,\n    address controlledToken\n  )\n    external\n    returns (uint256 durationSeconds, uint256 burnedCredit)\n  {\n    return _calculateTimelockDurationAndFee(from, amount, controlledToken);\n  }\n\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\n  /// @param from The user who is withdrawing\n  /// @param amount The amount the user is withdrawing\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\n  /// @return durationSeconds The duration of the timelock in seconds\n  /// @return burnedCredit The credit that will be burned.\n  function _calculateTimelockDurationAndFee(\n    address from,\n    uint256 amount,\n    address controlledToken\n  )\n    internal\n    returns (uint256 durationSeconds, uint256 burnedCredit)\n  {\n    if (controlledToken == address(ticket)) {\n      (uint256 remainingFee, uint256 burned) = _calculateEarlyExitFeeLessCredit(from, amount);\n      burnedCredit = burned;\n      if (remainingFee > 0) {\n        // calculate how long it would take to accrue\n        durationSeconds = _estimateCreditAccrualTime(amount, remainingFee);\n      }\n    }\n  }\n\n  /// @notice Burns a users credit\n  /// @param user The user whose credit should be burned\n  /// @param credit The amount of credit to burn\n  function _burnCredit(address user, uint256 credit) internal {\n    creditBalances[user].balance = uint256(creditBalances[user].balance).sub(credit).toUint128();\n  }\n\n  /// @notice Calculate the early exit for a user given a withdrawal amount.  The user's credit is taken into account.\n  /// @param from The user who is withdrawing\n  /// @param amount The amount of funds they are withdrawing\n  /// @return earlyExitFee The exit fee that the user should be charged.\n  /// @return creditToBeBurned The amount of credit for the user that should be burned.\n  function _calculateEarlyExitFeeLessCredit(\n    address from,\n    uint256 amount\n  )\n    internal\n    returns (uint256 earlyExitFee, uint256 creditToBeBurned)\n  {\n    uint256 balance = ticket.balanceOf(from);\n    _accrueCredit(from, balance);\n\n    /*\n    The credit is used *last*.  Always charge the fees up-front.\n\n    How to calculate?\n\n    calculate their remaining exit fee.  I.e. full exit fee of their balance less their credit.\n\n    If the exit fee on their withdrawal is less than the remaining exit fee, then they have to pay.\n    */\n\n    // Determine available usable credit based on withdraw amount\n    uint256 availableCredit;\n    uint256 remainingExitFee = _calculateEarlyExitFee(balance.sub(amount));\n    if (creditBalances[from].balance >= remainingExitFee) {\n      availableCredit = uint256(creditBalances[from].balance).sub(remainingExitFee);\n    }\n\n    // Determine amount of credit to burn and amount of fees required\n    uint256 totalExitFee = _calculateEarlyExitFee(amount);\n    creditToBeBurned = (availableCredit > totalExitFee) ? totalExitFee : availableCredit;\n    earlyExitFee = totalExitFee.sub(creditToBeBurned);\n  }\n\n  /// @notice Calculates the early exit fee for the given amount\n  /// @param amount The amount of collateral to be withdrawn\n  /// @return Exit fee\n  function _calculateEarlyExitFee(uint256 amount) internal view returns (uint256) {\n    return FixedPoint.multiplyUintByMantissa(amount, exitFeeMantissa);\n  }\n\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\n  /// @param _principal The principal amount on which interest is accruing\n  /// @param _interest The amount of interest that must accrue\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\n  function estimateCreditAccrualTime(\n    uint256 _principal,\n    uint256 _interest\n  )\n    external\n    view\n    returns (uint256 durationSeconds)\n  {\n    return _estimateCreditAccrualTime(\n      _principal,\n      _interest\n    );\n  }\n\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit\n  /// @param _principal The principal amount on which interest is accruing\n  /// @param _interest The amount of interest that must accrue\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\n  function _estimateCreditAccrualTime(\n    uint256 _principal,\n    uint256 _interest\n  )\n    internal\n    view\n    returns (uint256 durationSeconds)\n  {\n    // interest = credit rate * principal * time\n    // => time = interest / (credit rate * principal)\n    uint256 accruedPerSecond = FixedPoint.multiplyUintByMantissa(_principal, creditRateMantissa);\n    return _interest.div(accruedPerSecond);\n  }\n\n  /// @notice Calculates the reserve portion of the given amount of funds.  If there is no reserve address, the portion will be zero.\n  /// @param amount The prize amount\n  /// @return The size of the reserve portion of the prize\n  function _calculateReserveFee(uint256 amount) internal view returns (uint256) {\n    uint256 reserveRateMantissa = comptroller.reserveRateMantissa();\n    if (reserveRateMantissa == 0) {\n      return 0;\n    }\n    return FixedPoint.multiplyUintByMantissa(amount, reserveRateMantissa);\n  }\n\n  /// @notice Estimates the prize size using the default ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA\n  /// @return The estimated final size of the prize\n  function estimatePrize() public returns (uint256) {\n    return estimatePrizeWithBlockTime(ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA);\n  }\n\n  /// @notice Estimates the prize size given the passed number of seconds per block\n  /// @param secondsPerBlockMantissa The seconds per block to use for the calculation. Should be a fixed point 18 number like Ether.\n  /// @return The estimated final size of the prize.\n  function estimatePrizeWithBlockTime(uint256 secondsPerBlockMantissa) public returns (uint256) {\n    return currentPrize().add(estimateRemainingPrizeWithBlockTime(secondsPerBlockMantissa));\n  }\n\n  /// @notice Estimates the size of the *remaining* prize to accrue.\n  /// This function uses the constant ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA to calculate the accrued interest.\n  /// @return The estimated remaining prize\n  function estimateRemainingPrize() public view returns (uint256) {\n    return estimateRemainingPrizeWithBlockTime(ETHEREUM_BLOCK_TIME_ESTIMATE_MANTISSA);\n  }\n\n  /// @notice Estimates the size of the *remaining* prize to accrue.  Allows the user to pass the seconds per block value.\n  /// @param secondsPerBlockMantissa The seconds per block to use for the calculation.  Should be a fixed point 18 number like Ether.\n  /// @return The estimated remaining prize\n  function estimateRemainingPrizeWithBlockTime(uint256 secondsPerBlockMantissa) public view returns (uint256) {\n    uint256 remaining = prizePool.estimateAccruedInterestOverBlocks(\n      prizePool.accountedBalance(),\n      estimateRemainingBlocksToPrize(secondsPerBlockMantissa)\n    );\n    uint256 reserveFee = _calculateReserveFee(remaining);\n    return remaining.sub(reserveFee);\n  }\n\n  /// @notice Estimates the remaining blocks until the prize given a number of seconds per block\n  /// @param secondsPerBlockMantissa The number of seconds per block to use for the calculation.  Should be a fixed point 18 number like Ether.\n  /// @return The estimated number of blocks remaining until the prize can be awarded.\n  function estimateRemainingBlocksToPrize(uint256 secondsPerBlockMantissa) public view returns (uint256) {\n    return FixedPoint.divideUintByMantissa(\n      _prizePeriodRemainingSeconds(),\n      secondsPerBlockMantissa\n    );\n  }\n\n  /// @notice Returns the number of seconds remaining until the prize can be awarded.\n  /// @return The number of seconds remaining until the prize can be awarded.\n  function prizePeriodRemainingSeconds() public view returns (uint256) {\n    return _prizePeriodRemainingSeconds();\n  }\n\n  /// @notice Returns the number of seconds remaining until the prize can be awarded.\n  /// @return The number of seconds remaining until the prize can be awarded.\n  function _prizePeriodRemainingSeconds() internal view returns (uint256) {\n    uint256 endAt = _prizePeriodEndAt();\n    uint256 time = _currentTime();\n    if (time > endAt) {\n      return 0;\n    }\n    return endAt.sub(time);\n  }\n\n  /// @notice Returns whether the prize period is over\n  /// @return True if the prize period is over, false otherwise\n  function isPrizePeriodOver() external view returns (bool) {\n    return _isPrizePeriodOver();\n  }\n\n  /// @notice Returns whether the prize period is over\n  /// @return True if the prize period is over, false otherwise\n  function _isPrizePeriodOver() internal view returns (bool) {\n    return _currentTime() >= _prizePeriodEndAt();\n  }\n\n  /// @notice Awards the given amount of collateral to a user as sponsorship.\n  /// @param user The user to award\n  /// @param amount The amount of sponsorship to award\n  function _awardSponsorship(address user, uint256 amount) internal {\n    prizePool.award(user, amount, address(sponsorship));\n  }\n\n  /// @notice Awards collateral as tickets to a user\n  /// @param user The user to whom the tickets are minted\n  /// @param amount The amount of interest to mint as tickets.\n  function _awardTickets(address user, uint256 amount) internal {\n    uint256 userBalance = ticket.balanceOf(user);\n    _accrueCredit(user, userBalance);\n    uint256 creditEarned = _calculateEarlyExitFee(amount);\n    creditBalances[user].balance = uint256(creditBalances[user].balance).add(creditEarned).toUint128();\n    prizePool.award(user, amount, address(ticket));\n    sortitionSumTrees.set(TREE_KEY, userBalance.add(amount), bytes32(uint256(user)));\n  }\n\n  /// @notice Awards all external tokens with non-zero balances to the given user.  The external tokens must be held by the PrizePool contract.\n  /// @param winner The user to transfer the tokens to\n  function _awardAllExternalTokens(address winner) internal {\n    _awardExternalErc20s(winner);\n    _awardExternalErc721s(winner);\n  }\n\n  /// @notice Awards all external ERC20 tokens with non-zero balances to the given user.\n  /// The external tokens must be held by the PrizePool contract.\n  /// @param winner The user to transfer the tokens to\n  function _awardExternalErc20s(address winner) internal {\n    address currentToken = externalErc20s.addressMap[MappedSinglyLinkedList.SENTINAL];\n    while (currentToken != address(0) && currentToken != MappedSinglyLinkedList.SENTINAL) {\n      uint256 balance = IERC20(currentToken).balanceOf(address(prizePool));\n      if (balance > 0) {\n        prizePool.awardExternalERC20(winner, currentToken, balance);\n      }\n      currentToken = externalErc20s.addressMap[currentToken];\n    }\n  }\n\n  /// @notice Awards all external ERC721 tokens to the given user.\n  /// The external tokens must be held by the PrizePool contract.\n  /// @dev The list of ERC721s is reset after every award\n  /// @param winner The user to transfer the tokens to\n  function _awardExternalErc721s(address winner) internal {\n    address currentToken = externalErc721s.addressMap[MappedSinglyLinkedList.SENTINAL];\n    while (currentToken != address(0) && currentToken != MappedSinglyLinkedList.SENTINAL) {\n      uint256 balance = IERC721(currentToken).balanceOf(address(prizePool));\n      if (balance > 0) {\n        prizePool.awardExternalERC721(winner, currentToken, externalErc721TokenIds[currentToken]);\n        delete externalErc721TokenIds[currentToken];\n      }\n      currentToken = externalErc721s.addressMap[currentToken];\n    }\n    externalErc721s.clearAll();\n  }\n\n  /// @notice Returns the timestamp at which the prize period ends\n  /// @return The timestamp at which the prize period ends.\n  function prizePeriodEndAt() external view returns (uint256) {\n    // current prize started at is non-inclusive, so add one\n    return _prizePeriodEndAt();\n  }\n\n  /// @notice Returns the timestamp at which the prize period ends\n  /// @return The timestamp at which the prize period ends.\n  function _prizePeriodEndAt() internal view returns (uint256) {\n    // current prize started at is non-inclusive, so add one\n    return prizePeriodStartedAt.add(prizePeriodSeconds);\n  }\n\n  /// @notice Called by the PrizePool for transfers of controlled tokens\n  /// @dev Note that this is only for *transfers*, not mints or burns\n  /// @param from The user whose tokens are being transferred\n  /// @param to The user who is receiving the tokens.\n  /// @param amount The amount of tokens being sent.\n  /// @param controlledToken The type of collateral that is being sent\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external override onlyPrizePool {\n    if (controlledToken == address(ticket)) {\n      _requireNotLocked();\n\n      uint256 fromBalance = ticket.balanceOf(from).sub(amount);\n      _accrueCredit(from, fromBalance);\n      sortitionSumTrees.set(TREE_KEY, fromBalance, bytes32(uint256(from)));\n\n      uint256 toBalance = ticket.balanceOf(to).add(amount);\n      _accrueCredit(to, toBalance);\n      sortitionSumTrees.set(TREE_KEY, toBalance, bytes32(uint256(to)));\n    }\n  }\n\n  /// @notice Called by the prize pool after a deposit has been made.\n  /// @param to The user who deposited collateral\n  /// @param amount The amount of collateral they deposited\n  /// @param controlledToken The type of collateral they deposited\n  function afterDepositTo(\n    address to,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata data\n  )\n    external\n    override\n    onlyPrizePool\n    requireNotLocked\n  {\n    _afterDepositTo(to, amount, controlledToken, data);\n  }\n\n  /// @notice Called by the prize pool after a deposit has been made.\n  /// @param to The user who deposited collateral\n  /// @param amount The amount of collateral they deposited\n  /// @param controlledToken The type of collateral they deposited\n  function afterTimelockDepositTo(\n    address,\n    address to,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata\n  )\n    external\n    override\n    onlyPrizePool\n    requireNotLocked\n  {\n    _afterDepositTo(to, amount, controlledToken, \"\");\n  }\n\n  /// @notice Called by the prize pool after a deposit has been made.\n  /// @param to The user who deposited collateral\n  /// @param amount The amount of collateral they deposited\n  /// @param controlledToken The type of collateral they deposited\n  function _afterDepositTo(address to, uint256 amount, address controlledToken, bytes memory data) internal {\n    uint256 balance = IERC20(controlledToken).balanceOf(to);\n    uint256 oldBalance = balance.sub(amount);\n    uint256 totalSupply = IERC20(controlledToken).totalSupply();\n\n    address referrer;\n    if (data.length > 0) {\n      (address ref) = abi.decode(data, (address));\n      referrer = ref;\n    }\n\n    comptroller.afterDepositTo(to, amount, balance, totalSupply, controlledToken, referrer);\n\n    if (controlledToken == address(ticket)) {\n      _accrueCredit(to, oldBalance);\n      sortitionSumTrees.set(TREE_KEY, balance, bytes32(uint256(to)));\n    }\n  }\n\n  /// @notice Called by the prize pool after a withdrawal with timelock has been made.\n  /// @param from The user who withdrew\n  /// @param controlledToken The type of collateral that was withdrawn\n  function afterWithdrawWithTimelockFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata\n  )\n    external\n    override\n    onlyPrizePool\n    requireNotLocked\n  {\n    uint256 balance = IERC20(controlledToken).balanceOf(from);\n    comptroller.afterWithdrawFrom(from, amount, balance, IERC20(controlledToken).totalSupply(), controlledToken);\n    if (controlledToken == address(ticket)) {\n      sortitionSumTrees.set(TREE_KEY, balance, bytes32(uint256(from)));\n    }\n  }\n\n  /// @notice Called by the prize pool after a user withdraws collateral instantly\n  /// @param from the user who withdrew\n  /// @param controlledToken The type of collateral they withdrew\n  function afterWithdrawInstantlyFrom(\n    address,\n    address from,\n    uint256 amount,\n    address controlledToken,\n    uint256,\n    uint256,\n    bytes calldata\n  )\n    external\n    override\n    onlyPrizePool\n    requireNotLocked\n  {\n    uint256 balance = IERC20(controlledToken).balanceOf(from);\n    comptroller.afterWithdrawFrom(from, amount, balance, IERC20(controlledToken).totalSupply(), controlledToken);\n    if (controlledToken == address(ticket)) {\n      sortitionSumTrees.set(TREE_KEY, balance, bytes32(uint256(from)));\n    }\n  }\n\n  /// @notice Called by the prize pool after a timelocked withdrawal has been swept\n  /// @param operator The user who swept the funds\n  /// @param from The user whose funds are being swept\n  /// @param amount The amount of funds swept.\n  function afterSweepTimelockedWithdrawal(address operator, address from, uint256 amount) external override {\n  }\n\n  /// @notice returns the current time.  Used for testing.\n  /// @return The current time (block.timestamp)\n  function _currentTime() internal virtual view returns (uint256) {\n    return block.timestamp;\n  }\n\n  /// @notice returns the current time.  Used for testing.\n  /// @return The current time (block.timestamp)\n  function _currentBlock() internal virtual view returns (uint256) {\n    return block.number;\n  }\n\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\n  /// @param user The user whose credit balance should be returned\n  /// @return creditBalance The balance of the users credit\n  function balanceOfCredit(address user) external returns (uint256 creditBalance) {\n    _accrueCredit(user, ticket.balanceOf(user));\n    return uint256(creditBalances[user].balance);\n  }\n\n  /// @notice Starts the award process by starting random number request.  The prize period must have ended.\n  /// @dev The RNG-Request-Fee is expected to be held within this contract before calling this function\n  function startAward() external requireCanStartAward {\n    (address feeToken, uint256 requestFee) = rng.getRequestFee();\n    if (feeToken != address(0) && requestFee > 0) {\n      IERC20(feeToken).approve(address(rng), requestFee);\n    }\n\n    (uint32 requestId, uint32 lockBlock) = rng.requestRandomNumber();\n    rngRequest.id = requestId;\n    rngRequest.lockBlock = lockBlock;\n\n    emit PrizePoolAwardStarted(_msgSender(), address(prizePool), requestId, lockBlock);\n  }\n\n  /// @notice Completes the award process and awards the winners.  The random number must have been requested and is now available.\n  function completeAward() external requireCanCompleteAward {\n    uint256 randomNumber = rng.randomNumber(rngRequest.id);\n    uint256 balance = prizePool.awardBalance();\n    uint256 reserveFee = _calculateReserveFee(balance);\n    uint256 prize = balance.sub(reserveFee);\n\n    delete rngRequest;\n\n    if (reserveFee > 0) {\n      _awardSponsorship(address(comptroller), reserveFee);\n    }\n\n    address winner = draw(randomNumber);\n    if (winner != address(0)) {\n      _awardTickets(winner, prize);\n      _awardAllExternalTokens(winner);\n    }\n\n    // to avoid clock drift, we should calculate the start time based on the previous period start time.\n    prizePeriodStartedAt = _calculateNextPrizePeriodStartTime(_currentTime());\n\n    emit PrizePoolAwarded(_msgSender(), randomNumber, prize, reserveFee);\n    emit PrizePoolOpened(_msgSender(), prizePeriodStartedAt);\n  }\n\n  function _calculateNextPrizePeriodStartTime(uint256 currentTime) internal view returns (uint256) {\n    uint256 elapsedPeriods = currentTime.sub(prizePeriodStartedAt).div(prizePeriodSeconds);\n    return prizePeriodStartedAt.add(elapsedPeriods.mul(prizePeriodSeconds));\n  }\n\n  function calculateNextPrizePeriodStartTime(uint256 currentTime) external view returns (uint256) {\n    return _calculateNextPrizePeriodStartTime(currentTime);\n  }\n\n  /// @notice Returns whether an award process can be started\n  /// @return True if an award can be started, false otherwise.\n  function canStartAward() external view returns (bool) {\n    return _isPrizePeriodOver() && !isRngRequested();\n  }\n\n  /// @notice Returns whether an award process can be completed\n  /// @return True if an award can be completed, false otherwise.\n  function canCompleteAward() external view returns (bool) {\n    return isRngRequested() && isRngCompleted();\n  }\n\n  /// @notice Returns whether a random number has been requested\n  /// @return True if a random number has been requested, false otherwise.\n  function isRngRequested() public view returns (bool) {\n    return rngRequest.id != 0;\n  }\n\n  /// @notice Returns whether the random number request has completed.\n  /// @return True if a random number request has completed, false otherwise.\n  function isRngCompleted() public view returns (bool) {\n    return rng.isRequestComplete(rngRequest.id);\n  }\n\n  /// @notice Returns the block number that the current RNG request has been locked to\n  /// @return The block number that the RNG request is locked to\n  function getLastRngLockBlock() public view returns (uint32) {\n    return rngRequest.lockBlock;\n  }\n\n  /// @notice Returns the current RNG Request ID\n  /// @return The current Request ID\n  function getLastRngRequestId() public view returns (uint32) {\n    return rngRequest.id;\n  }\n\n  /// @notice Allows the owner to set the exit fee.  The exit fee is a fixed point 18 number (like Ether).\n  /// the exit fee is calculated using the exit fee mantissa- it's their deposit * the exit fee mantissa.  This also serves as the users credit limit.\n  /// @param _exitFeeMantissa The exit fee to set\n  function setExitFeeMantissa(uint256 _exitFeeMantissa) external onlyOwner {\n    exitFeeMantissa = _exitFeeMantissa;\n\n    emit ExitFeeUpdated(exitFeeMantissa);\n  }\n\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\n  /// @param _creditRateMantissa The credit rate to set\n  function setCreditRateMantissa(uint256 _creditRateMantissa) external onlyOwner {\n    creditRateMantissa = _creditRateMantissa;\n\n    emit CreditRateUpdated(creditRateMantissa);\n  }\n\n  /// @notice Sets the RNG service that the Prize Strategy is connected to\n  /// @param rngService The address of the new RNG service interface\n  function setRngService(RNGInterface rngService) external onlyOwner {\n    require(!isRngRequested(), \"PrizeStrategy/rng-in-flight\");\n\n    rng = rngService;\n    emit RngServiceUpdated(address(rngService));\n  }\n\n  /// @notice Adds an external ERC20 token type as an additional prize that can be awarded\n  /// @dev Only the Prize-Strategy owner/creator can assign external tokens,\n  /// and they must be approved by the Prize-Pool\n  /// @param _externalErc20 The address of an ERC20 token to be awarded\n  function addExternalErc20Award(address _externalErc20) external onlyOwner {\n    require(prizePool.canAwardExternal(_externalErc20), \"PrizeStrategy/cannot-award-external\");\n    externalErc20s.addAddress(_externalErc20);\n  }\n\n  /// @notice Adds an external ERC721 token as an additional prize that can be awarded\n  /// @dev Only the Prize-Strategy owner/creator can assign external tokens,\n  /// and they must be approved by the Prize-Pool\n  /// NOTE: The NFT must already be owned by the Prize-Pool\n  /// @param _externalErc721 The address of an ERC721 token to be awarded\n  /// @param _tokenIds An array of token IDs of the ERC721 to be awarded\n  function addExternalErc721Award(address _externalErc721, uint256[] calldata _tokenIds) external onlyOwner {\n    require(prizePool.canAwardExternal(_externalErc721), \"PrizeStrategy/cannot-award-external\");\n    externalErc721s.addAddress(_externalErc721);\n\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\n      uint256 tokenId = _tokenIds[i];\n      require(IERC721(_externalErc721).ownerOf(tokenId) == address(prizePool), \"PrizeStrategy/unavailable-token\");\n      externalErc721TokenIds[_externalErc721].push(tokenId);\n    }\n  }\n\n  function _requireNotLocked() internal view {\n    require(rngRequest.lockBlock == 0 || block.number < rngRequest.lockBlock, \"PrizeStrategy/rng-in-flight\");\n  }\n\n  modifier requireNotLocked() {\n    _requireNotLocked();\n    _;\n  }\n\n  modifier requireCanStartAward() {\n    require(_isPrizePeriodOver(), \"PrizeStrategy/prize-period-not-over\");\n    require(!isRngRequested(), \"PrizeStrategy/rng-already-requested\");\n    _;\n  }\n\n  modifier requireCanCompleteAward() {\n    require(_isPrizePeriodOver(), \"PrizeStrategy/prize-period-not-over\");\n    require(isRngRequested(), \"PrizeStrategy/rng-not-requested\");\n    require(isRngCompleted(), \"PrizeStrategy/rng-not-complete\");\n    _;\n  }\n\n  modifier onlyPrizePool() {\n    require(_msgSender() == address(prizePool), \"PrizeStrategy/only-prize-pool\");\n    _;\n  }\n\n  function _msgSender() internal override(BaseRelayRecipient, ContextUpgradeSafe) virtual view returns (address payable) {\n    return BaseRelayRecipient._msgSender();\n  }\n\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\nimport \"../Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.6.0;\nimport \"../Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol": {
      "content": "pragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol": {
      "content": "pragma solidity ^0.6.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.6.0;\nimport \"../Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuardUpgradeSafe is Initializable {\n    bool private _notEntered;\n\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n\n\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n\n    }\n\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@pooltogether/fixed-point/contracts/FixedPoint.sol": {
      "content": "/**\nCopyright 2020 PoolTogether Inc.\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\n\n/**\n * @author Brendan Asselstine\n * @notice Provides basic fixed point math calculations.\n *\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\n */\nlibrary FixedPoint {\n    using SafeMath for uint256;\n\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\n    uint256 internal constant SCALE = 1e18;\n\n    /**\n        * Calculates a Fixed18 mantissa given the numerator and denominator\n        *\n        * The mantissa = (numerator * 1e18) / denominator\n        *\n        * @param numerator The mantissa numerator\n        * @param denominator The mantissa denominator\n        * @return The mantissa of the fraction\n        */\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n        uint256 mantissa = numerator.mul(SCALE);\n        mantissa = mantissa.div(denominator);\n        return mantissa;\n    }\n\n    /**\n        * Multiplies a Fixed18 number by an integer.\n        *\n        * @param b The whole integer to multiply\n        * @param mantissa The Fixed18 number\n        * @return An integer that is the result of multiplying the params.\n        */\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = mantissa.mul(b);\n        result = result.div(SCALE);\n        return result;\n    }\n\n    /**\n    * Divides an integer by a fixed point 18 mantissa\n    *\n    * @param dividend The integer to divide\n    * @param mantissa The fixed point 18 number to serve as the divisor\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\n    */\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\n        uint256 result = SCALE.mul(dividend);\n        result = result.div(mantissa);\n        return result;\n    }\n}\n"
    },
    "sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol": {
      "content": "/**\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\n *  @auditors: []\n *  @bounties: [<14 days 10 ETH max payout>]\n *  @deployments: []\n */\n\npragma solidity ^0.6.0;\n\n/**\n *  @title SortitionSumTreeFactory\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\n *  @dev A factory of trees that keep track of staked values for sortition.\n */\nlibrary SortitionSumTreeFactory {\n    /* Structs */\n\n    struct SortitionSumTree {\n        uint K; // The maximum number of childs per node.\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\n        uint[] stack;\n        uint[] nodes;\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\n        mapping(bytes32 => uint) IDsToNodeIndexes;\n        mapping(uint => bytes32) nodeIndexesToIDs;\n    }\n\n    /* Storage */\n\n    struct SortitionSumTrees {\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\n    }\n\n    /* internal */\n\n    /**\n     *  @dev Create a sortition sum tree at the specified key.\n     *  @param _key The key of the new tree.\n     *  @param _K The number of children each node in the tree should have.\n     */\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        require(tree.K == 0, \"Tree already exists.\");\n        require(_K > 1, \"K must be greater than one.\");\n        tree.K = _K;\n        tree.stack = new uint[](0);\n        tree.nodes = new uint[](0);\n        tree.nodes.push(0);\n    }\n\n    /**\n     *  @dev Set a value of a tree.\n     *  @param _key The key of the tree.\n     *  @param _value The new value.\n     *  @param _ID The ID of the value.\n     *  `O(log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\n\n        if (treeIndex == 0) { // No existing node.\n            if (_value != 0) { // Non zero value.\n                // Append.\n                // Add node.\n                if (tree.stack.length == 0) { // No vacant spots.\n                    // Get the index and append the value.\n                    treeIndex = tree.nodes.length;\n                    tree.nodes.push(_value);\n\n                    // Potentially append a new node and make the parent a sum node.\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { // Is first child.\n                        uint parentIndex = treeIndex / tree.K;\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\n                        uint newIndex = treeIndex + 1;\n                        tree.nodes.push(tree.nodes[parentIndex]);\n                        delete tree.nodeIndexesToIDs[parentIndex];\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\n                    }\n                } else { // Some vacant spot.\n                    // Pop the stack and append the value.\n                    treeIndex = tree.stack[tree.stack.length - 1];\n                    tree.stack.pop();\n                    tree.nodes[treeIndex] = _value;\n                }\n\n                // Add label.\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\n\n                updateParents(self, _key, treeIndex, true, _value);\n            }\n        } else { // Existing node.\n            if (_value == 0) { // Zero value.\n                // Remove.\n                // Remember value and set to 0.\n                uint value = tree.nodes[treeIndex];\n                tree.nodes[treeIndex] = 0;\n\n                // Push to stack.\n                tree.stack.push(treeIndex);\n\n                // Clear label.\n                delete tree.IDsToNodeIndexes[_ID];\n                delete tree.nodeIndexesToIDs[treeIndex];\n\n                updateParents(self, _key, treeIndex, false, value);\n            } else if (_value != tree.nodes[treeIndex]) { // New, non zero value.\n                // Set.\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\n                tree.nodes[treeIndex] = _value;\n\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\n            }\n        }\n    }\n\n    /* internal Views */\n\n    /**\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\n     *  @param _key The key of the tree to get the leaves from.\n     *  @param _cursor The pagination cursor.\n     *  @param _count The number of items to return.\n     *  @return startIndex The index at which leaves start\n     *  @return values The values of the returned leaves\n     *  @return hasMore Whether there are more for pagination.\n     *  `O(n)` where\n     *  `n` is the maximum number of nodes ever appended.\n     */\n    function queryLeafs(\n        SortitionSumTrees storage self,\n        bytes32 _key,\n        uint _cursor,\n        uint _count\n    ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n\n        // Find the start index.\n        for (uint i = 0; i < tree.nodes.length; i++) {\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\n                startIndex = i;\n                break;\n            }\n        }\n\n        // Get the values.\n        uint loopStartIndex = startIndex + _cursor;\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\n        uint valuesIndex = 0;\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\n            if (valuesIndex < _count) {\n                values[valuesIndex] = tree.nodes[j];\n                valuesIndex++;\n            } else {\n                hasMore = true;\n                break;\n            }\n        }\n    }\n\n    /**\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\n     *  @param _key The key of the tree.\n     *  @param _drawnNumber The drawn number.\n     *  @return ID The drawn ID.\n     *  `O(k * log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint treeIndex = 0;\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\n\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\n                uint nodeIndex = (tree.K * treeIndex) + i;\n                uint nodeValue = tree.nodes[nodeIndex];\n\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\n                else { // Pick this child.\n                    treeIndex = nodeIndex;\n                    break;\n                }\n            }\n        \n        ID = tree.nodeIndexesToIDs[treeIndex];\n    }\n\n    /** @dev Gets a specified ID's associated value.\n     *  @param _key The key of the tree.\n     *  @param _ID The ID of the value.\n     *  @return value The associated value.\n     */\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\n\n        if (treeIndex == 0) value = 0;\n        else value = tree.nodes[treeIndex];\n    }\n\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n        if (tree.nodes.length == 0) {\n            return 0;\n        } else {\n            return tree.nodes[0];\n        }\n    }\n\n    /* Private */\n\n    /**\n     *  @dev Update all the parents of a node.\n     *  @param _key The key of the tree to update.\n     *  @param _treeIndex The index of the node to start from.\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\n     *  @param _value The value to add or substract.\n     *  `O(log_k(n))` where\n     *  `k` is the maximum number of childs per node in the tree,\n     *   and `n` is the maximum number of nodes ever appended.\n     */\n    function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\n\n        uint parentIndex = _treeIndex;\n        while (parentIndex != 0) {\n            parentIndex = (parentIndex - 1) / tree.K;\n            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\n        }\n    }\n}\n"
    },
    "@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol": {
      "content": "/**\nCopyright 2019 PoolTogether LLC\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity ^0.6.0;\n\n/**\n * @author Brendan Asselstine\n * @notice A library that uses entropy to select a random number within a bound.  Compensates for modulo bias.\n * @dev Thanks to https://medium.com/hownetworks/dont-waste-cycles-with-modulo-bias-35b6fdafcf94\n */\nlibrary UniformRandomNumber {\n  /// @notice Select a random number without modulo bias using a random seed and upper bound\n  /// @param _entropy The seed for randomness\n  /// @param _upperBound The upper bound of the desired number\n  /// @return A random number less than the _upperBound\n  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n    require(_upperBound > 0, \"UniformRand/min-bound\");\n    uint256 min = -_upperBound % _upperBound;\n    uint256 random = _entropy;\n    while (true) {\n      if (random >= min) {\n        break;\n      }\n      random = uint256(keccak256(abi.encodePacked(random)));\n    }\n    return random % _upperBound;\n  }\n}"
    },
    "contracts/prize-strategy/PrizeStrategyStorage.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\";\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\n\nimport \"../comptroller/ComptrollerInterface.sol\";\nimport \"../utils/MappedSinglyLinkedList.sol\";\nimport \"../token/TokenControllerInterface.sol\";\nimport \"../token/ControlledToken.sol\";\nimport \"../prize-pool/PrizePool.sol\";\nimport \"../Constants.sol\";\n\ncontract PrizeStrategyStorage {\n  struct Credit {\n    uint192 balance;\n    uint64 timestamp;\n  }\n\n  struct RngRequest {\n    uint32 id;\n    uint32 lockBlock;\n  }\n\n  // Contract Interfaces\n  PrizePool public prizePool;\n  ComptrollerInterface public comptroller;\n  IERC20 public ticket;\n  IERC20 public sponsorship;\n  RNGInterface public rng;\n\n  // Current RNG Request\n  RngRequest internal rngRequest;\n\n  // EOA credit balances on collateral supplied to pool\n  mapping(address => Credit) internal creditBalances;\n\n  // EOA mapping for ticket-weighted odds\n  SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\n\n  // Prize period\n  uint256 public prizePeriodSeconds;\n  uint256 public prizePeriodStartedAt;\n\n  // Credit rate & Exit fee\n  uint256 public exitFeeMantissa;\n  uint256 public creditRateMantissa;\n\n  // External tokens awarded as part of prize\n  MappedSinglyLinkedList.Mapping internal externalErc20s;\n  MappedSinglyLinkedList.Mapping internal externalErc721s;\n\n  // External NFT token IDs to be awarded\n  //   NFT Address => TokenIds\n  mapping (address => uint256[]) internal externalErc721TokenIds;\n}\n"
    },
    "@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.0;\n\n/// @title Random Number Generator Interface\n/// @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\ninterface RNGInterface {\n\n  /// @notice Emitted when a new request for a random number has been submitted\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param sender The indexed address of the sender of the request\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\n\n  /// @notice Emitted when an existing request for a random number has been completed\n  /// @param requestId The indexed ID of the request used to get the results of the RNG service\n  /// @param randomNumber The random number produced by the 3rd-party service\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view returns (uint32 requestId);\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\n}\n"
    },
    "contracts/utils/MappedSinglyLinkedList.sol": {
      "content": "pragma solidity ^0.6.4;\n\n/// @notice An efficient implementation of a singly linked list of addresses\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINAL is used to denote the beginning and end of the list.\nlibrary MappedSinglyLinkedList {\n\n  /// @notice The special value address used to denote the end of the list\n  address public constant SENTINAL = address(0x1);\n\n  /// @notice The data structure to use for the list.\n  struct Mapping {\n    /// @notice How many elements are in the list\n    uint256 count;\n\n    /// @notice The data structure used to map the \"next\" addresses.  The value of this mapping is the \"next\" address for the key.\n    mapping(address => address) addressMap;\n  }\n\n  /// @notice Initializes the list.\n  /// @dev It is important that this is called so that the SENTINAL is correctly setup.\n  function initialize(Mapping storage self) internal {\n    self.addressMap[SENTINAL] = SENTINAL;\n    self.count = 0;\n  }\n\n  /// @notice Initializes the list with an array of addresses.\n  /// @param self The Mapping struct that this function is attached to\n  /// @param addresses The addresses to be added to the list.  They will be added in reverse order.\n  function initialize(Mapping storage self, address[] memory addresses) internal {\n    uint256 count = 0;\n    self.addressMap[SENTINAL] = SENTINAL;\n    for (uint256 i = 0; i < addresses.length; i++) {\n      self.addressMap[addresses[i]] = self.addressMap[SENTINAL];\n      self.addressMap[SENTINAL] = addresses[i];\n      count += 1;\n    }\n    self.count = count;\n  }\n\n  /// @notice Adds an address to the front of the list.\n  /// @param self The Mapping struct that this function is attached to\n  /// @param newAddress The address to shift to the front of the list\n  function addAddress(Mapping storage self, address newAddress) internal {\n    require(newAddress != SENTINAL && newAddress != address(0), \"Invalid address\");\n    require(self.addressMap[newAddress] == address(0), \"Already added\");\n    self.addressMap[newAddress] = self.addressMap[SENTINAL];\n    self.addressMap[SENTINAL] = newAddress;\n    self.count = self.count + 1;\n  }\n\n  /// @notice Removes an address from the list\n  /// @param self The Mapping struct that this function is attached to\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINAL if at the start.\n  /// @param addr The address to remove from the list.\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\n    require(addr != SENTINAL && addr != address(0), \"Invalid address\");\n    require(self.addressMap[prevAddress] == addr, \"Invalid prevAddress\");\n    self.addressMap[prevAddress] = self.addressMap[addr];\n    self.addressMap[addr] = address(0);\n    self.count = self.count - 1;\n  }\n\n  /// @notice Determines whether the list contains the given address\n  /// @param self The Mapping struct that this function is attached to\n  /// @param addr The address to check\n  /// @return True if the address is contained, false otherwise.\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\n    return addr != address(0) && self.addressMap[addr] != address(0);\n  }\n\n  /// @notice Returns an address array of all the addresses in this list\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\n  /// @param self The Mapping struct that this function is attached to\n  /// @return An array of all the addresses\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\n    address[] memory array = new address[](self.count);\n    uint256 count;\n    address currentToken = self.addressMap[SENTINAL];\n    while (currentToken != address(0) && currentToken != SENTINAL) {\n      array[count] = currentToken;\n      currentToken = self.addressMap[currentToken];\n      count++;\n    }\n    return array;\n  }\n\n  /// @notice Removes every address from the list\n  /// @param self The Mapping struct that this function is attached to\n  function clearAll(Mapping storage self) internal {\n    address currentToken = self.addressMap[SENTINAL];\n    while (currentToken != address(0) && currentToken != SENTINAL) {\n      address nextToken = self.addressMap[currentToken];\n      delete self.addressMap[currentToken];\n      currentToken = nextToken;\n    }\n    self.addressMap[SENTINAL] = SENTINAL;\n    self.count = 0;\n  }\n}\n"
    },
    "contracts/token/TokenControllerInterface.sol": {
      "content": "pragma solidity 0.6.4;\n\n/// @title Controlled ERC20 Token Interface\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\ninterface TokenControllerInterface {\n\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\n  /// This includes minting and burning.\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\n  /// @param amount Amount of tokens being transferred\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\n}\n"
    },
    "contracts/token/ControlledToken.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\n\nimport \"../utils/RelayRecipient.sol\";\nimport \"./TokenControllerInterface.sol\";\n\n/// @title Controlled ERC20 Token\n/// @notice ERC20 Tokens with a controller for minting & burning\ncontract ControlledToken is ERC20UpgradeSafe, RelayRecipient {\n\n  /// @notice Interface to the contract responsible for controlling mint/burn\n  TokenControllerInterface public controller;\n\n  /// @notice Initializes the Controlled Token with Toen Details and the Controller\n  /// @param _name The name of the Token\n  /// @param _symbol The symbol for the Token\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\n  /// @param _controller Address of the Controller contract for minting & burning\n  function initialize(\n    string memory _name,\n    string memory _symbol,\n    address _trustedForwarder,\n    TokenControllerInterface _controller\n  )\n    public\n    virtual\n    initializer\n  {\n    trustedForwarder = _trustedForwarder;\n    __ERC20_init(_name, _symbol);\n    controller = _controller;\n  }\n\n  /// @notice Allows the controller to mint tokens for a user account\n  /// @dev May be overridden to provide more granular control over minting\n  /// @param _user Address of the receiver of the minted tokens\n  /// @param _amount Amount of tokens to mint\n  function controllerMint(address _user, uint256 _amount) external virtual onlyController {\n    _mint(_user, _amount);\n  }\n\n  /// @notice Allows the controller to burn tokens from a user account\n  /// @dev May be overridden to provide more granular control over burning\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurn(address _user, uint256 _amount) external virtual onlyController {\n    _burn(_user, _amount);\n  }\n\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\n  /// @dev May be overridden to provide more granular control over operator-burning\n  /// @param _operator Address of the operator performing the burn action via the controller contract\n  /// @param _user Address of the holder account to burn tokens from\n  /// @param _amount Amount of tokens to burn\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual onlyController {\n    if (_operator != _user) {\n      uint256 decreasedAllowance = allowance(_user, _operator).sub(_amount, \"ControlledToken/exceeds-allowance\");\n      _approve(_user, _operator, decreasedAllowance);\n    }\n    _burn(_user, _amount);\n  }\n\n  /// @dev Function modifier to ensure that the caller is the controller contract\n  modifier onlyController {\n    require(_msgSender() == address(controller), \"ControlledToken/only-controller\");\n    _;\n  }\n\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\n  /// This includes minting and burning.\n  /// May be overridden to provide more granular control over operator-burning\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\n  /// @param amount Amount of tokens being transferred\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n    controller.beforeTokenTransfer(from, to, amount);\n  }\n\n  /// @dev Provides information about the current execution context for GSN Meta-Txs.\n  /// @return The payable address of the message sender\n  function _msgSender()\n    internal\n    override(BaseRelayRecipient, ContextUpgradeSafe)\n    virtual\n    view\n    returns (address payable)\n  {\n    return BaseRelayRecipient._msgSender();\n  }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "contracts/utils/RelayRecipient.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@opengsn/gsn/contracts/BaseRelayRecipient.sol\";\n\ncontract RelayRecipient is BaseRelayRecipient {\n  function versionRecipient() external override view returns (string memory) {\n    return \"2.0.0-beta.1+pooltogether.relay.recipient\";\n  }\n\n  function getTrustedForwarder() external view returns (address) {\n    return trustedForwarder;\n  }\n}"
    },
    "@opengsn/gsn/contracts/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\nimport \"./0x/LibBytesV06.sol\";\n\nimport \"./interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /// the TrustedForwarder singleton we accept calls from.\n    // we trust it to verify the caller's signature, and pass the caller's address as last 20 bytes\n    address internal trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through trustedForwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address payable) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            return address(uint160(LibBytesV06.readAddress(msg.data, msg.data.length - 20)));\n        }\n        return msg.sender;\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/0x/LibBytesV06.sol": {
      "content": "// SPDX-License-Identifier:APACHE-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.2;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/0x/errors/LibBytesRichErrorsV06.sol": {
      "content": "// SPDX-License-Identifier:APACHE-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.2;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/0x/errors/LibRichErrorsV06.sol": {
      "content": "// SPDX-License-Identifier:APACHE-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.2;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address payable);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "contracts/prize-pool/PrizePool.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"../prize-strategy/PrizeStrategyInterface.sol\";\nimport \"../token/ControlledToken.sol\";\nimport \"../token/TokenControllerInterface.sol\";\nimport \"../utils/MappedSinglyLinkedList.sol\";\nimport \"../utils/RelayRecipient.sol\";\n\n/// @title Base Prize Pool for managing escrowed assets\n/// @notice Manages depositing and withdrawing assets from the Prize Pool\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\nabstract contract PrizePool is OwnableUpgradeSafe, RelayRecipient, ReentrancyGuardUpgradeSafe, TokenControllerInterface {\n  using SafeMath for uint256;\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n  /// @dev Helpful data structure to organize timelock sweeps\n  struct BalanceChange {\n    address user;\n    uint256 balance;\n  }\n\n  /// @dev Event emitted when assets are deposited\n  event Deposited(\n    address indexed operator,\n    address indexed to,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when timelocked funds are re-deposited\n  event TimelockDeposited(\n    address indexed operator,\n    address indexed to,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when interest is awarded to a winner\n  event Awarded(\n    address indexed winner,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC20s are awarded to a winner\n  event AwardedExternalERC20(\n    address indexed winner,\n    address indexed token,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when external ERC721s are awarded to a winner\n  event AwardedExternalERC721(\n    address indexed winner,\n    address indexed token,\n    uint256[] tokenIds\n  );\n\n  /// @dev Event emitted when assets are withdrawn instantly\n  event InstantWithdrawal(\n    address indexed operator,\n    address indexed from,\n    address indexed token,\n    uint256 amount,\n    uint256 exitFee,\n    uint256 sponsoredExitFee\n  );\n\n  /// @dev Event emitted when assets are withdrawn into a timelock\n  event TimelockedWithdrawal(\n    address indexed operator,\n    address indexed from,\n    address indexed token,\n    uint256 amount,\n    uint256 unlockTimestamp\n  );\n\n  /// @dev Event emitted when timelocked funds are swept back to a user\n  event TimelockedWithdrawalSwept(\n    address indexed operator,\n    address indexed from,\n    uint256 amount\n  );\n\n  /// @dev Event emitted when the prize strategy is detached from the Prize Pool.\n  event PrizeStrategyDetached();\n\n  /// @dev A linked list of all the controlled tokens\n  MappedSinglyLinkedList.Mapping internal _tokens;\n\n  /// @dev The Prize Strategy that this Prize Pool is bound to.\n  PrizeStrategyInterface public prizeStrategy;\n\n  /// @dev The maximum possible exit fee fraction as a fixed point 18 number.\n  /// For example, if the maxExitFeeMantissa is \"0.1 ether\", then the maximum exit fee for a withdrawal of 100 will be 10.\n  uint256 public maxExitFeeMantissa;\n\n  /// @dev The maximum possible timelock duration for a timelocked withdrawal.\n  uint256 public maxTimelockDuration;\n\n  /// @dev The total funds that are timelocked.\n  uint256 public timelockTotalSupply;\n\n  /// @dev The timelocked balances for each user\n  mapping(address => uint256) internal timelockBalances;\n\n  /// @dev The unlock timestamps for each user\n  mapping(address => uint256) internal unlockTimestamps;\n\n  /// @notice Initializes the Prize Pool with required contract connections\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\n  /// @param _prizeStrategy Address of the component-controller that manages the prize-strategy\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock could be\n  function initialize (\n    address _trustedForwarder,\n    PrizeStrategyInterface _prizeStrategy,\n    address[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration\n  )\n    public\n    initializer\n  {\n    require(_trustedForwarder != address(0), \"PrizePool/forwarder-not-zero\");\n    require(address(_prizeStrategy) != address(0), \"PrizePool/prizeStrategy-not-zero\");\n    _tokens.initialize(_controlledTokens);\n    for (uint256 i = 0; i < _controlledTokens.length; i++) {\n      require(ControlledToken(_controlledTokens[i]).controller() == this, \"PrizePool/token-ctrlr-mismatch\");\n    }\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    trustedForwarder = _trustedForwarder;\n    prizeStrategy = _prizeStrategy;\n    maxExitFeeMantissa = _maxExitFeeMantissa;\n    maxTimelockDuration = _maxTimelockDuration;\n  }\n\n  /// @dev Inheriting contract must determine if a specific token type may be awarded as a prize enhancement\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal virtual view returns (bool);\n\n  /// @dev Inheriting contract must return an interface to the underlying asset token that conforms to the ERC20 spec\n  /// @return A reference to the interface of the underling asset token\n  function _token() internal virtual view returns (IERC20);\n\n  /// @dev Inheriting contract must return the balance of the underlying assets held by the Yield Service\n  /// @return The underlying balance of asset tokens\n  function _balance() internal virtual returns (uint256);\n\n  /// @dev Inheriting contract must provide the ability to supply asset tokens in exchange\n  /// for yield-bearing tokens to be held in escrow by the Yield Service\n  /// @param mintAmount The amount of asset tokens to be supplied\n  function _supply(uint256 mintAmount) internal virtual;\n\n  /// @dev Inheriting contract must provide the ability to redeem yield-bearing tokens in exchange\n  /// for the underlying asset tokens held in escrow by the Yield Service\n  /// @param redeemAmount The amount of yield-bearing tokens to be redeemed\n  function _redeem(uint256 redeemAmount) internal virtual;\n\n  /// @dev Inheriting contract must provide an estimate for the amount of accrued interest that would\n  /// be applied to the `principal` amount over a given number of `blocks`\n  /// @param principal The amount of asset tokens to provide an estimate on\n  /// @param blocks The number of blocks that the principal would accrue interest over\n  /// @return The estimated interest that would accrue on the principal\n  function estimateAccruedInterestOverBlocks(uint256 principal, uint256 blocks) public virtual view returns (uint256);\n\n  /// @dev Gets the underlying asset token used by the Yield Service\n  /// @return A reference to the interface of the underling asset token\n  function token() external virtual view returns (IERC20) {\n    return _token();\n  }\n\n  /// @dev Gets the balance of the underlying assets held by the Yield Service\n  /// @return The underlying balance of asset tokens\n  function balance() external virtual returns (uint256) {\n    return _balance();\n  }\n\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as a prize enhancement\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function canAwardExternal(address _externalToken) external virtual view returns (bool) {\n    return _canAwardExternal(_externalToken);\n  }\n\n  /// @notice Deposits timelocked tokens for a user back into the Prize Pool as another asset.\n  /// @param to The address receiving the tokens\n  /// @param amount The amount of timelocked assets to re-deposit\n  /// @param controlledToken The type of token to be minted in exchange (i.e. tickets or sponsorship)\n  function timelockDepositTo(\n    address to,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata data\n  )\n    external\n    onlyControlledToken(controlledToken)\n    nonReentrant\n  {\n    require(_hasPrizeStrategy(), \"PrizePool/prize-strategy-detached\");\n\n    address operator = _msgSender();\n\n    ControlledToken(controlledToken).controllerMint(to, amount);\n    timelockBalances[operator] = timelockBalances[operator].sub(amount);\n    timelockTotalSupply = timelockTotalSupply.sub(amount);\n\n    prizeStrategy.afterTimelockDepositTo(operator, to, amount, controlledToken, data);\n\n    emit TimelockDeposited(operator, to, controlledToken, amount);\n  }\n\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\n  /// @param to The address receiving the newly minted tokens\n  /// @param amount The amount of assets to deposit\n  /// @param controlledToken The address of the type of token the user is minting\n  /// @param data Call data to be passed to the Prize Strategy\n  function depositTo(\n    address to,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata data\n  )\n    external\n    onlyControlledToken(controlledToken)\n    nonReentrant\n  {\n    require(_hasPrizeStrategy(), \"PrizePool/prize-strategy-detached\");\n\n    address operator = _msgSender();\n\n    ControlledToken(controlledToken).controllerMint(to, amount);\n    require(_token().transferFrom(operator, address(this), amount), \"PrizePool/deposit-transfer-failed\");\n    _supply(amount);\n\n    prizeStrategy.afterDepositTo(to, amount, controlledToken, data);\n\n    emit Deposited(operator, to, controlledToken, amount);\n  }\n\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\n  /// @param from The address to redeem tokens from.\n  /// @param amount The amount of tokens to redeem for assets.\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\n  /// @param sponsorAmount An optional amount of assets paid by the caller to cover exit fees\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This can be pre-calculated.\n  /// @return exitFee The amount of the fairness fee paid\n  function withdrawInstantlyFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    uint256 sponsorAmount,\n    uint256 maximumExitFee,\n    bytes calldata data\n  )\n    external\n    nonReentrant\n    onlyControlledToken(controlledToken)\n    returns (uint256 exitFee)\n  {\n\n    if (_hasPrizeStrategy()) {\n      exitFee = limitExitFee(amount, prizeStrategy.beforeWithdrawInstantlyFrom(from, amount, controlledToken, data));\n    }\n\n    uint256 maxFee = FixedPoint.multiplyUintByMantissa(amount, maxExitFeeMantissa);\n    if (exitFee > maxFee) {\n      exitFee = maxFee;\n    }\n\n    require(exitFee <= maximumExitFee, \"PrizePool/exit-fee-exceeds-user-maximum\");\n\n    uint256 sponsoredExitFeePortion = (exitFee > sponsorAmount) ? sponsorAmount : exitFee;\n    uint256 userExitFee = exitFee.sub(sponsoredExitFeePortion);\n\n    if (sponsoredExitFeePortion > 0) {\n      // transfer the fee to this contract\n      require(_token().transferFrom(_msgSender(), address(this), sponsoredExitFeePortion), \"PrizePool/sponsor-transfer-failed\");\n    }\n\n    // burn the tickets\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\n\n    // redeem the tickets less the fee\n    uint256 amountLessFee = amount.sub(userExitFee);\n    _redeem(amountLessFee);\n\n    require(_token().transfer(from, amountLessFee), \"PrizePool/instant-transfer-failed\");\n\n    if (_hasPrizeStrategy()) {\n      prizeStrategy.afterWithdrawInstantlyFrom(_msgSender(), from, amount, controlledToken, exitFee, sponsoredExitFeePortion, data);\n    }\n\n    emit InstantWithdrawal(_msgSender(), from, controlledToken, amount, exitFee, sponsoredExitFeePortion);\n  }\n\n  function limitExitFee(uint256 withdrawalAmount, uint256 exitFee) internal view returns (uint256) {\n    uint256 maxFee = FixedPoint.multiplyUintByMantissa(withdrawalAmount, maxExitFeeMantissa);\n    if (exitFee > maxFee) {\n      exitFee = maxFee;\n    }\n    return exitFee;\n  }\n\n  /// @notice Withdraw assets from the Prize Pool by placing them into the timelock.\n  /// @dev The timelock is used to ensure that the tickets have contributed their fair share of the prize.\n  /// @param from The address to withdraw from\n  /// @param amount The amount to withdraw\n  /// @param controlledToken The type of token being withdrawn\n  /// @return unlockTimestamp The timestamp after which the funds can be swept\n  function withdrawWithTimelockFrom(\n    address from,\n    uint256 amount,\n    address controlledToken,\n    bytes calldata data\n  )\n    external\n    nonReentrant\n    onlyControlledToken(controlledToken)\n    returns (uint256 unlockTimestamp)\n  {\n    uint256 blockTime = _currentTime();\n\n    if (_hasPrizeStrategy()) {\n      unlockTimestamp = prizeStrategy.beforeWithdrawWithTimelockFrom(from, amount, controlledToken, data);\n    }\n\n    uint256 lockDuration = unlockTimestamp > blockTime ? unlockTimestamp.sub(blockTime) : 0;\n    if (lockDuration > maxTimelockDuration) {\n      unlockTimestamp = blockTime.add(maxTimelockDuration);\n    }\n\n    ControlledToken(controlledToken).controllerBurnFrom(_msgSender(), from, amount);\n    _mintTimelock(from, amount, unlockTimestamp);\n\n    if (_hasPrizeStrategy()) {\n      prizeStrategy.afterWithdrawWithTimelockFrom(from, amount, controlledToken, data);\n    }\n\n    emit TimelockedWithdrawal(_msgSender(), from, controlledToken, amount, unlockTimestamp);\n\n    // return the block at which the funds will be available\n    return unlockTimestamp;\n  }\n\n  function _mintTimelock(address user, uint256 amount, uint256 timestamp) internal {\n    // Sweep the old balance, if any\n    address[] memory users = new address[](1);\n    users[0] = user;\n    _sweepTimelockBalances(users);\n\n    timelockTotalSupply = timelockTotalSupply.add(amount);\n    timelockBalances[user] = timelockBalances[user].add(amount);\n    unlockTimestamps[user] = timestamp;\n\n    // if the funds should already be unlocked\n    if (timestamp <= _currentTime()) {\n      _sweepTimelockBalances(users);\n    }\n  }\n\n  /// @notice Updates the Prize Strategy when tokens are transferred between holders.  Only transfers, not minting or burning.\n  /// @param from The address the tokens are being transferred from\n  /// @param to The address the tokens are being transferred to\n  /// @param amount The amount of tokens being trasferred\n  function beforeTokenTransfer(address from, address to, uint256 amount) external override onlyControlledToken(msg.sender) {\n    // minting and redeeming are handled separately\n    if (from != address(0) && to != address(0) && _hasPrizeStrategy()) {\n      prizeStrategy.beforeTokenTransfer(from, to, amount, msg.sender);\n    }\n  }\n\n  /// @notice Updates and returns the current prize.\n  /// @dev Updates the internal rolling interest rate since the last poke\n  /// @return award The total amount of assets to be awarded for the current prize\n  function awardBalance() public returns (uint256 award) {\n    uint256 tokenTotalSupply = _tokenTotalSupply();\n    uint256 bal = _balance();\n\n    if (bal > tokenTotalSupply) {\n      return bal.sub(tokenTotalSupply);\n    } else {\n      return 0;\n    }\n  }\n\n  /// @notice Called by the Prize-Strategy to Award a Prize to a specific account\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of assets to be awarded\n  /// @param controlledToken The addess of the asset token being awarded\n  function award(\n    address to,\n    uint256 amount,\n    address controlledToken\n  )\n    external\n    onlyPrizeStrategy\n    onlyControlledToken(controlledToken)\n  {\n    if (amount == 0) {\n      return;\n    }\n\n    require(amount <= awardBalance(), \"PrizePool/award-exceeds-avail\");\n    ControlledToken(controlledToken).controllerMint(to, amount);\n\n    emit Awarded(to, controlledToken, amount);\n  }\n\n  /// @notice Called by the Prize-Strategy to Award Secondary (external) Prize amounts to a specific account\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param amount The amount of external assets to be awarded\n  /// @param externalToken The addess of the external asset token being awarded\n  function awardExternalERC20(\n    address to,\n    address externalToken,\n    uint256 amount\n  )\n    external\n    onlyPrizeStrategy\n  {\n    require(_canAwardExternal(externalToken), \"PrizePool/invalid-external-token\");\n\n    if (amount == 0) {\n      return;\n    }\n\n    require(IERC20(externalToken).transfer(to, amount), \"PrizePool/award-ex-erc20-failed\");\n\n    emit AwardedExternalERC20(to, externalToken, amount);\n  }\n\n  /// @notice Called by the Prize-Strategy to Award Secondary (external) Prize NFTs to a specific account\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\n  /// @param to The address of the winner that receives the award\n  /// @param externalToken The addess of the external NFT token being awarded\n  /// @param tokenIds An array of NFT Token IDs to be transferred\n  function awardExternalERC721(\n    address to,\n    address externalToken,\n    uint256[] calldata tokenIds\n  )\n    external\n    onlyPrizeStrategy\n  {\n    require(_canAwardExternal(externalToken), \"PrizePool/invalid-external-token\");\n\n    if (tokenIds.length == 0) {\n      return;\n    }\n\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      IERC721(externalToken).transferFrom(address(this), to, tokenIds[i]);\n    }\n\n    emit AwardedExternalERC721(to, externalToken, tokenIds);\n  }\n\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\n  /// @param users An array of account addresses to sweep balances for\n  /// @return totalWithdrawal The total amount of assets swept from the Prize Pool\n  function sweepTimelockBalances(\n    address[] calldata users\n  )\n    external\n    nonReentrant\n    returns (uint256 totalWithdrawal)\n  {\n    totalWithdrawal = _sweepTimelockBalances(users);\n  }\n\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\n  /// @param users An array of account addresses to sweep balances for\n  /// @return totalWithdrawal The total amount of assets swept from the Prize Pool\n  function _sweepTimelockBalances(\n    address[] memory users\n  )\n    internal\n    returns (uint256 totalWithdrawal)\n  {\n    address operator = _msgSender();\n\n    // first gather the total withdrawal and fee\n    totalWithdrawal = _calculateTotalForSweep(users);\n    // if there is nothing to do, just quit\n    if (totalWithdrawal == 0) {\n      return 0;\n    }\n\n    _redeem(totalWithdrawal);\n\n    BalanceChange[] memory changes = new BalanceChange[](users.length);\n\n    IERC20 underlyingToken = IERC20(_token());\n    uint256 i;\n    for (i = 0; i < users.length; i++) {\n      address user = users[i];\n      if (unlockTimestamps[user] <= _currentTime()) {\n        uint256 userBalance = timelockBalances[user];\n        if (userBalance > 0) {\n          timelockTotalSupply = timelockTotalSupply.sub(userBalance);\n          delete timelockBalances[user];\n          delete unlockTimestamps[user];\n          require(underlyingToken.transfer(user, userBalance), \"PrizePool/sweep-transfer-failed\");\n          emit TimelockedWithdrawalSwept(operator, user, userBalance);\n        }\n        changes[i] = BalanceChange(user, userBalance);\n      } else {\n        changes[i] = BalanceChange(user, 0);\n      }\n    }\n\n    // Update prize strategy after sweep\n    _updateAfterSweep(changes, operator);\n  }\n\n  /// @dev Calculates the total amount of unlocked assets available to be withdrawn via Sweep\n  /// @param users An array of account addresses to sweep balances for\n  /// @return totalWithdrawal The total amount of assets that can be swept from the Prize Pool\n  function _calculateTotalForSweep(address[] memory users) internal view returns (uint256 totalWithdrawal) {\n    for (uint256 i = 0; i < users.length; i++) {\n      address user = users[i];\n      if (unlockTimestamps[user] <= _currentTime()) {\n        totalWithdrawal = totalWithdrawal.add(timelockBalances[user]);\n      }\n    }\n  }\n\n  /// @dev Updates the Prize Strategy after a sweep has been performed on timelocked balances\n  /// @param changes An array of user-balance changes\n  /// @param operator The address of the operator performing the update\n  function _updateAfterSweep(BalanceChange[] memory changes, address operator) internal {\n    if (!_hasPrizeStrategy()) { return; }\n\n    for (uint256 i = 0; i < changes.length; i++) {\n      BalanceChange memory change = changes[i];\n      if (change.balance > 0) {\n        prizeStrategy.afterSweepTimelockedWithdrawal(operator, change.user, change.balance);\n      }\n    }\n  }\n\n  /// @notice Allows the Governor to add Controlled Tokens to the Prize Pool\n  /// @param _controlledToken The address of the Controlled Token to add\n  function addControlledToken(address _controlledToken) external onlyOwner {\n    require(ControlledToken(_controlledToken).controller() == this, \"PrizePool/token-ctrlr-mismatch\");\n    _tokens.addAddress(_controlledToken);\n  }\n\n  /// @notice Emergency shutdown of the Prize Pool by detaching the Prize Strategy\n  /// @dev Called by the PrizeStrategy contract to issue an Emergency Shutdown of a corrupted Prize Strategy\n  function detachPrizeStrategy() external onlyOwner {\n    delete prizeStrategy;\n    emit PrizeStrategyDetached();\n  }\n\n  /// @notice Check if the Prize Pool has an active Prize Strategy\n  /// @dev When the prize strategy is detached deposits are disabled, and only withdrawals are permitted\n  function _hasPrizeStrategy() internal view returns (bool) {\n    return (address(prizeStrategy) != address(0x0));\n  }\n\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\n  /// @return controlledTokens An array of controlled token addresses\n  function tokens() external view returns (address[] memory controlledTokens) {\n    return _tokens.addressArray();\n  }\n\n  /// @dev Gets the current time as represented by the current block\n  /// @return timestamp The timestamp of the current block\n  function _currentTime() internal virtual view returns (uint256 timestamp) {\n    return block.timestamp;\n  }\n\n  /// @notice The timestamp at which an accounts timelocked balance will be made available\n  /// @param user The address of an account with timelocked assets\n  /// @return unlockTimestamp The timestamp at which the locked assets will be made available\n  function timelockBalanceAvailableAt(address user) external view returns (uint256 unlockTimestamp) {\n    return unlockTimestamps[user];\n  }\n\n  /// @notice The balance of timelocked assets for an account\n  /// @param user The address of an account with timelocked assets\n  /// @return timelockBalance The amount of assets that have been timelocked\n  function timelockBalanceOf(address user) external view returns (uint256 timelockBalance) {\n    return timelockBalances[user];\n  }\n\n  /// @notice The currently accounted-for balance in relation to the rolling exchange-rate\n  /// @return totalAccounted The currently accounted-for balance\n  function accountedBalance() external view returns (uint256 totalAccounted) {\n    return _tokenTotalSupply();\n  }\n\n  /// @dev The currently accounted-for balance in relation to the rolling exchange-rate\n  /// @return total The currently accounted-for balance\n  function _tokenTotalSupply() internal view returns (uint256 total) {\n    total = timelockTotalSupply;\n    address currentToken = _tokens.addressMap[MappedSinglyLinkedList.SENTINAL];\n    while (currentToken != address(0) && currentToken != MappedSinglyLinkedList.SENTINAL) {\n      total = total.add(IERC20(currentToken).totalSupply());\n      currentToken = _tokens.addressMap[currentToken];\n    }\n  }\n\n  /// @dev Checks if a specific token is controlled by the Prize Pool\n  /// @param controlledToken The address of the token to check\n  /// @return True if the token is a controlled token, false otherwise\n  function isControlled(address controlledToken) internal view returns (bool) {\n    return _tokens.contains(controlledToken);\n  }\n\n  function _msgSender() internal override(BaseRelayRecipient, ContextUpgradeSafe) virtual view returns (address payable) {\n    return BaseRelayRecipient._msgSender();\n  }\n\n  /// @dev Function modifier to ensure usage of tokens controlled by the Prize Pool\n  /// @param controlledToken The address of the token to check\n  modifier onlyControlledToken(address controlledToken) {\n    require(isControlled(controlledToken), \"PrizePool/unknown-token\");\n    _;\n  }\n\n  /// @dev Function modifier to ensure caller is the prize-strategy\n  modifier onlyPrizeStrategy() {\n    require(msg.sender == address(prizeStrategy), \"PrizePool/only-prizeStrategy\");\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC165.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/prize-strategy/PrizeStrategyInterface.sol": {
      "content": "pragma solidity 0.6.4;\n\n/// @title Prize Strategy Interface\n/// @notice Required interface for a Prize Strategy to implement controls over various components\n/// @dev Defines the spec required to be implemented by a Prize Strategy.\ninterface PrizeStrategyInterface {\n\n  /// @dev Inheriting contract must handle to token transfers into and out of the Prize Pool to account for balance changes\n  /// @param from The address of the sender of the token transfer\n  /// @param to The address of the receiver of the token transfer\n  /// @param amount The amount of tokens transferred\n  /// @param controlledToken The address of the token that was transferred\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\n\n  /// @dev Inheriting contract must handle deposits into the Prize Pool and account for balance changes\n  /// @param to The address of the account who is receiving the deposit\n  /// @param amount The amount of the deposit to account for\n  /// @param controlledToken The address of the token that was deposited\n  function afterDepositTo(address to, uint256 amount, address controlledToken, bytes calldata data) external;\n\n  /// @notice Called by the Prize Pool after a user converts their timelocked tokens into a deposit\n  /// @dev Inheriting contract must handle deposits into the Prize Pool and account for balance changes\n  /// @param operator The user whose timelock was re-deposited\n  /// @param to The address of the account who is receiving the deposit\n  /// @param amount The amount of the deposit to account for\n  /// @param controlledToken The address of the token that was deposited\n  function afterTimelockDepositTo(address operator, address to, uint256 amount, address controlledToken, bytes calldata data) external;\n\n  /// @dev Inheriting contract must provide a view into the unlock timestamp for a timelocked withdrawal\n  /// @param from The address of the account to withdraw from\n  /// @param amount The amount of the withdrawal to account for\n  /// @param controlledToken The address of the token to be withdrawn\n  /// @return The unlock timestamp for releasing locked assets\n  function beforeWithdrawWithTimelockFrom(address from, uint256 amount, address controlledToken, bytes calldata data) external returns (uint256);\n\n  /// @dev Inheriting contract must handle withdrawals from the Prize Pool that have a timelock on the Assets\n  /// @param from The address of the account who performed the withdrawal\n  /// @param amount The amount of the withdrawal to account for\n  /// @param controlledToken The address of the token to be withdrawn\n  function afterWithdrawWithTimelockFrom(address from, uint256 amount, address controlledToken, bytes calldata data) external;\n\n  /// @dev Inheriting contract must provide a view into the exit \"fairness\" fee for an instant withdrawal\n  /// @param from The address of the account to withdraw from\n  /// @param amount The amount of the withdrawal to account for\n  /// @param controlledToken The address of the token to be withdrawn\n  /// @return The exit \"fairness\" fee required to withdraw instantly\n  function beforeWithdrawInstantlyFrom(address from, uint256 amount, address controlledToken, bytes calldata data) external returns (uint256);\n\n  /// @dev Inheriting contract must handle instant withdrawals from the Prize Pool\n  /// @param operator The address of an approved operator who performed the withdrawal\n  /// @param from The address of the account to withdraw from\n  /// @param amount The amount of the withdrawal to account for\n  /// @param controlledToken The address of the token withdrawn\n  /// @param exitFee The amount of the exit \"fairness\" fee charged for the withdrawal\n  /// @param sponsoredExitFee The amount of asset tokens paid by the operator to cover the exit fee on behalf of the owner\n  function afterWithdrawInstantlyFrom(\n    address operator,\n    address from,\n    uint256 amount,\n    address controlledToken,\n    uint256 exitFee,\n    uint256 sponsoredExitFee,\n    bytes calldata data\n  ) external;\n\n  /// @dev Inheriting contract must handle swept assets on the Prize Pool\n  /// @param operator The address of the operator who performed the sweep\n  /// @param from The address of the account that received the swept assets\n  /// @param amount The amount of the asset tokens that were swept\n  function afterSweepTimelockedWithdrawal(address operator, address from, uint256 amount) external;\n}"
    },
    "contracts/Constants.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Registry.sol\";\n\nlibrary Constants {\n  IERC1820Registry public constant REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n  // keccak256(\"ERC777TokensSender\")\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n  // keccak256(\"ERC777TokensRecipient\")\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n  // keccak256(abi.encodePacked(\"ERC1820_ACCEPT_MAGIC\"));\n  bytes32 public constant ACCEPT_MAGIC =\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\n}"
    },
    "contracts/external/openzeppelin/ProxyFactory.sol": {
      "content": "pragma solidity 0.6.4;\n\n// solium-disable security/no-inline-assembly\n// solium-disable security/no-low-level-calls\ncontract ProxyFactory {\n\n  event ProxyCreated(address proxy);\n\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    bytes20 targetBytes = bytes20(_logic);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, clone, 0x37)\n    }\n\n    emit ProxyCreated(address(proxy));\n\n    if(_data.length > 0) {\n      (bool success,) = proxy.call(_data);\n      require(success, \"ProxyFactory/constructor-call-failed\");\n    }\n  }\n}\n"
    },
    "contracts/prize-pool/compound/CompoundPrizePoolProxyFactory.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"./CompoundPrizePool.sol\";\nimport \"../../external/openzeppelin/ProxyFactory.sol\";\n\n/// @title Compound Prize Pool Factory\n/// @notice Minimal proxy pattern for creating new Compound Prize Pools\ncontract CompoundPrizePoolProxyFactory is ProxyFactory {\n\n  /// @notice Contract template for deploying proxied Prize Pools\n  CompoundPrizePool public instance;\n\n  /// @notice Initializes the Factory with an instance of the Compound Prize Pool\n  constructor () public {\n    instance = new CompoundPrizePool();\n  }\n\n  /// @notice Creates a new Compound Prize Pool as a proxy of the template instance\n  /// @return A reference to the new proxied Compound Prize Pool\n  function create() external returns (CompoundPrizePool) {\n    return CompoundPrizePool(deployMinimal(address(instance), \"\"));\n  }\n}\n"
    },
    "contracts/prize-pool/compound/CompoundPrizePool.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"../../external/compound/CTokenInterface.sol\";\nimport \"../PrizePool.sol\";\n\n/// @title Prize Pool with Compound's cToken\n/// @notice Manages depositing and withdrawing assets from the Prize Pool\ncontract CompoundPrizePool is PrizePool {\n  using SafeMath for uint256;\n\n  /// @notice Interface for the Yield-bearing cToken by Compound\n  CTokenInterface public cToken;\n\n  /// @notice Initializes the Prize Pool and Yield Service with the required contract connections\n  /// @param _trustedForwarder Address of the Forwarding Contract for GSN Meta-Txs\n  /// @param _prizeStrategy Address of the component-controller that manages the prize-strategy\n  /// @param _controlledTokens Array of addresses for the Ticket and Sponsorship Tokens controlled by the Prize Pool\n  /// @param _maxExitFeeMantissa The maximum exit fee size, relative to the withdrawal amount\n  /// @param _maxTimelockDuration The maximum length of time the withdraw timelock could be\n  /// @param _cToken Address of the Compound cToken interface\n  function initialize (\n    address _trustedForwarder,\n    PrizeStrategyInterface _prizeStrategy,\n    address[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    CTokenInterface _cToken\n  )\n    public\n    initializer\n  {\n    PrizePool.initialize(\n      _trustedForwarder,\n      _prizeStrategy,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration\n    );\n    cToken = _cToken;\n  }\n\n  /// @notice Estimates the accrued interest of a deposit of a given number of blocks\n  /// @dev Provides an estimate for the amount of accrued interest that would\n  /// be applied to the `principalAmount` over a given number of `blocks`\n  /// @param principalAmount The amount of asset tokens to provide an estimate on\n  /// @param blocks The number of blocks that the principal would accrue interest over\n  /// @return The estimated interest that would accrue on the principal\n  function estimateAccruedInterestOverBlocks(\n    uint256 principalAmount,\n    uint256 blocks\n  )\n    public\n    view\n    override\n    returns (uint256)\n  {\n    // estimated = principalAmount * supply rate per block * blocks\n    uint256 multiplier = principalAmount.mul(blocks);\n    return FixedPoint.multiplyUintByMantissa(multiplier, supplyRatePerBlock());\n  }\n\n  /// @dev Gets the current interest-rate the Compound cToken\n  /// @return The current exchange-rate\n  function supplyRatePerBlock() internal view returns (uint256) {\n    (bool success, bytes memory data) = address(cToken).staticcall(abi.encodeWithSignature(\"supplyRatePerBlock()\"));\n    require(success, \"CompoundPrizePool/supplyRatePerBlock-failed\");\n    return abi.decode(data, (uint256));\n  }\n\n  /// @dev Gets the balance of the underlying assets held by the Yield Service\n  /// @return The underlying balance of asset tokens\n  function _balance() internal override returns (uint256) {\n    return cToken.balanceOfUnderlying(address(this));\n  }\n\n  /// @dev Allows a user to supply asset tokens in exchange for yield-bearing tokens\n  /// to be held in escrow by the Yield Service\n  /// @param amount The amount of asset tokens to be supplied\n  function _supply(uint256 amount) internal override {\n    IERC20 assetToken = _token();\n    assetToken.approve(address(cToken), amount);\n    cToken.mint(amount);\n  }\n\n  /// @dev Checks with the Prize Pool if a specific token type may be awarded as a prize enhancement\n  /// @param _externalToken The address of the token to check\n  /// @return True if the token may be awarded, false otherwise\n  function _canAwardExternal(address _externalToken) internal override view returns (bool) {\n    return _externalToken != address(cToken);\n  }\n\n  /// @dev Allows a user to redeem yield-bearing tokens in exchange for the underlying\n  /// asset tokens held in escrow by the Yield Service\n  /// @param amount The amount of yield-bearing tokens to be redeemed\n  function _redeem(uint256 amount) internal override {\n    cToken.redeemUnderlying(amount);\n  }\n\n  /// @dev Gets the underlying asset token used by the Yield Service\n  /// @return A reference to the interface of the underling asset token\n  function _token() internal override view returns (IERC20) {\n    return IERC20(cToken.underlying());\n  }\n}\n"
    },
    "contracts/external/compound/CTokenInterface.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\n\ninterface CTokenInterface is IERC20 {\n    function totalSupply() external override view returns (uint256);\n    function underlying() external view returns (address);\n    function balanceOfUnderlying(address owner) external returns (uint256);\n    function supplyRatePerBlock() external returns (uint256);\n    function exchangeRateCurrent() external returns (uint256);\n    function mint(uint256 mintAmount) external returns (uint256);\n    function balanceOf(address user) external override view returns (uint256);\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n}\n"
    },
    "contracts/token/ControlledTokenProxyFactory.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"./ControlledToken.sol\";\nimport \"../external/openzeppelin/ProxyFactory.sol\";\n\n/// @title Controlled ERC20 Token Factory\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\ncontract ControlledTokenProxyFactory is ProxyFactory {\n\n  /// @notice Contract template for deploying proxied tokens\n  ControlledToken public instance;\n\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\n  constructor () public {\n    instance = new ControlledToken();\n  }\n\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\n  /// @return A reference to the new proxied Controlled ERC20 Token\n  function create() external returns (ControlledToken) {\n    return ControlledToken(deployMinimal(address(instance), \"\"));\n  }\n}\n"
    },
    "contracts/external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol": {
      "content": "pragma solidity 0.6.4;\n\ninterface OpenZeppelinProxyFactoryInterface {\n  function deploy(uint256 _salt, address _logic, address _admin, bytes calldata _data) external returns (address);\n  function getDeploymentAddress(uint256 _salt, address _sender) external view returns (address);\n}\n"
    },
    "contracts/comptroller/Comptroller.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\";\n\nimport \"../utils/UInt256Array.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./ComptrollerInterface.sol\";\n\ncontract Comptroller is ComptrollerStorage, ComptrollerInterface {\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using UInt256Array for uint256[];\n  using ExtendedSafeCast for uint256;\n  using BalanceDripManager for BalanceDripManager.State;\n  using BalanceDrip for BalanceDrip.State;\n  using VolumeDrip for VolumeDrip.State;\n\n  event ReserveRateMantissaSet(\n    uint256 reserveRateMantissa\n  );\n\n  event BalanceDripAdded(\n    address indexed prizeStrategy,\n    address indexed measure,\n    address indexed dripToken,\n    uint256 dripRatePerSecond\n  );\n\n  event BalanceDripRemoved(\n    address indexed prizeStrategy,\n    address indexed measure,\n    address indexed dripToken\n  );\n\n  event BalanceDripRateSet(\n    address indexed prizeStrategy,\n    address indexed measure,\n    address indexed dripToken,\n    uint256 dripRatePerSecond\n  );\n\n  event BalanceDripClaimed(\n    address indexed prizeStrategy,\n    address indexed measure,\n    address indexed dripToken,\n    address user,\n    uint256 amount\n  );\n\n  event VolumeDripCreated(\n    uint256 indexed index,\n    address indexed dripToken,\n    uint256 periodSeconds,\n    uint256 dripAmount\n  );\n\n  event VolumeDripActivated(\n    uint256 indexed index,\n    address indexed prizeStrategy,\n    address indexed measure,\n    bool isReferral,\n    uint256 activeIndex\n  );\n\n  event VolumeDripPeriodEnded(\n    uint256 indexed index,\n    uint16 indexed period,\n    uint256 endTime\n  );\n\n  event VolumeDripPeriodStarted(\n    uint256 indexed index,\n    uint16 indexed period,\n    uint256 startTime\n  );\n\n  event VolumeDripDeposited(\n    uint256 indexed index,\n    address indexed user,\n    uint256 amount,\n    uint256 balance,\n    uint256 accrued\n  );\n\n  event VolumeDripAmountSet(\n    uint256 indexed index,\n    uint256 dripAmount\n  );\n\n  event VolumeDripClaimed(\n    uint256 indexed index,\n    address user,\n    address dripToken,\n    uint256 amount\n  );\n\n  event VolumeDripDeactivated(\n    uint256 indexed index,\n    address indexed prizeStrategy,\n    address indexed measure,\n    bool isReferral,\n    uint256 activeIndex\n  );\n\n  function initialize(address owner) public initializer {\n    __Ownable_init();\n    transferOwnership(owner);\n  }\n\n  function reserveRateMantissa() external view override returns (uint256) {\n    return _reserveRateMantissa;\n  }\n\n  function setReserveRateMantissa(uint256 __reserveRateMantissa) external onlyOwner returns (uint256) {\n    _reserveRateMantissa = __reserveRateMantissa;\n\n    emit ReserveRateMantissaSet(_reserveRateMantissa);\n  }\n\n  function addBalanceDrip(address prizeStrategy, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\n    balanceDrips[prizeStrategy].addDrip(measure, dripToken, dripRatePerSecond, _currentTime());\n\n    emit BalanceDripAdded(\n      prizeStrategy,\n      measure,\n      dripToken,\n      dripRatePerSecond\n    );\n  }\n\n  function removeBalanceDrip(address prizeStrategy, address measure, address prevDripToken, address dripToken) external onlyOwner {\n    balanceDrips[prizeStrategy].removeDrip(measure, prevDripToken, dripToken);\n\n    emit BalanceDripRemoved(prizeStrategy, measure, dripToken);\n  }\n\n  function getBalanceDrip(\n    address prizeStrategy,\n    address measure,\n    address dripToken\n  )\n    external\n    view\n    returns (\n      uint256 dripRatePerSecond,\n      uint128 exchangeRateMantissa,\n      uint32 timestamp\n    )\n  {\n    BalanceDrip.State storage balanceDrip = balanceDrips[prizeStrategy].getDrip(measure, dripToken);\n    dripRatePerSecond = balanceDrip.dripRatePerSecond;\n    exchangeRateMantissa = balanceDrip.exchangeRateMantissa;\n    timestamp = balanceDrip.timestamp;\n  }\n\n  function setBalanceDripRate(address prizeStrategy, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\n    balanceDrips[prizeStrategy].setDripRate(measure, dripToken, dripRatePerSecond);\n\n    emit BalanceDripRateSet(\n      prizeStrategy,\n      measure,\n      dripToken,\n      dripRatePerSecond\n    );\n  }\n\n  function balanceOfBalanceDrip(\n    address prizeStrategy,\n    address measure,\n    address dripToken,\n    address user\n  )\n    external\n    returns (uint256)\n  {\n    balanceDrips[prizeStrategy].updateDrips(\n      measure,\n      user,\n      IERC20(measure).balanceOf(user), // we want the original balance\n      IERC20(measure).totalSupply(),\n      _currentTime()\n    );\n    return balanceDrips[prizeStrategy].balanceDrips[measure][dripToken].userStates[user].dripBalance;\n  }\n\n  function claimBalanceDrip(address prizeStrategy, address user, address measure, address dripToken) external {\n    balanceDrips[prizeStrategy].updateDrips(\n      measure,\n      user,\n      IERC20(measure).balanceOf(user), // we want the original balance\n      IERC20(measure).totalSupply(),\n      _currentTime()\n    );\n    uint256 amount = balanceDrips[prizeStrategy].claimDripTokens(user, measure, dripToken);\n\n    emit BalanceDripClaimed(\n      prizeStrategy,\n      user,\n      measure,\n      dripToken,\n      amount\n    );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  function addVolumeDrip(\n    address prizeStrategy,\n    address measure,\n    address dripToken,\n    uint32 periodSeconds,\n    uint128 dripAmount,\n    uint32 startTime,\n    bool isReferral\n  )\n    external\n    onlyOwner\n    returns (uint256 index)\n  {\n    PrizeStrategyVolumeDripManager storage prizeStrategyVolumeDripManager = prizeStrategyVolumeDripManagers[prizeStrategy];\n\n    index = ++lastVolumeDripId;\n    VolumeDrip.State storage drip = volumeDrips[index];\n    drip.initialize(periodSeconds, dripAmount, startTime);\n    volumeDripTokens[index] = dripToken;\n\n    uint256 activeIndex;\n    if (isReferral) {\n      activeIndex = prizeStrategyVolumeDripManager.activeMeasureReferralVolumeDripIndices[measure].length;\n      prizeStrategyVolumeDripManager.activeMeasureReferralVolumeDripIndices[measure].push(index);\n    } else {\n      activeIndex = prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure].length;\n      prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure].push(index);\n    }\n\n    emit VolumeDripCreated(\n      index,\n      dripToken,\n      periodSeconds,\n      dripAmount\n    );\n\n    emit VolumeDripActivated(\n      index,\n      prizeStrategy,\n      measure,\n      isReferral,\n      activeIndex\n    );\n\n    emit VolumeDripPeriodStarted(\n      index,\n      drip.currentPeriodIndex,\n      startTime\n    );\n  }\n\n  function deactivateVolumeDrip(\n    address prizeStrategy,\n    address measure,\n    bool isReferral,\n    uint256 index,\n    uint256 activeIndex\n  )\n    public\n  {\n    PrizeStrategyVolumeDripManager storage prizeStrategyVolumeDripManager = prizeStrategyVolumeDripManagers[prizeStrategy];\n    require(prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure][activeIndex] == index, \"Comptroller/volume-drip-not-active\");\n    prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure].remove(activeIndex);\n    emit VolumeDripDeactivated(\n      index,\n      prizeStrategy,\n      measure,\n      isReferral,\n      activeIndex\n    );\n  }\n\n  function findActiveMeasureVolumeDripIndex(\n    PrizeStrategyVolumeDripManager storage prizeStrategyVolumeDripManager,\n    address measure,\n    uint256 index\n  )\n    internal\n    view\n    returns (\n      uint256 activeMeasureVolumeDripIndex,\n      bool found\n    )\n  {\n    // This for loop may blow up, so have a backup!\n    for (uint256 i = 0; i < prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure].length; i++) {\n      if (prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[measure][i] == index) {\n        activeMeasureVolumeDripIndex = i;\n        found = true;\n        break;\n      }\n    }\n  }\n\n  function getVolumeDrip(\n    uint256 index\n  )\n    external\n    view\n    returns (\n      uint32 periodSeconds,\n      uint128 dripAmount,\n      uint32 startTime\n    )\n  {\n    periodSeconds = volumeDrips[index].periodSeconds;\n    dripAmount = volumeDrips[index].dripAmount;\n    startTime = volumeDrips[index].currentPeriod().startTime;\n  }\n\n  function setVolumeDripAmount(uint256 index, uint128 dripAmount) external onlyOwner {\n    require(index <= lastVolumeDripId, \"Comptroller/volume-drip-invalid\");\n    volumeDrips[index].dripAmount = dripAmount;\n\n    emit VolumeDripAmountSet(\n      index,\n      dripAmount\n    );\n  }\n\n  function depositVolumeDrip(\n    address user,\n    uint256 amount,\n    uint256[] storage volumeDripIndices\n  )\n    internal\n  {\n    for (uint256 i = 0; i < volumeDripIndices.length; i++) {\n      VolumeDrip.State storage dripState = volumeDrips[volumeDripIndices[i]];\n      checkVolumeDripPeriod(volumeDripIndices[i]);\n      dripState.mint(\n        user,\n        amount,\n        _currentTime()\n      );\n\n      emit VolumeDripDeposited(\n        volumeDripIndices[i],\n        user,\n        amount,\n        dripState.deposits[user].balance,\n        dripState.deposits[user].accrued\n      );\n    }\n  }\n\n  function checkVolumeDripPeriod(uint256 index) internal {\n    if (volumeDrips[index].isPeriodOver(_currentTime())) {\n      uint256 endTime = volumeDrips[index].currentPeriodEndAt();\n      uint16 lastPeriod = volumeDrips[index].currentPeriodIndex;\n\n      volumeDrips[index].completePeriod(_currentTime());\n\n      emit VolumeDripPeriodEnded(\n        index,\n        lastPeriod,\n        endTime\n      );\n\n      emit VolumeDripPeriodStarted(\n        index,\n        volumeDrips[index].currentPeriodIndex,\n        volumeDrips[index].currentPeriod().startTime\n      );\n    }\n  }\n\n  function balanceOfVolumeDrip(uint256 index, address user) external returns (uint256) {\n    checkVolumeDripPeriod(index);\n    return volumeDrips[index].balanceOf(user).accrued;\n  }\n\n  function claimVolumeDrip(uint256 index, address user) external {\n    VolumeDrip.State storage volumeDrip = volumeDrips[index];\n    checkVolumeDripPeriod(index);\n    uint256 amount = volumeDrip.burnDrip(user);\n    address token = volumeDripTokens[index];\n\n    require(IERC20(token).transfer(user, amount), \"Comptroller/volume-drip-transfer-failed\");\n\n    emit VolumeDripClaimed(\n      index,\n      user,\n      token,\n      amount\n    );\n  }\n\n\n  // function removeDrip(\n  //   address measure,\n  //   uint256 index,\n  //   uint256 activeMeasureVolumeDripIndex\n  // )\n  //   internal\n  // {\n  //   require(self.activeMeasureVolumeDripIndices[measure][activeMeasureVolumeDripIndex] == index, \"VolumeDripManager/index-mismatch\");\n  //   self.activeMeasureVolumeDripIndices[measure].remove(activeMeasureVolumeDripIndex);\n  //   delete self.volumeDripTokens[index];\n  //   delete self.volumeDrips[index].periodSeconds;\n  //   delete self.volumeDrips[index].dripAmount;\n  //   delete self.volumeDrips[index];\n  // }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  function updateBalanceDrips(\n    BalanceDripManager.State storage self,\n    address measure,\n    address user,\n    uint256 measureBalance,\n    uint256 measureTotalSupply,\n    uint256 currentTime\n  ) internal {\n    address currentDripToken = self.activeBalanceDrips[measure].addressMap[MappedSinglyLinkedList.SENTINAL];\n    while (currentDripToken != address(0) && currentDripToken != MappedSinglyLinkedList.SENTINAL) {\n      BalanceDrip.State storage dripState = self.balanceDrips[measure][currentDripToken];\n      dripState.drip(\n        user,\n        measureBalance,\n        measureTotalSupply,\n        currentTime\n      );\n      currentDripToken = self.activeBalanceDrips[measure].addressMap[currentDripToken];\n    }\n  }\n\n\n  function afterDepositTo(\n    address to,\n    uint256 amount,\n    uint256 balance,\n    uint256 totalSupply,\n    address controlledToken,\n    address referrer\n  )\n    external\n    override\n  {\n    updateBalanceDrips(\n      balanceDrips[msg.sender],\n      controlledToken,\n      to,\n      balance.sub(amount), // we want the previous balance\n      totalSupply.sub(amount), // previous totalSupply\n      _currentTime()\n    );\n\n    PrizeStrategyVolumeDripManager storage prizeStrategyVolumeDripManager = prizeStrategyVolumeDripManagers[msg.sender];\n\n    depositVolumeDrip(\n      to,\n      amount,\n      prizeStrategyVolumeDripManager.activeMeasureVolumeDripIndices[controlledToken]\n    );\n\n    if (referrer != address(0)) {\n      depositVolumeDrip(\n        referrer,\n        amount,\n        prizeStrategyVolumeDripManager.activeMeasureReferralVolumeDripIndices[controlledToken]\n      );\n    }\n  }\n\n  function afterWithdrawFrom(\n    address from,\n    uint256 amount,\n    uint256 balance,\n    uint256 totalSupply,\n    address controlledToken\n  )\n    external\n    override\n  {\n    balanceDrips[msg.sender].updateDrips(\n      controlledToken,\n      from,\n      balance.add(amount), // we want the original balance\n      totalSupply.add(amount),\n      _currentTime()\n    );\n  }\n\n  /// @notice returns the current time.  Used for testing.\n  /// @return The current time (block.timestamp)\n  function _currentTime() internal virtual view returns (uint256) {\n    return block.number;\n  }\n\n}\n"
    },
    "contracts/utils/UInt256Array.sol": {
      "content": "pragma solidity ^0.6.4;\n\nlibrary UInt256Array {\n  function remove(uint256[] storage self, uint256 index) internal {\n    require(index < self.length, \"UInt256Array/unknown-index\");\n    self[index] = self[self.length-1];\n    delete self[self.length-1];\n    self.pop();\n  }\n}"
    },
    "contracts/comptroller/ComptrollerStorage.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\";\n\nimport \"../drip/BalanceDripManager.sol\";\nimport \"../drip/VolumeDrip.sol\";\n\ncontract ComptrollerStorage is OwnableUpgradeSafe {\n  uint256 internal _reserveRateMantissa;\n\n  uint256 lastVolumeDripId;\n  mapping(uint256 => VolumeDrip.State) volumeDrips;\n  mapping(uint256 => address) volumeDripTokens;\n\n  struct PrizeStrategyVolumeDripManager {\n    mapping(address => uint256[]) activeMeasureVolumeDripIndices;\n    mapping(address => uint256[]) activeMeasureReferralVolumeDripIndices;\n  }\n\n  mapping(address => PrizeStrategyVolumeDripManager) internal prizeStrategyVolumeDripManagers;\n  mapping(address => BalanceDripManager.State) internal balanceDrips;\n}"
    },
    "contracts/drip/BalanceDripManager.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"../utils/MappedSinglyLinkedList.sol\";\nimport \"./BalanceDrip.sol\";\n\nlibrary BalanceDripManager {\n  using SafeMath for uint256;\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n  using BalanceDrip for BalanceDrip.State;\n\n  struct State {\n    mapping(address => MappedSinglyLinkedList.Mapping) activeBalanceDrips;\n    mapping(address => mapping(address => BalanceDrip.State)) balanceDrips;\n  }\n\n  function updateDrips(\n    State storage self,\n    address measure,\n    address user,\n    uint256 measureBalance,\n    uint256 measureTotalSupply,\n    uint256 currentTime\n  ) internal {\n    address currentDripToken = self.activeBalanceDrips[measure].addressMap[MappedSinglyLinkedList.SENTINAL];\n    while (currentDripToken != address(0) && currentDripToken != MappedSinglyLinkedList.SENTINAL) {\n      BalanceDrip.State storage dripState = self.balanceDrips[measure][currentDripToken];\n      dripState.drip(\n        user,\n        measureBalance,\n        measureTotalSupply,\n        currentTime\n      );\n      currentDripToken = self.activeBalanceDrips[measure].addressMap[currentDripToken];\n    }\n  }\n\n  function addDrip(State storage self, address measure, address dripToken, uint256 dripRatePerSecond, uint256 currentTime) internal {\n    require(!self.activeBalanceDrips[measure].contains(dripToken), \"BalanceDripManager/drip-exists\");\n    if (self.activeBalanceDrips[measure].count == 0) {\n      address[] memory single = new address[](1);\n      single[0] = dripToken;\n      self.activeBalanceDrips[measure].initialize(single);\n    } else {\n      self.activeBalanceDrips[measure].addAddress(dripToken);\n    }\n    self.balanceDrips[measure][dripToken].initialize(currentTime);\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\n  }\n\n  function removeDrip(\n    State storage self,\n    address measure,\n    address prevDripToken,\n    address dripToken\n  )\n    internal\n  {\n    delete self.balanceDrips[measure][dripToken];\n    self.activeBalanceDrips[measure].removeAddress(prevDripToken, dripToken);\n  }\n\n  function setDripRate(State storage self, address measure, address dripToken, uint256 dripRatePerSecond) internal {\n    require(self.activeBalanceDrips[measure].contains(dripToken), \"BalanceDripManager/drip-not-exists\");\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\n  }\n\n  function hasDrip(State storage self, address measure, address dripToken) internal view returns (bool) {\n    return self.activeBalanceDrips[measure].contains(dripToken);\n  }\n\n  function getDrip(State storage self, address measure, address dripToken) internal view returns (BalanceDrip.State storage) {\n    return self.balanceDrips[measure][dripToken];\n  }\n\n  function balanceOfDrip(\n    State storage self,\n    address user,\n    address measure,\n    address dripToken\n  )\n    internal view\n    returns (uint256)\n  {\n    BalanceDrip.State storage dripState = self.balanceDrips[measure][dripToken];\n    return dripState.userStates[user].dripBalance;\n  }\n\n  function claimDripTokens(State storage self, address user, address measure, address dripToken) internal returns (uint256) {\n    BalanceDrip.State storage dripState = self.balanceDrips[measure][dripToken];\n    uint256 balance = dripState.userStates[user].dripBalance;\n    dripState.burnDrip(user, balance);\n    require(IERC20(dripToken).transfer(user, balance), \"BalanceDripManager/transfer-failed\");\n    return balance;\n  }\n}\n"
    },
    "contracts/drip/BalanceDrip.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nlibrary BalanceDrip {\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n\n  struct UserState {\n    uint128 lastExchangeRateMantissa;\n    uint128 dripBalance;\n  }\n\n  struct State {\n    uint256 dripRatePerSecond;\n    uint128 exchangeRateMantissa;\n    uint32 timestamp;\n    mapping(address => UserState) userStates;\n  }\n\n  function initialize(State storage self, uint256 timestamp) internal {\n    self.exchangeRateMantissa = FixedPoint.SCALE.toUint128();\n    self.timestamp = timestamp.toUint32();\n  }\n\n  function updateExchangeRate(\n    State storage self,\n    uint256 measureTotalSupply,\n    uint256 timestamp\n  ) internal {\n    // this should only run once per block.\n    if (self.timestamp == uint32(timestamp)) {\n      return;\n    }\n\n    uint256 newSeconds = timestamp.sub(self.timestamp);\n\n    if (newSeconds > 0 && self.dripRatePerSecond > 0) {\n      uint256 newTokens = newSeconds.mul(self.dripRatePerSecond);\n      uint256 indexDeltaMantissa = measureTotalSupply > 0 ? FixedPoint.calculateMantissa(newTokens, measureTotalSupply) : 0;\n      self.exchangeRateMantissa = uint256(self.exchangeRateMantissa).add(indexDeltaMantissa).toUint128();\n    }\n\n    self.timestamp = timestamp.toUint32();\n  }\n\n  function drip(\n    State storage self,\n    address user,\n    uint256 userMeasureBalance,\n    uint256 measureTotalSupply,\n    uint256 timestamp\n  ) internal returns (uint128) {\n    updateExchangeRate(self, measureTotalSupply, timestamp);\n    return dripUser(\n      self,\n      user,\n      userMeasureBalance\n    );\n  }\n\n  function dripUser(\n    State storage self,\n    address user,\n    uint256 userMeasureBalance\n  ) internal returns (uint128) {\n    UserState storage userState = self.userStates[user];\n    uint256 lastExchangeRateMantissa = userState.lastExchangeRateMantissa;\n    if (lastExchangeRateMantissa == 0) {\n      // if the index is not intialized\n      lastExchangeRateMantissa = self.exchangeRateMantissa;\n    }\n\n    uint256 deltaExchangeRateMantissa = uint256(self.exchangeRateMantissa).sub(lastExchangeRateMantissa);\n    uint256 newTokens = FixedPoint.multiplyUintByMantissa(userMeasureBalance, deltaExchangeRateMantissa);\n    uint128 newDripBalance = uint256(userState.dripBalance).add(newTokens).toUint128();\n    self.userStates[user] = UserState({\n      lastExchangeRateMantissa: self.exchangeRateMantissa,\n      dripBalance: newDripBalance\n    });\n\n    return newDripBalance;\n  }\n\n  function burnDrip(\n    State storage self,\n    address user,\n    uint256 amount\n  ) internal {\n    UserState storage userState = self.userStates[user];\n    userState.dripBalance = uint256(userState.dripBalance).sub(amount).toUint128();\n  }\n}\n"
    },
    "contracts/drip/VolumeDrip.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"../utils/ExtendedSafeCast.sol\";\n\nlibrary VolumeDrip {\n  using SafeMath for uint256;\n  using SafeCast for uint256;\n  using ExtendedSafeCast for uint256;\n\n  struct Deposit {\n    uint112 balance;\n    uint16 period;\n    uint128 accrued;\n  }\n\n  struct Period {\n    uint224 totalSupply;\n    uint32 startTime;\n  }\n\n  struct State {\n    mapping(address => Deposit) deposits;\n    mapping(uint32 => Period) periods;\n    uint32 periodSeconds;\n    uint128 dripAmount;\n    uint16 currentPeriodIndex;\n  }\n\n  function initialize(\n    State storage self,\n    uint32 _periodSeconds,\n    uint128 dripAmount,\n    uint32 startTime\n  ) internal {\n    require(_periodSeconds > 0, \"VolumeDrip/period-gt-zero\");\n    self.periods[0] = Period({\n      totalSupply: 0,\n      startTime: startTime\n    });\n    self.periodSeconds = _periodSeconds;\n    self.dripAmount = dripAmount;\n  }\n\n  function isPeriodOver(State storage self, uint256 currentTime) internal view returns (bool) {\n    return currentTime >= currentPeriodEndAt(self);\n  }\n\n  function currentPeriodEndAt(State storage self) internal view returns (uint256) {\n    return uint256(self.periods[self.currentPeriodIndex].startTime).add(self.periodSeconds);\n  }\n\n  function completePeriod(State storage self, uint256 currentTime) internal onlyPeriodOver(self, currentTime) {\n    uint256 lastStartTime = self.periods[self.currentPeriodIndex].startTime;\n    uint256 numberOfPeriods = currentTime.sub(lastStartTime).div(self.periodSeconds);\n    uint256 startTime = lastStartTime.add(numberOfPeriods.mul(self.periodSeconds));\n    self.currentPeriodIndex = uint256(self.currentPeriodIndex).add(1).toUint16();\n    self.periods[self.currentPeriodIndex] = Period({\n      totalSupply: 0,\n      startTime: startTime.toUint32()\n    });\n  }\n\n  function calculateAccrued(\n    State storage self,\n    uint16 depositPeriod,\n    uint128 balance\n  )\n    internal view\n    returns (uint256)\n  {\n    uint256 accrued;\n    if (depositPeriod < self.currentPeriodIndex && self.periods[depositPeriod].totalSupply > 0) {\n      uint256 fractionMantissa = FixedPoint.calculateMantissa(balance, self.periods[depositPeriod].totalSupply);\n      accrued = FixedPoint.multiplyUintByMantissa(self.dripAmount, fractionMantissa);\n    }\n\n\n    return accrued;\n  }\n\n  function mint(State storage self, address user, uint256 amount, uint256 currentTime) internal onlyPeriodNotOver(self, currentTime) {\n    uint256 accrued = calculateAccrued(self, self.deposits[user].period, self.deposits[user].balance);\n    uint16 currentPeriod = self.currentPeriodIndex;\n    if (accrued > 0) {\n      self.deposits[user] = Deposit({\n        balance: amount.toUint112(),\n        period: currentPeriod,\n        accrued: uint256(self.deposits[user].accrued).add(accrued).toUint128()\n      });\n    } else {\n      self.deposits[user] = Deposit({\n        balance: uint256(self.deposits[user].balance).add(amount).toUint112(),\n        period: currentPeriod,\n        accrued: self.deposits[user].accrued\n      });\n    }\n    self.periods[currentPeriod].totalSupply = uint256(self.periods[currentPeriod].totalSupply).add(amount).toUint128();\n  }\n\n  function balanceOf(State storage self, address user) internal view returns (Deposit memory) {\n    uint256 accrued = calculateAccrued(self, self.deposits[user].period, self.deposits[user].balance);\n    uint112 newBalance;\n    if (accrued > 0) {\n      newBalance = 0;\n    } else {\n      newBalance = self.deposits[user].balance;\n    }\n    accrued = accrued.add(self.deposits[user].accrued);\n    return Deposit({\n      balance: newBalance,\n      period: self.currentPeriodIndex,\n      accrued: accrued.toUint128()\n    });\n  }\n\n  function currentPeriod(State storage self) internal view returns (Period memory) {\n    return self.periods[self.currentPeriodIndex];\n  }\n\n  function burnDrip(State storage self, address user) internal returns (uint256 accrued) {\n    Deposit memory deposit = balanceOf(self, user);\n    accrued = deposit.accrued;\n    deposit.accrued = 0;\n    self.deposits[user] = deposit;\n    return accrued;\n  }\n\n  modifier onlyPeriodNotOver(State storage self, uint256 _currentTime) {\n    require(!isPeriodOver(self, _currentTime), \"VolumeDrip/period-over\");\n    _;\n  }\n\n  modifier onlyPeriodOver(State storage self, uint256 _currentTime) {\n    require(isPeriodOver(self, _currentTime), \"VolumeDrip/period-not-over\");\n    _;\n  }\n}\n"
    },
    "contracts/utils/ExtendedSafeCast.sol": {
      "content": "pragma solidity ^0.6.4;\n\nlibrary ExtendedSafeCast {\n\n  /**\n    * @dev Converts an unsigned uint256 into a unsigned uint112.\n    *\n    * Requirements:\n    *\n    * - input must be less than or equal to maxUint112.\n    */\n  function toUint112(uint256 value) internal pure returns (uint112) {\n    require(value < 2**112, \"SafeCast: value doesn't fit in an uint112\");\n    return uint112(value);\n  }\n\n  /**\n    * @dev Converts an unsigned uint256 into a unsigned uint96.\n    *\n    * Requirements:\n    *\n    * - input must be less than or equal to maxUint96.\n    */\n  function toUint96(uint256 value) internal pure returns (uint96) {\n    require(value < 2**96, \"SafeCast: value doesn't fit in an uint96\");\n    return uint96(value);\n  }\n\n}"
    },
    "contracts/counterfactual-action/CounterfactualAction.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../prize-pool/PrizePool.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\n\ncontract CounterfactualAction {\n  function depositTo(address payable user, PrizePool prizePool, address output, bytes calldata data) external {\n    IERC20 token = prizePool.token();\n    uint256 amount = token.balanceOf(address(this));\n    token.approve(address(prizePool), amount);\n    prizePool.depositTo(user, amount, output, data);\n    selfdestruct(user);\n  }\n\n  function cancel(address payable user, PrizePool prizePool) external {\n    IERC20 token = prizePool.token();\n    token.transfer(user, token.balanceOf(address(this)));\n    selfdestruct(user);\n  }\n}\n"
    },
    "contracts/counterfactual-action/CounterfactualActionFactory.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/Create2.sol\";\nimport \"./CounterfactualAction.sol\";\nimport \"../utils/MinimalProxyLibrary.sol\";\n\ncontract CounterfactualActionFactory {\n\n  CounterfactualAction public depositor;\n  PrizePool public prizePool;\n\n  function initialize(PrizePool _prizePool) external {\n    require(address(_prizePool) != address(0), \"CounterfactualActionFactory/prize-pool-not-zero\");\n    depositor = new CounterfactualAction();\n    prizePool = _prizePool;\n  }\n\n  function calculateAddress(address payable user) external view returns (address) {\n    return Create2.computeAddress(salt(user), keccak256(MinimalProxyLibrary.minimalProxy(address(depositor))));\n  }\n\n  function depositTo(address payable user, address token, bytes calldata data) external {\n    CounterfactualAction d = newAction(user);\n    d.depositTo(user, prizePool, token, data);\n  }\n\n  function cancel(address payable user) external {\n    CounterfactualAction d = newAction(user);\n    d.cancel(user, prizePool);\n  }\n\n  function newAction(address payable user) internal returns (CounterfactualAction) {\n    return CounterfactualAction(Create2.deploy(0, salt(user), MinimalProxyLibrary.minimalProxy(address(depositor))));\n  }\n\n  function salt(address payable user) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(user));\n  }\n\n  function code() external view returns (bytes memory) {\n    return MinimalProxyLibrary.minimalProxy(address(depositor));\n  }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/Create2.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(bytes20(_data << 96));\n    }\n}\n"
    },
    "contracts/utils/MinimalProxyLibrary.sol": {
      "content": "pragma solidity 0.6.4;\n\n// solium-disable security/no-inline-assembly\nlibrary MinimalProxyLibrary {\n  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    bytes20 targetBytes = bytes20(_logic);\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let size := 0x37\n      // allocate output byte array - this could also be done without assembly\n      // by using clone = new bytes(size)\n      clone := mload(0x40)\n      // new \"memory end\" including padding\n      mstore(0x40, add(clone, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n      // store length in memory\n      mstore(clone, size)\n      mstore(add(clone, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x34), targetBytes)\n      mstore(add(clone, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n    }\n  }\n}\n"
    },
    "contracts/external/opengsn/TrustedForwarder.sol": {
      "content": "pragma solidity 0.6.4;\npragma experimental ABIEncoderV2;\n\nimport { TrustedForwarder as Forwarder } from \"@opengsn/gsn/contracts/TrustedForwarder.sol\";\n\ncontract TrustedForwarder is Forwarder {}"
    },
    "@opengsn/gsn/contracts/TrustedForwarder.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\npragma experimental ABIEncoderV2;\n\nimport \"./utils/GSNTypes.sol\";\nimport \"./utils/GsnUtils.sol\";\nimport \"./utils/EIP712Sig.sol\";\nimport \"./interfaces/ITrustedForwarder.sol\";\n\ncontract TrustedForwarder is ITrustedForwarder {\n\n    function versionForwarder() external view virtual override returns (string memory){\n        return \"2.0.0-alpha.1+opengsn.forwarder.iforwarder\";\n    }\n\n    EIP712Sig private eip712sig;\n\n    // Nonces of senders, used to prevent replay attacks\n    mapping(address => uint256) private nonces;\n\n    constructor() public {\n        eip712sig = new EIP712Sig(address(this));\n    }\n\n    function getNonce(address from) external override view returns (uint256) {\n        return nonces[from];\n    }\n\n    function verify(GSNTypes.RelayRequest memory req, bytes memory sig) public override view {\n        _verify(req, sig);\n    }\n\n    function verifyAndCall(GSNTypes.RelayRequest memory req, bytes memory sig)\n    public\n    override\n    {\n        _verify(req, sig);\n        _updateNonce(req);\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returnValue) = req.target.call{gas:req.gasData.gasLimit}(abi.encodePacked(req.encodedFunction, req.relayData.senderAddress));\n        // TODO: use assembly to prevent double-wrapping of the revert reason (part of GSN-37)\n        require(success, GsnUtils.getError(returnValue));\n    }\n\n    function _verify(GSNTypes.RelayRequest memory req, bytes memory sig) internal view {\n        _verifyNonce(req);\n        _verifySig(req, sig);\n    }\n\n    function _verifyNonce(GSNTypes.RelayRequest memory req) internal view {\n        require(nonces[req.relayData.senderAddress] == req.relayData.senderNonce, \"nonce mismatch\");\n    }\n\n    function _updateNonce(GSNTypes.RelayRequest memory req) internal {\n        nonces[req.relayData.senderAddress]++;\n    }\n\n    function _verifySig(GSNTypes.RelayRequest memory req, bytes memory sig) internal view {\n        require(eip712sig.verify(req, sig), \"signature mismatch\");\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/utils/GSNTypes.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\nlibrary GSNTypes {\n\n    struct GasData {\n        uint256 gasLimit;\n        uint256 gasPrice;\n        uint256 pctRelayFee;\n        uint256 baseRelayFee;\n    }\n\n    struct RelayData {\n        address senderAddress;\n        uint256 senderNonce;\n        address relayWorker;\n        address paymaster;\n        address forwarder;\n    }\n\n    struct RelayRequest {\n        address target;\n        bytes encodedFunction;\n        GasData gasData;\n        RelayData relayData;\n    }\n\n    struct GasLimits {\n        uint256 acceptRelayedCallGasLimit;\n        uint256 preRelayedCallGasLimit;\n        uint256 postRelayedCallGasLimit;\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/utils/GsnUtils.sol": {
      "content": "/* solhint-disable no-inline-assembly */\n// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\nimport \"../0x/LibBytesV06.sol\";\n\nimport \"./GSNTypes.sol\";\n\nlibrary GsnUtils {\n\n    function getChainID() internal pure returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * extract error string from revert bytes\n     */\n    function getError(bytes memory err) internal pure returns (string memory ret) {\n        if (err.length < 4 + 32) {\n            //not a valid revert with error. return as-is.\n            return string(err);\n        }\n        (ret) = abi.decode(LibBytesV06.slice(err, 4, err.length), (string));\n    }\n\n    /**\n     * extract method sig from encoded function call\n     */\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\n        return LibBytesV06.readBytes4(msgData, 0);\n    }\n\n    /**\n     * extract parameter from encoded-function block.\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\n     * note that the type of the parameter must be static.\n     * the return value should be casted to the right type.\n     */\n    function getParam(bytes memory msgData, uint index) internal pure returns (uint) {\n        return LibBytesV06.readUint256(msgData, 4 + index * 32);\n    }\n\n    function getAddressParam(bytes memory msgData, uint index) internal pure returns (address) {\n        return address(getParam(msgData, index));\n    }\n\n    function getBytes32Param(bytes memory msgData, uint index) internal pure returns (bytes32) {\n        return bytes32(getParam(msgData, index));\n    }\n\n    /**\n     * extract dynamic-sized (string/bytes) parameter.\n     * we assume that there ARE dynamic parameters, hence getBytesParam(0) is the offset to the first\n     * dynamic param\n     * https://solidity.readthedocs.io/en/develop/abi-spec.html#use-of-dynamic-types\n     */\n    function getBytesParam(bytes memory msgData, uint index) internal pure returns (bytes memory ret) {\n        uint ofs = getParam(msgData, index) + 4;\n        uint len = LibBytesV06.readUint256(msgData, ofs);\n        ret = LibBytesV06.slice(msgData, ofs + 32, ofs + 32 + len);\n    }\n\n    function getStringParam(bytes memory msgData, uint index) internal pure returns (string memory) {\n        return string(getBytesParam(msgData, index));\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/utils/EIP712Sig.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/cryptography/ECDSA.sol\";\nimport \"./GSNTypes.sol\";\n\n// https://github.com/ethereum/EIPs/blob/master/assets/eip-712/Example.sol\ncontract EIP712Sig {\n\n    using ECDSA for bytes32;\n\n    struct EIP712Domain {\n        string name;\n        string version;\n//        uint256 chainId;\n        address verifyingContract;\n    }\n\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\n        \"EIP712Domain(string name,string version,address verifyingContract)\"\n    );\n\n    // solhint-disable-next-line max-line-length\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(\"RelayRequest(address target,bytes encodedFunction,GasData gasData,RelayData relayData)GasData(uint256 gasLimit,uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee)RelayData(address senderAddress,uint256 senderNonce,address relayWorker,address paymaster,address forwarder)\");\n\n    // solhint-disable-next-line max-line-length\n    bytes32 public constant CALLDATA_TYPEHASH = keccak256(\"GasData(uint256 gasLimit,uint256 gasPrice,uint256 pctRelayFee,uint256 baseRelayFee)\");\n\n    // solhint-disable-next-line max-line-length\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(\"RelayData(address senderAddress,uint256 senderNonce,address relayWorker,address paymaster,address forwarder)\");\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 public DOMAIN_SEPARATOR; //not constant - based on chainId\n\n    constructor (address verifier) public {\n        DOMAIN_SEPARATOR = hash(EIP712Domain({\n            name : \"GSN Relayed Transaction\",\n            version : \"1\",\n//            chainId : getChainID(),\n            verifyingContract : verifier\n        }));\n    }\n\n    function hash(EIP712Domain memory eip712Domain) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                EIP712DOMAIN_TYPEHASH,\n                keccak256(bytes(eip712Domain.name)),\n                keccak256(bytes(eip712Domain.version)),\n//                eip712Domain.chainId,\n                eip712Domain.verifyingContract\n            ));\n    }\n\n    function hash(GSNTypes.RelayRequest memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                RELAY_REQUEST_TYPEHASH,\n                    req.target,\n                    keccak256(req.encodedFunction),\n                    hash(req.gasData),\n                    hash(req.relayData)\n            ));\n    }\n\n    function hash(GSNTypes.GasData memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                CALLDATA_TYPEHASH,\n                req.gasLimit,\n                req.gasPrice,\n                req.pctRelayFee,\n                req.baseRelayFee\n            ));\n    }\n\n    function hash(GSNTypes.RelayData memory req) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n                RELAYDATA_TYPEHASH,\n                req.senderAddress,\n                req.senderNonce,\n                req.relayWorker,\n                req.paymaster,\n                req.forwarder\n            ));\n    }\n\n    function verify(GSNTypes.RelayRequest memory req, bytes memory signature) public view returns (bool) {\n        bytes32 digest = keccak256(abi.encodePacked(\n                \"\\x19\\x01\", DOMAIN_SEPARATOR,\n                hash(req)\n            ));\n        return digest.recover(signature) == req.relayData.senderAddress;\n    }\n\n    function getChainID() internal pure returns (uint256) {\n//        uint256 id;\n//        assembly {\n//            id := chainid()\n//        }\n        return 7;\n    }\n}\n"
    },
    "@openzeppelin/contracts/cryptography/ECDSA.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "@opengsn/gsn/contracts/interfaces/ITrustedForwarder.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\npragma experimental ABIEncoderV2;\n\nimport \"../utils/GSNTypes.sol\";\n\ninterface ITrustedForwarder {\n\n    // verify the signature matches the request.\n    //  that is, the senderAccount is the signer\n    function verify(GSNTypes.RelayRequest calldata req, bytes calldata sig) external view;\n\n    // validate the signature, and execute the call.\n    function verifyAndCall(GSNTypes.RelayRequest calldata req, bytes calldata sig) external;\n\n    function getNonce(address from) external view returns (uint256);\n\n    function versionForwarder() external view returns (string memory);\n}\n"
    },
    "contracts/test/BalanceDripExposed.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"../drip/BalanceDrip.sol\";\n\ncontract BalanceDripExposed {\n  using BalanceDrip for BalanceDrip.State;\n\n  BalanceDrip.State internal dripState;\n\n  function initialize(\n    uint256 dripRatePerSecond,\n    uint256 currentTime\n  ) external {\n    dripState.initialize(currentTime);\n    dripState.dripRatePerSecond = dripRatePerSecond;\n  }\n\n  function drip(\n    address user,\n    uint256 userMeasureBalance,\n    uint256 measureTotalSupply,\n    uint256 currentTime\n  ) external {\n    dripState.drip(\n      user,\n      userMeasureBalance,\n      measureTotalSupply,\n      currentTime\n    );\n  }\n\n  function burnDrip(\n    address user,\n    uint256 amount\n  ) external {\n    dripState.burnDrip(user, amount);\n  }\n\n  function balanceOf(address user) external view returns (uint256) {\n    return dripState.userStates[user].dripBalance;\n  }\n\n  function exchangeRateMantissa() external view returns (uint256) {\n    return dripState.exchangeRateMantissa;\n  }\n}"
    },
    "contracts/test/BalanceDripManagerExposed.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"../drip/BalanceDripManager.sol\";\n\ncontract BalanceDripManagerExposed {\n  using BalanceDripManager for BalanceDripManager.State;\n\n  BalanceDripManager.State dripManager;\n\n  function updateDrips(\n    address measure,\n    address user,\n    uint256 measureBalance,\n    uint256 measureTotalSupply,\n    uint256 currentTime\n  ) external {\n    dripManager.updateDrips(measure, user, measureBalance, measureTotalSupply, currentTime);\n  }\n\n  function addDrip(address measure, address dripToken, uint256 dripRatePerSecond, uint256 currentTime) external {\n    dripManager.addDrip(measure, dripToken, dripRatePerSecond, currentTime);\n  }\n\n  function hasDrip(address measure, address dripToken) external view returns (bool) {\n    return dripManager.hasDrip(measure, dripToken);\n  }\n\n  function setDripRate(address measure, address dripToken, uint256 dripRatePerSecond) external {\n    dripManager.setDripRate(measure, dripToken, dripRatePerSecond);\n  }\n\n  function balanceOfDrip(address user, address measure, address dripToken) external view returns (uint256) {\n    return dripManager.balanceOfDrip(user, measure, dripToken);\n  }\n\n  function getDrip(\n    address measure,\n    address dripToken\n  )\n    external\n    view\n    returns (\n      uint256 dripRatePerSecond,\n      uint128 exchangeRateMantissa,\n      uint32 timestamp\n    )\n  {\n    BalanceDrip.State storage dripState = dripManager.getDrip(measure, dripToken);\n    dripRatePerSecond = dripState.dripRatePerSecond;\n    exchangeRateMantissa = dripState.exchangeRateMantissa;\n    timestamp = dripState.timestamp;\n  }\n\n  function claimDripTokens(address user, address measure, address dripToken) external {\n    dripManager.claimDripTokens(user, measure, dripToken);\n  }\n}\n"
    },
    "contracts/test/CompoundPrizePoolHarness.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../prize-pool/compound/CompoundPrizePool.sol\";\n\n/* solium-disable security/no-block-members */\ncontract CompoundPrizePoolHarness is CompoundPrizePool {\n\n  uint256 internal time;\n\n  function initializeAll(\n    address _trustedForwarder,\n    PrizeStrategyInterface _prizeStrategy,\n    address[] memory _controlledTokens,\n    uint256 _maxExitFeeMantissa,\n    uint256 _maxTimelockDuration,\n    CTokenInterface _cToken\n  )\n    public\n  {\n    CompoundPrizePool.initialize(\n      _trustedForwarder,\n      _prizeStrategy,\n      _controlledTokens,\n      _maxExitFeeMantissa,\n      _maxTimelockDuration,\n      _cToken\n    );\n  }\n\n  function supply(uint256 mintAmount) external {\n    _supply(mintAmount);\n  }\n\n  function redeem(uint256 redeemAmount) external {\n    _redeem(redeemAmount);\n  }\n\n  function setCurrentTime(uint256 _time) external {\n    time = _time;\n  }\n\n  function setTimelockBalance(uint256 _timelockBalance) external {\n    timelockTotalSupply = _timelockBalance;\n  }\n\n  function _currentTime() internal override view returns (uint256) {\n    if (time == 0) {\n      return block.timestamp;\n    }\n    return time;\n  }\n\n}"
    },
    "contracts/test/ComptrollerHarness.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"../comptroller/Comptroller.sol\";\n\n/* solium-disable security/no-block-members */\ncontract ComptrollerHarness is Comptroller {\n\n  uint256 internal time;\n\n  function setCurrentTime(uint256 _time) external {\n    time = _time;\n  }\n\n  function _currentTime() internal override view returns (uint256) {\n    if (time == 0) {\n      return block.timestamp;\n    }\n    return time;\n  }\n\n}"
    },
    "contracts/test/CTokenMock.sol": {
      "content": "/**\nCopyright 2019 PoolTogether LLC\n\nThis file is part of PoolTogether.\n\nPoolTogether is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation under version 3 of the License.\n\nPoolTogether is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\npragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\nimport \"@pooltogether/fixed-point/contracts/FixedPoint.sol\";\n\nimport \"./ERC20Mintable.sol\";\n\ncontract CTokenMock is ERC20UpgradeSafe {\n  mapping(address => uint256) internal ownerTokenAmounts;\n  ERC20Mintable public underlying;\n\n  uint256 internal __supplyRatePerBlock;\n\n  constructor (\n    ERC20Mintable _token,\n    uint256 _supplyRatePerBlock\n  ) public {\n    require(address(_token) != address(0), \"token is not defined\");\n    underlying = _token;\n    __supplyRatePerBlock = _supplyRatePerBlock;\n  }\n\n  function mint(uint256 amount) external returns (uint) {\n    uint256 newCTokens;\n    if (totalSupply() == 0) {\n      newCTokens = amount;\n    } else {\n      // they need to hold the same assets as tokens.\n      // Need to calculate the current exchange rate\n      uint256 fractionOfCredit = FixedPoint.calculateMantissa(amount, underlying.balanceOf(address(this)));\n      newCTokens = FixedPoint.multiplyUintByMantissa(totalSupply(), fractionOfCredit);\n    }\n    _mint(msg.sender, newCTokens);\n    require(underlying.transferFrom(msg.sender, address(this), amount), \"could not transfer tokens\");\n    return 0;\n  }\n\n  function getCash() external view returns (uint) {\n    return underlying.balanceOf(address(this));\n  }\n\n  function redeemUnderlying(uint256 requestedAmount) external returns (uint) {\n    uint256 cTokens = cTokenValueOf(requestedAmount);\n    _burn(msg.sender, cTokens);\n    require(underlying.transfer(msg.sender, requestedAmount), \"could not transfer tokens\");\n  }\n\n  function accrue() external {\n    uint256 newTokens = (underlying.balanceOf(address(this)) * 120) / 100;\n    underlying.mint(address(this), newTokens);\n  }\n\n  function accrueCustom(uint256 amount) external {\n    underlying.mint(address(this), amount);\n  }\n\n  function burn(uint256 amount) external {\n    underlying.burn(address(this), amount);\n  }\n\n  function cTokenValueOf(uint256 tokens) public view returns (uint256) {\n    return FixedPoint.divideUintByMantissa(tokens, exchangeRateCurrent());\n  }\n\n  function balanceOfUnderlying(address account) public view returns (uint) {\n    return FixedPoint.multiplyUintByMantissa(balanceOf(account), exchangeRateCurrent());\n  }\n\n  function exchangeRateCurrent() public view returns (uint256) {\n    if (totalSupply() == 0) {\n      return FixedPoint.SCALE;\n    } else {\n      return FixedPoint.calculateMantissa(underlying.balanceOf(address(this)), totalSupply());\n    }\n  }\n\n  function supplyRatePerBlock() external view returns (uint) {\n    return __supplyRatePerBlock;\n  }\n\n  function setSupplyRateMantissa(uint256 _supplyRatePerBlock) external {\n    __supplyRatePerBlock = _supplyRatePerBlock;\n  }\n}\n"
    },
    "contracts/test/ERC20Mintable.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20UpgradeSafe {\n\n    constructor () public {\n        __ERC20_init(\"token\", \"TOKE\");\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n\n    function burn(address account, uint256 amount) public returns (bool) {\n        _burn(account, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/test/DoppelgangerWithExec.sol": {
      "content": "pragma solidity 0.6.4;\n\n/* solium-disable security/no-inline-assembly */\ncontract DoppelgangerWithExec {\n    struct MockCall {\n        bool initialized;\n        bool reverts;\n        bytes returnValue;\n    }\n\n    mapping(bytes32 => MockCall) mockConfig;\n\n    fallback() external payable {\n        MockCall storage mockCall = __internal__getMockCall();\n        if (mockCall.reverts == true) {\n            __internal__mockRevert();\n            return;\n        }\n        __internal__mockReturn(mockCall.returnValue);\n    }\n\n    function __waffle__mockReverts(bytes memory data) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: true,\n            returnValue: \"\"\n        });\n    }\n\n    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n        mockConfig[keccak256(data)] = MockCall({\n            initialized: true,\n            reverts: false,\n            returnValue: value\n        });\n    }\n\n    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\n      (bool succeeded, bytes memory returnValue) = target.call(data);\n      require(succeeded, string(returnValue));\n      return returnValue;\n    }\n\n    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\n      require(succeeded, string(returnValue));\n      return returnValue;\n    }\n\n    function __internal__getMockCall() view private returns (MockCall storage mockCall) {\n        mockCall = mockConfig[keccak256(msg.data)];\n        if (mockCall.initialized == true) {\n            // Mock method with specified arguments\n            return mockCall;\n        }\n        mockCall = mockConfig[keccak256(abi.encodePacked(msg.sig))];\n        if (mockCall.initialized == true) {\n            // Mock method with any arguments\n            return mockCall;\n        }\n        revert(\"Mock on the method is not initialized\");\n    }\n\n    function __internal__mockReturn(bytes memory ret) pure private {\n        assembly {\n            return (add(ret, 0x20), mload(ret))\n        }\n    }\n\n    function __internal__mockRevert() pure private {\n        revert(\"Mock revert\");\n    }\n}"
    },
    "contracts/test/ERC1820ImplementerMock.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol\";\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\";\n\nimport \"../Constants.sol\";\n\ncontract ERC1820ImplementerMock is IERC1820Implementer, IERC777Recipient {\n\n  constructor () public {\n    Constants.REGISTRY.setInterfaceImplementer(address(this), Constants.TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n  }\n\n  function canImplementInterfaceForAddress(bytes32, address) external view virtual override returns(bytes32) {\n    return Constants.ACCEPT_MAGIC;\n  }\n\n  function tokensReceived(\n    address operator,\n    address from,\n    address to,\n    uint256 amount,\n    bytes calldata userData,\n    bytes calldata operatorData\n  ) external override {\n  }\n}"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/introspection/IERC1820Implementer.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface for an ERC1820 implementer, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n * Used by contracts that will be registered as implementers in the\n * {IERC1820Registry}.\n */\ninterface IERC1820Implementer {\n    /**\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n     * implements `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "contracts/test/ERC721Mintable.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol\";\n\n/**\n * @dev Extension of {ERC721} for Minting/Burning\n */\ncontract ERC721Mintable is ERC721UpgradeSafe {\n\n    constructor () public {\n        __ERC721_init(\"ERC 721\", \"NFT\");\n    }\n\n    /**\n     * @dev See {ERC721-_mint}.\n     */\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}.\n     */\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/ERC721.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../Initializable.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721UpgradeSafe is Initializable, ContextUpgradeSafe, ERC165UpgradeSafe, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n\n    function __ERC721_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name, symbol);\n    }\n\n    function __ERC721_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID. May return an empty string.\n     *\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\n     * token's own URI (via {_setTokenURI}).\n     *\n     * If there is a base URI but no token URI, the token's ID will be used as\n     * its URI when appending it to the base URI. This pattern for autogenerated\n     * token URIs can lead to large gas savings.\n     *\n     * .Examples\n     * |===\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"token.uri/123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"\"\n     * | \"token.uri/<tokenId>\"\n     * |===\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param operator operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     *\n     * Reverts if the token ID does not exist.\n     *\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\n     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\n     * it and save gas.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ));\n        if (!success) {\n            if (returndata.length > 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n            }\n        } else {\n            bytes4 retval = abi.decode(returndata, (bytes4));\n            return (retval == _ERC721_RECEIVED);\n        }\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - when `from` is zero, `tokenId` will be minted for `to`.\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n\n    uint256[41] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    function totalSupply() external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/introspection/ERC165.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\nimport \"../Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n\n\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n\n    }\n\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableMap.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/utils/Strings.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/test/ExtendedSafeCastExposed.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../utils/ExtendedSafeCast.sol\";\n\ncontract ExtendedSafeCastExposed {\n  function toUint112(uint256 value) external pure returns (uint112) {\n    return ExtendedSafeCast.toUint112(value);\n  }\n  function toUint96(uint256 value) external pure returns (uint96) {\n    return ExtendedSafeCast.toUint96(value);\n  }\n}"
    },
    "contracts/test/MappedSinglyLinkedListExposed.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../utils/MappedSinglyLinkedList.sol\";\n\ncontract MappedSinglyLinkedListExposed {\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\n\n  MappedSinglyLinkedList.Mapping list;\n\n  constructor (address[] memory addresses) public {\n    list.initialize(addresses);\n  }\n\n  function addressArray() external view returns (address[] memory) {\n    return list.addressArray();\n  }\n\n  function addAddress(address newAddress) external {\n    list.addAddress(newAddress);\n  }\n\n  function removeAddress(address prevAddress, address addr) external {\n    list.removeAddress(prevAddress, addr);\n  }\n\n  function contains(address addr) external view returns (bool) {\n    return list.contains(addr);\n  }\n\n  function clearAll() external {\n    list.clearAll();\n  }\n\n}"
    },
    "contracts/test/MockComptroller.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777Recipient.sol\";\n\nimport \"../comptroller/ComptrollerInterface.sol\";\n\ncontract MockComptroller is ComptrollerInterface {\n  uint256 public override reserveRateMantissa;\n\n  function setReserveFeeMantissa(uint256 _reserveRateMantissa) public {\n    reserveRateMantissa = _reserveRateMantissa;\n  }\n\n  function afterDepositTo(\n    address to,\n    uint256 amount,\n    uint256 balance,\n    uint256 totalSupply,\n    address controlledToken,\n    address referrer\n  )\n    external\n    override\n  {\n\n  }\n\n  function afterWithdrawFrom(\n    address to,\n    uint256 amount,\n    uint256 balance,\n    uint256 totalSupply,\n    address controlledToken\n  )\n    external\n    override\n  {\n\n  }\n}"
    },
    "contracts/test/PrizeStrategyHarness.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../prize-strategy/PrizeStrategy.sol\";\n\n/* solium-disable security/no-block-members */\ncontract PrizeStrategyHarness is PrizeStrategy {\n\n  uint256 internal time;\n  function setCurrentTime(uint256 _time) external {\n    time = _time;\n  }\n\n  function _currentTime() internal override view returns (uint256) {\n    if (time == 0) {\n      return block.timestamp;\n    }\n    return time;\n  }\n\n  function setRngRequest(uint32 requestId, uint32 lockBlock) external {\n    rngRequest.id = requestId;\n    rngRequest.lockBlock = lockBlock;\n  }\n\n  function awardReserveFeesTest() external {\n    uint256 balance = prizePool.awardBalance();\n    uint256 reserveFee = _calculateReserveFee(balance);\n    if (reserveFee > 0) {\n      _awardSponsorship(address(comptroller), reserveFee);\n    }\n  }\n\n}"
    },
    "contracts/test/RNGServiceMock.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"@pooltogether/pooltogether-rng-contracts/contracts/RNGInterface.sol\";\n\ncontract RNGServiceMock is RNGInterface {\n\n  uint256 internal random;\n  address internal feeToken;\n  uint256 internal requestFee;\n\n  function getLastRequestId() external override view returns (uint32 requestId) {\n    return 1;\n  }\n\n  function setRequestFee(address _feeToken, uint256 _requestFee) external {\n    feeToken = _feeToken;\n    requestFee = _requestFee;\n  }\n\n  function getRequestFee() external override view returns (address _feeToken, uint256 _requestFee) {\n    return (feeToken, requestFee);\n  }\n\n  function setRandomNumber(uint256 _random) external {\n    random = _random;\n  }\n\n  function requestRandomNumber() external override returns (uint32, uint32) {\n    return (1, 1);\n  }\n\n  function isRequestComplete(uint32) external override view returns (bool) {\n    return true;\n  }\n\n  function randomNumber(uint32) external override returns (uint256) {\n    return random;\n  }\n}"
    },
    "contracts/test/Timestamp.sol": {
      "content": "pragma solidity 0.6.4;\n\n/* solium-disable security/no-block-members */\ncontract Timestamp {\n  function blockTime() public view returns (uint256) {\n    return block.timestamp;\n  }\n}"
    },
    "contracts/test/UInt256ArrayExposed.sol": {
      "content": "pragma solidity 0.6.4;\n\nimport \"../utils/UInt256Array.sol\";\n\ncontract UInt256ArrayExposed {\n  using UInt256Array for uint256[];\n\n  uint256[] internal array;\n\n  constructor (uint256[] memory _array) public {\n    array = new uint256[](_array.length);\n    for (uint256 i = 0; i < _array.length; i++) {\n      array[i] = _array[i];\n    }\n  }\n\n  function remove(uint256 index) external {\n    array.remove(index);\n  }\n\n  function toArray() external view returns (uint256[] memory) {\n    return array;\n  }\n}"
    },
    "contracts/test/VolumeDripExposed.sol": {
      "content": "pragma solidity ^0.6.4;\n\nimport \"../drip/VolumeDrip.sol\";\n\ncontract VolumeDripExposed {\n  using VolumeDrip for VolumeDrip.State;\n\n  event DripTokensBurned(address user, uint256 amount);\n\n  VolumeDrip.State state;\n\n  function initialize(uint32 periodSeconds, uint128 dripAmount, uint32 startTime) external {\n    state.initialize(periodSeconds, dripAmount, startTime);\n  }\n\n  function isPeriodOver(uint256 currentTime) external view returns (bool) {\n    return state.isPeriodOver(currentTime);\n  }\n\n  function completePeriod(uint256 currentTime) external {\n    state.completePeriod(currentTime);\n  }\n\n  function mint(address user, uint256 amount, uint256 currentTime) external {\n    state.mint(user, amount, currentTime);\n  }\n\n  function calculateAccrued(\n    uint16 depositPeriod,\n    uint128 balance\n  ) external view returns (uint256) {\n    return state.calculateAccrued(depositPeriod, balance);\n  }\n\n  function burnDrip(address user) external {\n    uint256 amount = state.burnDrip(user);\n    emit DripTokensBurned(user, amount);\n  }\n\n  function balanceOf(\n    address user\n  )\n    external view\n    returns (uint256 accrued)\n  {\n    accrued = state.balanceOf(user).accrued;\n  }\n\n  function getDrip()\n    external\n    view\n    returns (\n      uint32 periodSeconds,\n      uint128 dripAmount\n    )\n  {\n    periodSeconds = state.periodSeconds;\n    dripAmount = state.dripAmount;\n  }\n\n  function getPeriod(uint16 index)\n    external\n    view\n    returns (\n      uint224 totalSupply,\n      uint32 startTime\n    )\n  {\n    totalSupply = state.periods[index].totalSupply;\n    startTime = state.periods[index].startTime;\n  }\n\n  function getDeposit(address user)\n    external\n    view\n    returns (\n      uint112 balance,\n      uint16 period,\n      uint128 accrued\n    )\n  {\n    balance = state.deposits[user].balance;\n    period = state.deposits[user].period;\n    accrued = state.deposits[user].accrued;\n  }\n\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    },
    "evmVersion": "istanbul"
  }
}