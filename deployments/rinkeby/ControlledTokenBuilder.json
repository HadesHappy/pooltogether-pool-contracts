{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ControlledTokenProxyFactory",
          "name": "_controlledTokenProxyFactory",
          "type": "address"
        },
        {
          "internalType": "contract TicketProxyFactory",
          "name": "_ticketProxyFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CreatedControlledToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CreatedTicket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controlledTokenProxyFactory",
      "outputs": [
        {
          "internalType": "contract ControlledTokenProxyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "contract TokenControllerInterface",
              "name": "controller",
              "type": "address"
            }
          ],
          "internalType": "struct ControlledTokenBuilder.ControlledTokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "createControlledToken",
      "outputs": [
        {
          "internalType": "contract ControlledToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "contract TokenControllerInterface",
              "name": "controller",
              "type": "address"
            }
          ],
          "internalType": "struct ControlledTokenBuilder.ControlledTokenConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "createTicket",
      "outputs": [
        {
          "internalType": "contract Ticket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketProxyFactory",
      "outputs": [
        {
          "internalType": "contract TicketProxyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0x239fC7c69Ba8079ebEC07156F13a6d78d234Fa6B",
    "transactionIndex": 35,
    "gasUsed": "388428",
    "logsBloom": "0x
    "blockHash": "0xba3c255b0d72da40ccca1b04b1c41df13377c44d95580d00a98b4f7fa7363bd6",
    "transactionHash": "0x9a25cfc43d8206fef8c6dd0d3bc2e4f3914cfdeeb57c815481afbc138a54310e",
    "logs": [],
    "blockNumber": 7687012,
    "cumulativeGasUsed": "4647004",
    "status": 1,
    "byzantium": true
  },
  "address": "0x239fC7c69Ba8079ebEC07156F13a6d78d234Fa6B",
  "args": [
    "0xF8D06e34Df36fB32Bb69D575AF4d17f83FE4B884",
    "0xccad64BB6Bb69c7D31458D8e10e246bA3cC8FED4"
  ],
  "solcInputHash": "0x65c54a092a85fed1297338a9ab810eb58fd00e8c51d917bd9b84b44e33eb5480",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ControlledTokenProxyFactory\",\"name\":\"_controlledTokenProxyFactory\",\"type\":\"address\"},{\"internalType\":\"contract TicketProxyFactory\",\"name\":\"_ticketProxyFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CreatedControlledToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CreatedTicket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controlledTokenProxyFactory\",\"outputs\":[{\"internalType\":\"contract ControlledTokenProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract TokenControllerInterface\",\"name\":\"controller\",\"type\":\"address\"}],\"internalType\":\"struct ControlledTokenBuilder.ControlledTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"createControlledToken\",\"outputs\":[{\"internalType\":\"contract ControlledToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"contract TokenControllerInterface\",\"name\":\"controller\",\"type\":\"address\"}],\"internalType\":\"struct ControlledTokenBuilder.ControlledTokenConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"createTicket\",\"outputs\":[{\"internalType\":\"contract Ticket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketProxyFactory\",\"outputs\":[{\"internalType\":\"contract TicketProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/builders/ControlledTokenBuilder.sol\":\"ControlledTokenBuilder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ecc18d06bcc5aa48c40a98333540248b6c1c18ecb6262329c06d3f0cbb45ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x9e71cf53c2ee5c9e4f183e168028fc208560493aaf48668bca0981bb2c8359c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol\":{\"content\":\"/**\\nCopyright 2019 PoolTogether LLC\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @author Brendan Asselstine\\n * @notice A library that uses entropy to select a random number within a bound.  Compensates for modulo bias.\\n * @dev Thanks to https://medium.com/hownetworks/dont-waste-cycles-with-modulo-bias-35b6fdafcf94\\n */\\nlibrary UniformRandomNumber {\\n  /// @notice Select a random number without modulo bias using a random seed and upper bound\\n  /// @param _entropy The seed for randomness\\n  /// @param _upperBound The upper bound of the desired number\\n  /// @return A random number less than the _upperBound\\n  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\\n    require(_upperBound > 0, \\\"UniformRand/min-bound\\\");\\n    uint256 min = -_upperBound % _upperBound;\\n    uint256 random = _entropy;\\n    while (true) {\\n      if (random >= min) {\\n        break;\\n      }\\n      random = uint256(keccak256(abi.encodePacked(random)));\\n    }\\n    return random % _upperBound;\\n  }\\n}\",\"keccak256\":\"0x0d86eb3349d8a9e226ff6f3328a6a79bbf872859a4afbe489051fbf3b8550df4\"},\"contracts/builders/ControlledTokenBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../token/ControlledTokenProxyFactory.sol\\\";\\nimport \\\"../token/TicketProxyFactory.sol\\\";\\n\\n/* solium-disable security/no-block-members */\\ncontract ControlledTokenBuilder {\\n\\n  event CreatedControlledToken(address indexed token);\\n  event CreatedTicket(address indexed token);\\n\\n  ControlledTokenProxyFactory public controlledTokenProxyFactory;\\n  TicketProxyFactory public ticketProxyFactory;\\n\\n  struct ControlledTokenConfig {\\n    string name;\\n    string symbol;\\n    uint8 decimals;\\n    TokenControllerInterface controller;\\n  }\\n\\n  constructor (\\n    ControlledTokenProxyFactory _controlledTokenProxyFactory,\\n    TicketProxyFactory _ticketProxyFactory\\n  ) public {\\n    require(address(_controlledTokenProxyFactory) != address(0), \\\"ControlledTokenBuilder/controlledTokenProxyFactory-not-zero\\\");\\n    require(address(_ticketProxyFactory) != address(0), \\\"ControlledTokenBuilder/ticketProxyFactory-not-zero\\\");\\n    controlledTokenProxyFactory = _controlledTokenProxyFactory;\\n    ticketProxyFactory = _ticketProxyFactory;\\n  }\\n\\n  function createControlledToken(\\n    ControlledTokenConfig calldata config\\n  ) external returns (ControlledToken) {\\n    ControlledToken token = controlledTokenProxyFactory.create();\\n\\n    token.initialize(\\n      config.name,\\n      config.symbol,\\n      config.decimals,\\n      config.controller\\n    );\\n\\n    emit CreatedControlledToken(address(token));\\n\\n    return token;\\n  }\\n\\n  function createTicket(\\n    ControlledTokenConfig calldata config\\n  ) external returns (Ticket) {\\n    Ticket token = ticketProxyFactory.create();\\n\\n    token.initialize(\\n      config.name,\\n      config.symbol,\\n      config.decimals,\\n      config.controller\\n    );\\n\\n    emit CreatedTicket(address(token));\\n\\n    return token;\\n  }\\n}\\n\",\"keccak256\":\"0x3372e413e68dd1800349898a8dfb017447d171610a392331753e5d3d18016789\",\"license\":\"GPL-3.0\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x571028e27d301916b4d956f9f6442a57203a3a43bda705fa8db7e23010d4c136\"},\"contracts/token/ControlledToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\nimport \\\"./ControlledTokenInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ncontract ControlledToken is ERC20Upgradeable, ControlledTokenInterface {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  TokenControllerInterface public override controller;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param _decimals The number of decimals for the Token\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    TokenControllerInterface _controller\\n  )\\n    public\\n    virtual\\n    initializer\\n  {\\n    __ERC20_init(_name, _symbol);\\n    controller = _controller;\\n    _setupDecimals(_decimals);\\n  }\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external virtual override onlyController {\\n    _mint(_user, _amount);\\n  }\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external virtual override onlyController {\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external virtual override onlyController {\\n    if (_operator != _user) {\\n      uint256 decreasedAllowance = allowance(_user, _operator).sub(_amount, \\\"ControlledToken/exceeds-allowance\\\");\\n      _approve(_user, _operator, decreasedAllowance);\\n    }\\n    _burn(_user, _amount);\\n  }\\n\\n  /// @dev Function modifier to ensure that the caller is the controller contract\\n  modifier onlyController {\\n    require(_msgSender() == address(controller), \\\"ControlledToken/only-controller\\\");\\n    _;\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    controller.beforeTokenTransfer(from, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x4faa0f808684c8214fab13e9dc6feb606a69c7ee1960972f7885064205601a92\",\"license\":\"GPL-3.0\"},\"contracts/token/ControlledTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface ControlledTokenInterface is IERC20Upgradeable {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (TokenControllerInterface);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xf7f772f87d9399ac388c006f7f96c26ff179774dae02d991b0e3d50b7c0ade73\",\"license\":\"GPL-3.0\"},\"contracts/token/ControlledTokenProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./ControlledToken.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract ControlledTokenProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  ControlledToken public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () public {\\n    instance = new ControlledToken();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create() external returns (ControlledToken) {\\n    return ControlledToken(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\",\"keccak256\":\"0xeeeed0a89affc9b6110a69a05ec921ceb4c4f2417d4f06031d4802e7cd4e755a\",\"license\":\"GPL-3.0\"},\"contracts/token/Ticket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\\\";\\nimport \\\"@pooltogether/uniform-random-number/contracts/UniformRandomNumber.sol\\\";\\n\\nimport \\\"./ControlledToken.sol\\\";\\nimport \\\"./TicketInterface.sol\\\";\\n\\ncontract Ticket is ControlledToken, TicketInterface {\\n  using SortitionSumTreeFactory for SortitionSumTreeFactory.SortitionSumTrees;\\n\\n  bytes32 constant private TREE_KEY = keccak256(\\\"PoolTogether/Ticket\\\");\\n  uint256 constant private MAX_TREE_LEAVES = 5;\\n\\n  // Ticket-weighted odds\\n  SortitionSumTreeFactory.SortitionSumTrees internal sortitionSumTrees;\\n\\n  /// @notice Initializes the Controlled Token with Token Details and the Controller\\n  /// @param _name The name of the Token\\n  /// @param _symbol The symbol for the Token\\n  /// @param _decimals The number of decimals for the Token\\n  /// @param _controller Address of the Controller contract for minting & burning\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    TokenControllerInterface _controller\\n  )\\n    public\\n    virtual\\n    override\\n    initializer\\n  {\\n    super.initialize(_name, _symbol, _decimals, _controller);\\n    sortitionSumTrees.createTree(TREE_KEY, MAX_TREE_LEAVES);\\n  }\\n\\n  /// @notice Returns the user's chance of winning.\\n  function chanceOf(address user) external view returns (uint256) {\\n    return sortitionSumTrees.stakeOf(TREE_KEY, bytes32(uint256(user)));\\n  }\\n\\n  /// @notice Selects a user using a random number.  The random number will be uniformly bounded to the ticket totalSupply.\\n  /// @param randomNumber The random number to use to select a user.\\n  /// @return The winner\\n  function draw(uint256 randomNumber) external view override returns (address) {\\n    uint256 bound = totalSupply();\\n    address selected;\\n    if (bound == 0) {\\n      selected = address(0);\\n    } else {\\n      uint256 token = UniformRandomNumber.uniform(randomNumber, bound);\\n      selected = address(uint256(sortitionSumTrees.draw(TREE_KEY, token)));\\n    }\\n    return selected;\\n  }\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// May be overridden to provide more granular control over operator-burning\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n    super._beforeTokenTransfer(from, to, amount);\\n\\n    // optimize: ignore transfers to self\\n    if (from == to) {\\n      return;\\n    }\\n\\n    if (from != address(0)) {\\n      uint256 fromBalance = balanceOf(from).sub(amount);\\n      sortitionSumTrees.set(TREE_KEY, fromBalance, bytes32(uint256(from)));\\n    }\\n\\n    if (to != address(0)) {\\n      uint256 toBalance = balanceOf(to).add(amount);\\n      sortitionSumTrees.set(TREE_KEY, toBalance, bytes32(uint256(to)));\\n    }\\n  }\\n\\n}\",\"keccak256\":\"0x0446e21bbf60b9ce4aceaa88275f5045ac4b5a9f3796204545a5d389b877d213\",\"license\":\"GPL-3.0\"},\"contracts/token/TicketInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Interface that allows a user to draw an address using an index\\ninterface TicketInterface {\\n  /// @notice Selects a user using a random number.  The random number will be uniformly bounded to the ticket totalSupply.\\n  /// @param randomNumber The random number to use to select a user.\\n  /// @return The winner\\n  function draw(uint256 randomNumber) external view returns (address);\\n}\",\"keccak256\":\"0x5201a9a22748781592abd2003801289224d4899292195b7de937cd5748be87dd\",\"license\":\"GPL-3.0\"},\"contracts/token/TicketProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport \\\"./Ticket.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract TicketProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  Ticket public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () public {\\n    instance = new Ticket();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create() external returns (Ticket) {\\n    return Ticket(deployMinimal(address(instance), \\\"\\\"));\\n  }\\n}\\n\",\"keccak256\":\"0x1de3aaf30e2dd6e7b9489deddf06bce72eb322e466f693150b55f430bcbe26d3\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Controlled ERC20 Token Interface\\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\\ninterface TokenControllerInterface {\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5dd2346b0d9616b15bfad6bd8dab3a34ad41aa77a5d0c5f4c1b54c0d5009b77f\",\"license\":\"GPL-3.0\"},\"sortition-sum-tree-factory/contracts/SortitionSumTreeFactory.sol\":{\"content\":\"/**\\n *  @reviewers: [@clesaege, @unknownunknown1, @ferittuncer]\\n *  @auditors: []\\n *  @bounties: [<14 days 10 ETH max payout>]\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n *  @title SortitionSumTreeFactory\\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\\n *  @dev A factory of trees that keep track of staked values for sortition.\\n */\\nlibrary SortitionSumTreeFactory {\\n    /* Structs */\\n\\n    struct SortitionSumTree {\\n        uint K; // The maximum number of childs per node.\\n        // We use this to keep track of vacant positions in the tree after removing a leaf. This is for keeping the tree as balanced as possible without spending gas on moving nodes around.\\n        uint[] stack;\\n        uint[] nodes;\\n        // Two-way mapping of IDs to node indexes. Note that node index 0 is reserved for the root node, and means the ID does not have a node.\\n        mapping(bytes32 => uint) IDsToNodeIndexes;\\n        mapping(uint => bytes32) nodeIndexesToIDs;\\n    }\\n\\n    /* Storage */\\n\\n    struct SortitionSumTrees {\\n        mapping(bytes32 => SortitionSumTree) sortitionSumTrees;\\n    }\\n\\n    /* internal */\\n\\n    /**\\n     *  @dev Create a sortition sum tree at the specified key.\\n     *  @param _key The key of the new tree.\\n     *  @param _K The number of children each node in the tree should have.\\n     */\\n    function createTree(SortitionSumTrees storage self, bytes32 _key, uint _K) internal {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        require(tree.K == 0, \\\"Tree already exists.\\\");\\n        require(_K > 1, \\\"K must be greater than one.\\\");\\n        tree.K = _K;\\n        tree.stack = new uint[](0);\\n        tree.nodes = new uint[](0);\\n        tree.nodes.push(0);\\n    }\\n\\n    /**\\n     *  @dev Set a value of a tree.\\n     *  @param _key The key of the tree.\\n     *  @param _value The new value.\\n     *  @param _ID The ID of the value.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function set(SortitionSumTrees storage self, bytes32 _key, uint _value, bytes32 _ID) internal {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) { // No existing node.\\n            if (_value != 0) { // Non zero value.\\n                // Append.\\n                // Add node.\\n                if (tree.stack.length == 0) { // No vacant spots.\\n                    // Get the index and append the value.\\n                    treeIndex = tree.nodes.length;\\n                    tree.nodes.push(_value);\\n\\n                    // Potentially append a new node and make the parent a sum node.\\n                    if (treeIndex != 1 && (treeIndex - 1) % tree.K == 0) { // Is first child.\\n                        uint parentIndex = treeIndex / tree.K;\\n                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];\\n                        uint newIndex = treeIndex + 1;\\n                        tree.nodes.push(tree.nodes[parentIndex]);\\n                        delete tree.nodeIndexesToIDs[parentIndex];\\n                        tree.IDsToNodeIndexes[parentID] = newIndex;\\n                        tree.nodeIndexesToIDs[newIndex] = parentID;\\n                    }\\n                } else { // Some vacant spot.\\n                    // Pop the stack and append the value.\\n                    treeIndex = tree.stack[tree.stack.length - 1];\\n                    tree.stack.pop();\\n                    tree.nodes[treeIndex] = _value;\\n                }\\n\\n                // Add label.\\n                tree.IDsToNodeIndexes[_ID] = treeIndex;\\n                tree.nodeIndexesToIDs[treeIndex] = _ID;\\n\\n                updateParents(self, _key, treeIndex, true, _value);\\n            }\\n        } else { // Existing node.\\n            if (_value == 0) { // Zero value.\\n                // Remove.\\n                // Remember value and set to 0.\\n                uint value = tree.nodes[treeIndex];\\n                tree.nodes[treeIndex] = 0;\\n\\n                // Push to stack.\\n                tree.stack.push(treeIndex);\\n\\n                // Clear label.\\n                delete tree.IDsToNodeIndexes[_ID];\\n                delete tree.nodeIndexesToIDs[treeIndex];\\n\\n                updateParents(self, _key, treeIndex, false, value);\\n            } else if (_value != tree.nodes[treeIndex]) { // New, non zero value.\\n                // Set.\\n                bool plusOrMinus = tree.nodes[treeIndex] <= _value;\\n                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;\\n                tree.nodes[treeIndex] = _value;\\n\\n                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);\\n            }\\n        }\\n    }\\n\\n    /* internal Views */\\n\\n    /**\\n     *  @dev Query the leaves of a tree. Note that if `startIndex == 0`, the tree is empty and the root node will be returned.\\n     *  @param _key The key of the tree to get the leaves from.\\n     *  @param _cursor The pagination cursor.\\n     *  @param _count The number of items to return.\\n     *  @return startIndex The index at which leaves start\\n     *  @return values The values of the returned leaves\\n     *  @return hasMore Whether there are more for pagination.\\n     *  `O(n)` where\\n     *  `n` is the maximum number of nodes ever appended.\\n     */\\n    function queryLeafs(\\n        SortitionSumTrees storage self,\\n        bytes32 _key,\\n        uint _cursor,\\n        uint _count\\n    ) internal view returns(uint startIndex, uint[] memory values, bool hasMore) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        // Find the start index.\\n        for (uint i = 0; i < tree.nodes.length; i++) {\\n            if ((tree.K * i) + 1 >= tree.nodes.length) {\\n                startIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Get the values.\\n        uint loopStartIndex = startIndex + _cursor;\\n        values = new uint[](loopStartIndex + _count > tree.nodes.length ? tree.nodes.length - loopStartIndex : _count);\\n        uint valuesIndex = 0;\\n        for (uint j = loopStartIndex; j < tree.nodes.length; j++) {\\n            if (valuesIndex < _count) {\\n                values[valuesIndex] = tree.nodes[j];\\n                valuesIndex++;\\n            } else {\\n                hasMore = true;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @dev Draw an ID from a tree using a number. Note that this function reverts if the sum of all values in the tree is 0.\\n     *  @param _key The key of the tree.\\n     *  @param _drawnNumber The drawn number.\\n     *  @return ID The drawn ID.\\n     *  `O(k * log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function draw(SortitionSumTrees storage self, bytes32 _key, uint _drawnNumber) internal view returns(bytes32 ID) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = 0;\\n        uint currentDrawnNumber = _drawnNumber % tree.nodes[0];\\n\\n        while ((tree.K * treeIndex) + 1 < tree.nodes.length)  // While it still has children.\\n            for (uint i = 1; i <= tree.K; i++) { // Loop over children.\\n                uint nodeIndex = (tree.K * treeIndex) + i;\\n                uint nodeValue = tree.nodes[nodeIndex];\\n\\n                if (currentDrawnNumber >= nodeValue) currentDrawnNumber -= nodeValue; // Go to the next child.\\n                else { // Pick this child.\\n                    treeIndex = nodeIndex;\\n                    break;\\n                }\\n            }\\n        \\n        ID = tree.nodeIndexesToIDs[treeIndex];\\n    }\\n\\n    /** @dev Gets a specified ID's associated value.\\n     *  @param _key The key of the tree.\\n     *  @param _ID The ID of the value.\\n     *  @return value The associated value.\\n     */\\n    function stakeOf(SortitionSumTrees storage self, bytes32 _key, bytes32 _ID) internal view returns(uint value) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        uint treeIndex = tree.IDsToNodeIndexes[_ID];\\n\\n        if (treeIndex == 0) value = 0;\\n        else value = tree.nodes[treeIndex];\\n    }\\n\\n    function total(SortitionSumTrees storage self, bytes32 _key) internal view returns (uint) {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n        if (tree.nodes.length == 0) {\\n            return 0;\\n        } else {\\n            return tree.nodes[0];\\n        }\\n    }\\n\\n    /* Private */\\n\\n    /**\\n     *  @dev Update all the parents of a node.\\n     *  @param _key The key of the tree to update.\\n     *  @param _treeIndex The index of the node to start from.\\n     *  @param _plusOrMinus Wether to add (true) or substract (false).\\n     *  @param _value The value to add or substract.\\n     *  `O(log_k(n))` where\\n     *  `k` is the maximum number of childs per node in the tree,\\n     *   and `n` is the maximum number of nodes ever appended.\\n     */\\n    function updateParents(SortitionSumTrees storage self, bytes32 _key, uint _treeIndex, bool _plusOrMinus, uint _value) private {\\n        SortitionSumTree storage tree = self.sortitionSumTrees[_key];\\n\\n        uint parentIndex = _treeIndex;\\n        while (parentIndex != 0) {\\n            parentIndex = (parentIndex - 1) / tree.K;\\n            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa20ece2e1ddeaa6432549a7c38cd02594000b93a54b92399b89bae0dd76dbc7e\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106f03803806106f083398101604081905261002f916100b5565b6001600160a01b03821661005e5760405162461bcd60e51b815260040161005590610140565b60405180910390fd5b6001600160a01b0381166100845760405162461bcd60e51b8152600401610055906100ee565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556101b5565b600080604083850312156100c7578182fd5b82516100d28161019d565b60208401519092506100e38161019d565b809150509250929050565b60208082526032908201527f436f6e74726f6c6c6564546f6b656e4275696c6465722f7469636b657450726f6040820152717879466163746f72792d6e6f742d7a65726f60701b606082015260800190565b6020808252603b908201527f436f6e74726f6c6c6564546f6b656e4275696c6465722f636f6e74726f6c6c6560408201527f64546f6b656e50726f7879466163746f72792d6e6f742d7a65726f0000000000606082015260800190565b6001600160a01b03811681146101b257600080fd5b50565b61052c806101c46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636a81d8bd146100515780638c0cd38d1461006f5780638e22585d14610082578063aa3b296c14610095575b600080fd5b61005961009d565b6040516100669190610430565b60405180910390f35b61005961007d3660046103ad565b6100ac565b6100596100903660046103ad565b6101ff565b61005961035f565b6000546001600160a01b031681565b6000805460408051633bf206a360e21b8152905183926001600160a01b03169163efc81a8c91600480830192602092919082900301818787803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012a919061036e565b90506001600160a01b03811663de7ea79d6101458580610492565b6101526020880188610492565b61016260608a0160408b016103e5565b61017260808b0160608c01610391565b6040518763ffffffff1660e01b815260040161019396959493929190610444565b600060405180830381600087803b1580156101ad57600080fd5b505af11580156101c1573d6000803e3d6000fd5b50506040516001600160a01b03841692507fe3d5734f17a493c850907f8a8366a543676afd8eeb9b7cd16e22c998297d8ebd9150600090a292915050565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663efc81a8c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561025257600080fd5b505af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a919061036e565b90506001600160a01b03811663de7ea79d6102a58580610492565b6102b26020880188610492565b6102c260608a0160408b016103e5565b6102d260808b0160608c01610391565b6040518763ffffffff1660e01b81526004016102f396959493929190610444565b600060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b50506040516001600160a01b03841692507ff771026f1a6d488c23bb75726c18bcc96f290b64209576da54a46c80fd335cab9150600090a292915050565b6001546001600160a01b031681565b60006020828403121561037f578081fd5b815161038a816104de565b9392505050565b6000602082840312156103a2578081fd5b813561038a816104de565b6000602082840312156103be578081fd5b813567ffffffffffffffff8111156103d4578182fd5b82016080818503121561038a578182fd5b6000602082840312156103f6578081fd5b813560ff8116811461038a578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60006080825261045860808301888a610406565b828103602084015261046b818789610406565b60ff95909516604084015250506001600160a01b0391909116606090910152949350505050565b6000808335601e198436030181126104a8578283fd5b83018035915067ffffffffffffffff8211156104c2578283fd5b6020019150368190038213156104d757600080fd5b9250929050565b6001600160a01b03811681146104f357600080fd5b5056fea26469706673582212208b4fee3a22ca404a4af8e35a07710406893fe5f6684abd0b608065b3501e9e7664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636a81d8bd146100515780638c0cd38d1461006f5780638e22585d14610082578063aa3b296c14610095575b600080fd5b61005961009d565b6040516100669190610430565b60405180910390f35b61005961007d3660046103ad565b6100ac565b6100596100903660046103ad565b6101ff565b61005961035f565b6000546001600160a01b031681565b6000805460408051633bf206a360e21b8152905183926001600160a01b03169163efc81a8c91600480830192602092919082900301818787803b1580156100f257600080fd5b505af1158015610106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012a919061036e565b90506001600160a01b03811663de7ea79d6101458580610492565b6101526020880188610492565b61016260608a0160408b016103e5565b61017260808b0160608c01610391565b6040518763ffffffff1660e01b815260040161019396959493929190610444565b600060405180830381600087803b1580156101ad57600080fd5b505af11580156101c1573d6000803e3d6000fd5b50506040516001600160a01b03841692507fe3d5734f17a493c850907f8a8366a543676afd8eeb9b7cd16e22c998297d8ebd9150600090a292915050565b600080600160009054906101000a90046001600160a01b03166001600160a01b031663efc81a8c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561025257600080fd5b505af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a919061036e565b90506001600160a01b03811663de7ea79d6102a58580610492565b6102b26020880188610492565b6102c260608a0160408b016103e5565b6102d260808b0160608c01610391565b6040518763ffffffff1660e01b81526004016102f396959493929190610444565b600060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b50506040516001600160a01b03841692507ff771026f1a6d488c23bb75726c18bcc96f290b64209576da54a46c80fd335cab9150600090a292915050565b6001546001600160a01b031681565b60006020828403121561037f578081fd5b815161038a816104de565b9392505050565b6000602082840312156103a2578081fd5b813561038a816104de565b6000602082840312156103be578081fd5b813567ffffffffffffffff8111156103d4578182fd5b82016080818503121561038a578182fd5b6000602082840312156103f6578081fd5b813560ff8116811461038a578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60006080825261045860808301888a610406565b828103602084015261046b818789610406565b60ff95909516604084015250506001600160a01b0391909116606090910152949350505050565b6000808335601e198436030181126104a8578283fd5b83018035915067ffffffffffffffff8211156104c2578283fd5b6020019150368190038213156104d757600080fd5b9250929050565b6001600160a01b03811681146104f357600080fd5b5056fea26469706673582212208b4fee3a22ca404a4af8e35a07710406893fe5f6684abd0b608065b3501e9e7664736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13075,
        "contract": "contracts/builders/ControlledTokenBuilder.sol:ControlledTokenBuilder",
        "label": "controlledTokenProxyFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ControlledTokenProxyFactory)27275"
      },
      {
        "astId": 13077,
        "contract": "contracts/builders/ControlledTokenBuilder.sol:ControlledTokenBuilder",
        "label": "ticketProxyFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TicketProxyFactory)27547"
      }
    ],
    "types": {
      "t_contract(ControlledTokenProxyFactory)27275": {
        "encoding": "inplace",
        "label": "contract ControlledTokenProxyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(TicketProxyFactory)27547": {
        "encoding": "inplace",
        "label": "contract TicketProxyFactory",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "264800",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "controlledTokenProxyFactory()": "1048",
      "createControlledToken((string,string,uint8,address))": "infinite",
      "createTicket((string,string,uint8,address))": "infinite",
      "ticketProxyFactory()": "1114"
    }
  }
}