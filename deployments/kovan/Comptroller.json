{
  "address": "0xdb8E47BEFe4646fCc62BE61EEE5DF350404c124F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dripRatePerSecond",
          "type": "uint256"
        }
      ],
      "name": "BalanceDripActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        }
      ],
      "name": "BalanceDripDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BalanceDripDripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dripRatePerSecond",
          "type": "uint256"
        }
      ],
      "name": "BalanceDripRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DripTokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DripTokenDripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferredOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dripAmount",
          "type": "uint256"
        }
      ],
      "name": "VolumeDripActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        }
      ],
      "name": "VolumeDripDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "VolumeDripDripped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "drippedTokens",
          "type": "uint256"
        }
      ],
      "name": "VolumeDripPeriodEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dripAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "VolumeDripPeriodStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dripAmount",
          "type": "uint256"
        }
      ],
      "name": "VolumeDripSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dripRatePerSecond",
          "type": "uint256"
        }
      ],
      "name": "activateBalanceDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "periodSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "dripAmount",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "name": "activateVolumeDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "balanceOfClaims",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dripToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Comptroller.DripTokenBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        }
      ],
      "name": "balanceOfDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "beforeTokenMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        }
      ],
      "name": "beforeTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "captureClaimsForBalanceDripsForPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "claimDrips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prevDripToken",
          "type": "address"
        }
      ],
      "name": "deactivateBalanceDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "prevDripToken",
          "type": "address"
        }
      ],
      "name": "deactivateVolumeDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        }
      ],
      "name": "getActiveBalanceDripTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        }
      ],
      "name": "getActiveVolumeDripTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        }
      ],
      "name": "getBalanceDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dripRatePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "exchangeRateMantissa",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        }
      ],
      "name": "getVolumeDrip",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dripAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "period",
          "type": "uint16"
        }
      ],
      "name": "getVolumeDripPeriod",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "totalSupply",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "dripAmount",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "endTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        }
      ],
      "name": "isVolumeDripActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "mintAndCaptureVolumeDripsForPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dripRatePerSecond",
          "type": "uint256"
        }
      ],
      "name": "setBalanceDripRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "measure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dripToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isReferral",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "periodSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint112",
          "name": "dripAmount",
          "type": "uint112"
        }
      ],
      "name": "setVolumeDrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        }
      ],
      "name": "updateActiveBalanceDripsForPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        }
      ],
      "name": "updateActiveVolumeDripsForPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "updateAndClaimDrips",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dripToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Comptroller.DripTokenBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "measure",
              "type": "address"
            }
          ],
          "internalType": "struct Comptroller.UpdatePair[]",
          "name": "pairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "dripTokens",
          "type": "address[]"
        }
      ],
      "name": "updateDrips",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dripToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Comptroller.DripTokenBalance[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9684c20727deb52b57a2e607ea936ce9e79d5957b58782d50313b7e0744c813d",
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0xdb8E47BEFe4646fCc62BE61EEE5DF350404c124F",
    "transactionIndex": 2,
    "gasUsed": "4188884",
    "logsBloom": "0x
    "blockHash": "0x189b0150138bb8dbd7923e3a661a05b7ccea2bdfc1fa83fe1dbcefadf9d566b9",
    "transactionHash": "0x9684c20727deb52b57a2e607ea936ce9e79d5957b58782d50313b7e0744c813d",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 23775957,
        "transactionHash": "0x9684c20727deb52b57a2e607ea936ce9e79d5957b58782d50313b7e0744c813d",
        "address": "0xdb8E47BEFe4646fCc62BE61EEE5DF350404c124F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e0f4217390221af47855e094f6e112d43c8698fe"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x189b0150138bb8dbd7923e3a661a05b7ccea2bdfc1fa83fe1dbcefadf9d566b9"
      }
    ],
    "blockNumber": 23775957,
    "cumulativeGasUsed": "4285354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4ee5cd3af4cdf3f3b3aae685e2904e9d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dripRatePerSecond\",\"type\":\"uint256\"}],\"name\":\"BalanceDripActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"}],\"name\":\"BalanceDripDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceDripDripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dripRatePerSecond\",\"type\":\"uint256\"}],\"name\":\"BalanceDripRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DripTokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DripTokenDripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dripAmount\",\"type\":\"uint256\"}],\"name\":\"VolumeDripActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"VolumeDripDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VolumeDripDripped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drippedTokens\",\"type\":\"uint256\"}],\"name\":\"VolumeDripPeriodEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dripAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"VolumeDripPeriodStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dripAmount\",\"type\":\"uint256\"}],\"name\":\"VolumeDripSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dripRatePerSecond\",\"type\":\"uint256\"}],\"name\":\"activateBalanceDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"periodSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"dripAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"name\":\"activateVolumeDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"balanceOfClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Comptroller.DripTokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"}],\"name\":\"balanceOfDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"beforeTokenMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"name\":\"beforeTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"captureClaimsForBalanceDripsForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"claimDrips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prevDripToken\",\"type\":\"address\"}],\"name\":\"deactivateBalanceDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"prevDripToken\",\"type\":\"address\"}],\"name\":\"deactivateVolumeDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"name\":\"getActiveBalanceDripTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"getActiveVolumeDripTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"}],\"name\":\"getBalanceDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dripRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"exchangeRateMantissa\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"getVolumeDrip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dripAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"period\",\"type\":\"uint16\"}],\"name\":\"getVolumeDripPeriod\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"totalSupply\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"dripAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"}],\"name\":\"isVolumeDripActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"mintAndCaptureVolumeDripsForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dripRatePerSecond\",\"type\":\"uint256\"}],\"name\":\"setBalanceDripRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReferral\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"periodSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"dripAmount\",\"type\":\"uint112\"}],\"name\":\"setVolumeDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"updateActiveBalanceDripsForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"updateActiveVolumeDripsForPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"updateAndClaimDrips\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Comptroller.DripTokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"measure\",\"type\":\"address\"}],\"internalType\":\"struct Comptroller.UpdatePair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"dripTokens\",\"type\":\"address[]\"}],\"name\":\"updateDrips\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dripToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Comptroller.DripTokenBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activateBalanceDrip(address,address,address,uint256)\":{\"params\":{\"dripRatePerSecond\":\"The amount of drip tokens that are awarded each second to the total supply of measure.\",\"dripToken\":\"The token that is dripped to users.\",\"measure\":\"The ERC20 token whose balances determines user's share of the drip rate.\",\"source\":\"The balance drip \\\"source\\\"; i.e. a Prize Pool address.\"}},\"activateVolumeDrip(address,address,address,bool,uint32,uint112,uint32)\":{\"params\":{\"dripAmount\":\"The amount of dripTokens disbursed each period.\",\"dripToken\":\"The token that is being disbursed\",\"endTime\":\"The time at which the first period ends.\",\"isReferral\":\"Whether this volume drip is for referrals\",\"measure\":\"The Prize Pool controlled token whose volume should be measured\",\"periodSeconds\":\"The period of the volume drip, in seconds\",\"source\":\"The Prize Pool for which to bind to\"}},\"balanceOfDrip(address,address)\":{\"params\":{\"dripToken\":\"The token that is being disbursed\",\"user\":\"The user whose balance should be checked.\"},\"returns\":{\"_0\":\"The claimable balance of the dripToken by the user.\"}},\"beforeTokenMint(address,uint256,address,address)\":{\"params\":{\"amount\":\"The amount of tokens they are minting\",\"measure\":\"The measure token they are minting\",\"referrer\":\"The user who referred the minting.\",\"to\":\"The user who is minting the tokens\"}},\"beforeTokenTransfer(address,address,uint256,address)\":{\"params\":{\"from\":\"The user who is sending the tokens\",\"measure\":\"The measure token they are burning\",\"to\":\"The user who is receiving the tokens\"}},\"captureClaimsForBalanceDripsForPairs((address,address)[],address,address[])\":{\"params\":{\"dripTokens\":\"The drip tokens to retrieve claim balances for.\",\"pairs\":\"The (source, measure) pairs to update.  For each pair all of the balance drips, volume drips, and referral volume drips will be updated.\",\"user\":\"The user whose drips and balances will be updated.\"}},\"claimDrip(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of drip token to claim\",\"dripToken\":\"The drip token to claim\",\"user\":\"The user for whom to claim the drip tokens\"}},\"deactivateBalanceDrip(address,address,address,address)\":{\"params\":{\"dripToken\":\"The token that is dripped to users.\",\"measure\":\"The ERC20 token whose balances determines user's share of the drip rate.\",\"prevDripToken\":\"The previous drip token in the balance drip list.  If the dripToken is the first address, then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\",\"source\":\"The balance drip \\\"source\\\"; i.e. a Prize Pool address.\"}},\"deactivateVolumeDrip(address,address,address,bool,address)\":{\"params\":{\"dripToken\":\"The token that is being disbursed\",\"isReferral\":\"Whether this volume drip is for referrals\",\"measure\":\"The Prize Pool controlled token whose volume should be measured\",\"prevDripToken\":\"The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.\",\"source\":\"The Prize Pool for which to bind to\"}},\"getActiveBalanceDripTokens(address,address)\":{\"params\":{\"measure\":\"The ERC20 token whose balances determines user's share of the drip rate.\",\"source\":\"The balance drip \\\"source\\\"; i.e. a Prize Pool address.\"},\"returns\":{\"_0\":\"An array of active Balance Drip token addresses\"}},\"getActiveVolumeDripTokens(address,address,bool)\":{\"params\":{\"isReferral\":\"Whether this volume drip is a referral\",\"measure\":\"The ERC20 token whose volume determines user's share of the drip rate.\",\"source\":\"The volume drip \\\"source\\\"; i.e. a Prize Pool address.\"},\"returns\":{\"_0\":\"An array of active Volume Drip token addresses\"}},\"getBalanceDrip(address,address,address)\":{\"params\":{\"dripToken\":\"The token that is being dripped to users\",\"measure\":\"The token that measure's a users share of the drip\",\"source\":\"The balance drip \\\"source\\\"; i.e. Prize Pool\"},\"returns\":{\"dripRatePerSecond\":\"The current drip rate of the balance drip.\",\"exchangeRateMantissa\":\"The current exchange rate from measure to dripTokens\",\"timestamp\":\"The timestamp at which the balance drip was last updated.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBalanceDripRate(address,address,address,uint256)\":{\"params\":{\"dripRatePerSecond\":\"The new drip rate per second\",\"dripToken\":\"The token that is dripped to the user\",\"measure\":\"The token to use to measure a user's share of the drip rate\",\"source\":\"The balance drip \\\"source\\\"; i.e. Prize Pool\"}},\"setVolumeDrip(address,address,address,bool,uint32,uint112)\":{\"params\":{\"dripAmount\":\"The amount of tokens to drip for the next period\",\"dripToken\":\"The token that is being disbursed\",\"isReferral\":\"Whether this volume drip is a referral\",\"measure\":\"The token whose volume is being measured\",\"periodSeconds\":\"The length to use for the next period\",\"source\":\"The Prize Pool of the volume drip\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAndClaimDrips((address,address)[],address,address[])\":{\"details\":\"This function will be useful to check the *current* claim balances for a user. Just need to run this as a constant function to see the latest balances. in order to claim the values, this function needs to be run alongside a claimDrip function.\",\"params\":{\"dripTokens\":\"The drip tokens whose entire balance will be claimed after the update.\",\"pairs\":\"The (source, measure) pairs of drips to update for the given user\",\"user\":\"The user for whom to update and claim tokens\"},\"returns\":{\"_0\":\"The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\"}},\"updateDrips((address,address)[],address,address[])\":{\"details\":\"This function will be useful to check the *current* claim balances for a user. Just need to run this as a constant function to see the latest balances. in order to claim the values, this function needs to be run alongside a claimDrip function.\",\"params\":{\"dripTokens\":\"The drip tokens whose entire balance will be claimed after the update.\",\"pairs\":\"The (source, measure) pairs of drips to update for the given user\",\"user\":\"The user for whom to update and claim tokens\"},\"returns\":{\"_0\":\"The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\"}}},\"title\":\"The Comptroller disburses rewards to pool users\",\"version\":1},\"userdoc\":{\"events\":{\"BalanceDripActivated(address,address,address,uint256)\":{\"notice\":\"Emitted when a balance drip is actived\"},\"BalanceDripDeactivated(address,address,address)\":{\"notice\":\"Emitted when a balance drip is deactivated\"},\"BalanceDripDripped(address,address,address,address,uint256)\":{\"notice\":\"Emitted when a balance drip drips tokens\"},\"BalanceDripRateSet(address,address,address,uint256)\":{\"notice\":\"Emitted when a balance drip rate is updated\"},\"DripTokenClaimed(address,address,address,uint256)\":{\"notice\":\"Emitted when a user claims drip tokens\"},\"VolumeDripActivated(address,address,address,bool,uint256,uint256)\":{\"notice\":\"Emitted when a volume drip is activated\"},\"VolumeDripDeactivated(address,address,address,bool)\":{\"notice\":\"Emitted when a volume drip is deactivated.\"},\"VolumeDripDripped(address,address,address,bool,address,uint256)\":{\"notice\":\"Emitted when a volue drip drips tokens\"},\"VolumeDripPeriodEnded(address,address,address,bool,uint32,uint256,uint256)\":{\"notice\":\"Emitted when a volume drip period has ended\"},\"VolumeDripPeriodStarted(address,address,address,bool,uint32,uint256,uint256)\":{\"notice\":\"Emitted when a new volume drip period has started\"},\"VolumeDripSet(address,address,address,bool,uint256,uint256)\":{\"notice\":\"Emitted when a volume drip is updated\"}},\"kind\":\"user\",\"methods\":{\"activateBalanceDrip(address,address,address,uint256)\":{\"notice\":\"Activates a balance drip.  Only callable by the owner.\"},\"activateVolumeDrip(address,address,address,bool,uint32,uint112,uint32)\":{\"notice\":\"Activates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\"},\"balanceOfDrip(address,address)\":{\"notice\":\"Returns a users claimable balance of drip tokens.  This is the combination of all balance and volume drips.\"},\"beforeTokenMint(address,uint256,address,address)\":{\"notice\":\"Called by a \\\"source\\\" (i.e. Prize Pool) when a user mints new \\\"measure\\\" tokens.\"},\"beforeTokenTransfer(address,address,uint256,address)\":{\"notice\":\"Called by a \\\"source\\\" (i.e. Prize Pool) when tokens change hands or are burned\"},\"claimDrip(address,address,uint256)\":{\"notice\":\"Claims a drip token on behalf of a user.  If the passed amount is less than or equal to the users drip balance, then they will be transferred that amount.  Otherwise, it fails.\"},\"constructor\":\"Initializes a new Comptroller.\",\"deactivateBalanceDrip(address,address,address,address)\":{\"notice\":\"Deactivates a balance drip.  Only callable by the owner.\"},\"deactivateVolumeDrip(address,address,address,bool,address)\":{\"notice\":\"Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\"},\"getActiveBalanceDripTokens(address,address)\":{\"notice\":\"Gets a list of active balance drip tokens\"},\"getActiveVolumeDripTokens(address,address,bool)\":{\"notice\":\"Gets a list of active volume drip tokens\"},\"getBalanceDrip(address,address,address)\":{\"notice\":\"Returns the state of a balance drip.\"},\"setBalanceDripRate(address,address,address,uint256)\":{\"notice\":\"Sets the drip rate for a balance drip.  The drip rate is the number of drip tokens given to the entire supply of measure tokens.  Only callable by the owner.\"},\"setVolumeDrip(address,address,address,bool,uint32,uint112)\":{\"notice\":\"Sets the parameters for the *next* volume drip period.  The source, measure, dripToken and isReferral combined are used to uniquely identify a volume drip.  Only callable by the owner.\"},\"updateAndClaimDrips((address,address)[],address,address[])\":{\"notice\":\"Updates the given drips for a user and then claims the given drip tokens.  This call will poke all of the drips and update the claim balances for the given user.\"},\"updateDrips((address,address)[],address,address[])\":{\"notice\":\"Updates the given drips for a user and then claims the given drip tokens.  This call will poke all of the drips and update the claim balances for the given user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/comptroller/Comptroller.sol\":\"Comptroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xc8f73c50cb3cf3dc80d09c82e9c265d778f30a2801c5ff394aca3be7dd064acd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x8bba8b7cb2b7a53b4b669acdaeeafc697502e1d762716f1110a9a99bff1f1c4d\",\"license\":\"MIT\"},\"@pooltogether/fixed-point/contracts/FixedPoint.sol\":{\"content\":\"/**\\nCopyright 2020 PoolTogether Inc.\\n\\nThis file is part of PoolTogether.\\n\\nPoolTogether is free software: you can redistribute it and/or modify\\nit under the terms of the GNU General Public License as published by\\nthe Free Software Foundation under version 3 of the License.\\n\\nPoolTogether is distributed in the hope that it will be useful,\\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\nGNU General Public License for more details.\\n\\nYou should have received a copy of the GNU General Public License\\nalong with PoolTogether.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\\\";\\n\\n/**\\n * @author Brendan Asselstine\\n * @notice Provides basic fixed point math calculations.\\n *\\n * This library calculates integer fractions by scaling values by 1e18 then performing standard integer math.\\n */\\nlibrary FixedPoint {\\n    using OpenZeppelinSafeMath_V3_3_0 for uint256;\\n\\n    // The scale to use for fixed point numbers.  Same as Ether for simplicity.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /**\\n        * Calculates a Fixed18 mantissa given the numerator and denominator\\n        *\\n        * The mantissa = (numerator * 1e18) / denominator\\n        *\\n        * @param numerator The mantissa numerator\\n        * @param denominator The mantissa denominator\\n        * @return The mantissa of the fraction\\n        */\\n    function calculateMantissa(uint256 numerator, uint256 denominator) internal pure returns (uint256) {\\n        uint256 mantissa = numerator.mul(SCALE);\\n        mantissa = mantissa.div(denominator);\\n        return mantissa;\\n    }\\n\\n    /**\\n        * Multiplies a Fixed18 number by an integer.\\n        *\\n        * @param b The whole integer to multiply\\n        * @param mantissa The Fixed18 number\\n        * @return An integer that is the result of multiplying the params.\\n        */\\n    function multiplyUintByMantissa(uint256 b, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = mantissa.mul(b);\\n        result = result.div(SCALE);\\n        return result;\\n    }\\n\\n    /**\\n    * Divides an integer by a fixed point 18 mantissa\\n    *\\n    * @param dividend The integer to divide\\n    * @param mantissa The fixed point 18 number to serve as the divisor\\n    * @return An integer that is the result of dividing an integer by a fixed point 18 mantissa\\n    */\\n    function divideUintByMantissa(uint256 dividend, uint256 mantissa) internal pure returns (uint256) {\\n        uint256 result = SCALE.mul(dividend);\\n        result = result.div(mantissa);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x282e7d707b1e604481fed02d1290cde78470e288d3469940c2edf9e5b8a10d99\"},\"@pooltogether/fixed-point/contracts/external/openzeppelin/OpenZeppelinSafeMath_V3_3_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// NOTE: Copied from OpenZeppelin Contracts version 3.3.0\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary OpenZeppelinSafeMath_V3_3_0 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xd57327a27dee007aead634ed97dd9ffa42b2626eb2731368650c9cb0e50e73d4\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC1820RegistryUpgradeable.sol\\\";\\n\\nlibrary Constants {\\n  IERC1820RegistryUpgradeable public constant REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  // keccak256(\\\"ERC777TokensSender\\\")\\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n  // keccak256(\\\"ERC777TokensRecipient\\\")\\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n  // keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n  bytes32 public constant ACCEPT_MAGIC =\\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\\n\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC721 = 0x80ac58cd;\\n}\",\"keccak256\":\"0x8481c6d291103f2826aa16d3a291680c0182a6b8b754b0b1c7c63b11fb0b5eb3\",\"license\":\"GPL-3.0\"},\"contracts/comptroller/Comptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"../utils/UInt256Array.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\nimport \\\"../token/TokenListener.sol\\\";\\n\\n/// @title The Comptroller disburses rewards to pool users\\n/* solium-disable security/no-block-members */\\ncontract Comptroller is ComptrollerStorage, TokenListener {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeCastUpgradeable for uint256;\\n  using UInt256Array for uint256[];\\n  using ExtendedSafeCast for uint256;\\n  using BalanceDrip for BalanceDrip.State;\\n  using VolumeDrip for VolumeDrip.State;\\n  using BalanceDripManager for BalanceDripManager.State;\\n  using VolumeDripManager for VolumeDripManager.State;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n  /// @notice Emitted when a balance drip is actived\\n  event BalanceDripActivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    uint256 dripRatePerSecond\\n  );\\n\\n  /// @notice Emitted when a balance drip is deactivated\\n  event BalanceDripDeactivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken\\n  );\\n\\n  /// @notice Emitted when a balance drip rate is updated\\n  event BalanceDripRateSet(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    uint256 dripRatePerSecond\\n  );\\n\\n  /// @notice Emitted when a balance drip drips tokens\\n  event BalanceDripDripped(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    address user,\\n    uint256 amount\\n  );\\n\\n  event DripTokenDripped(\\n    address indexed dripToken,\\n    address indexed user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a volue drip drips tokens\\n  event VolumeDripDripped(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    address user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a user claims drip tokens\\n  event DripTokenClaimed(\\n    address indexed operator,\\n    address indexed dripToken,\\n    address indexed user,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a volume drip is activated\\n  event VolumeDripActivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint256 periodSeconds,\\n    uint256 dripAmount\\n  );\\n\\n  event TransferredOut(\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /// @notice Emitted when a new volume drip period has started\\n  event VolumeDripPeriodStarted(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint32 period,\\n    uint256 dripAmount,\\n    uint256 endTime\\n  );\\n\\n  /// @notice Emitted when a volume drip period has ended\\n  event VolumeDripPeriodEnded(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint32 period,\\n    uint256 totalSupply,\\n    uint256 drippedTokens\\n  );\\n\\n  /// @notice Emitted when a volume drip is updated\\n  event VolumeDripSet(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral,\\n    uint256 periodSeconds,\\n    uint256 dripAmount\\n  );\\n\\n  /// @notice Emitted when a volume drip is deactivated.\\n  event VolumeDripDeactivated(\\n    address indexed source,\\n    address indexed measure,\\n    address indexed dripToken,\\n    bool isReferral\\n  );\\n\\n  /// @notice Convenience struct used when updating drips\\n  struct UpdatePair {\\n    address source;\\n    address measure;\\n  }\\n\\n  /// @notice Convenience struct used to retrieve balances after updating drips\\n  struct DripTokenBalance {\\n    address dripToken;\\n    uint256 balance;\\n  }\\n\\n  /// @notice Initializes a new Comptroller.\\n  constructor () public {\\n    __Ownable_init();\\n  }\\n\\n  function transferOut(address token, address to, uint256 amount) external onlyOwner {\\n    IERC20Upgradeable(token).transfer(to, amount);\\n\\n    emit TransferredOut(token, to, amount);\\n  }\\n\\n  /// @notice Activates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param dripRatePerSecond The amount of drip tokens that are awarded each second to the total supply of measure.\\n  function activateBalanceDrip(address source, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\\n\\n    balanceDrips[source].activateDrip(measure, dripToken, dripRatePerSecond);\\n\\n    emit BalanceDripActivated(\\n      source,\\n      measure,\\n      dripToken,\\n      dripRatePerSecond\\n    );\\n  }\\n\\n  /// @notice Deactivates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param prevDripToken The previous drip token in the balance drip list.  If the dripToken is the first address,\\n  /// then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function deactivateBalanceDrip(address source, address measure, address dripToken, address prevDripToken) external onlyOwner {\\n    _deactivateBalanceDrip(source, measure, dripToken, prevDripToken);\\n  }\\n\\n  /// @notice Deactivates a balance drip.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @param dripToken The token that is dripped to users.\\n  /// @param prevDripToken The previous drip token in the balance drip list.  If the dripToken is the first address,\\n  /// then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  function _deactivateBalanceDrip(address source, address measure, address dripToken, address prevDripToken) internal {\\n    balanceDrips[source].deactivateDrip(measure, dripToken, prevDripToken, _currentTime().toUint32(), _availableDripTokenBalance(dripToken));\\n\\n    emit BalanceDripDeactivated(source, measure, dripToken);\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param source The balance drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose balances determines user's share of the drip rate.\\n  /// @return An array of active Balance Drip token addresses\\n  function getActiveBalanceDripTokens(address source, address measure) external view returns (address[] memory) {\\n    return balanceDrips[source].getActiveBalanceDrips(measure);\\n  }\\n\\n  /// @notice Returns the state of a balance drip.\\n  /// @param source The balance drip \\\"source\\\"; i.e. Prize Pool\\n  /// @param measure The token that measure's a users share of the drip\\n  /// @param dripToken The token that is being dripped to users\\n  /// @return dripRatePerSecond The current drip rate of the balance drip.\\n  /// @return exchangeRateMantissa The current exchange rate from measure to dripTokens\\n  /// @return timestamp The timestamp at which the balance drip was last updated.\\n  function getBalanceDrip(\\n    address source,\\n    address measure,\\n    address dripToken\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 dripRatePerSecond,\\n      uint128 exchangeRateMantissa,\\n      uint32 timestamp\\n    )\\n  {\\n    BalanceDrip.State storage balanceDrip = balanceDrips[source].getDrip(measure, dripToken);\\n    dripRatePerSecond = balanceDrip.dripRatePerSecond;\\n    exchangeRateMantissa = balanceDrip.exchangeRateMantissa;\\n    timestamp = balanceDrip.timestamp;\\n  }\\n\\n  /// @notice Sets the drip rate for a balance drip.  The drip rate is the number of drip tokens given to the\\n  /// entire supply of measure tokens.  Only callable by the owner.\\n  /// @param source The balance drip \\\"source\\\"; i.e. Prize Pool\\n  /// @param measure The token to use to measure a user's share of the drip rate\\n  /// @param dripToken The token that is dripped to the user\\n  /// @param dripRatePerSecond The new drip rate per second\\n  function setBalanceDripRate(address source, address measure, address dripToken, uint256 dripRatePerSecond) external onlyOwner {\\n    balanceDrips[source].setDripRate(measure, dripToken, dripRatePerSecond, _currentTime().toUint32(), _availableDripTokenBalance(dripToken));\\n\\n    emit BalanceDripRateSet(\\n      source,\\n      measure,\\n      dripToken,\\n      dripRatePerSecond\\n    );\\n  }\\n\\n  /// @notice Activates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param periodSeconds The period of the volume drip, in seconds\\n  /// @param dripAmount The amount of dripTokens disbursed each period.\\n  /// @param endTime The time at which the first period ends.\\n  function activateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint32 periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    external\\n    onlyOwner\\n  {\\n    uint32 period;\\n\\n    if (isReferral) {\\n      period = referralVolumeDrips[source].activate(measure, dripToken, periodSeconds, dripAmount, endTime);\\n    } else {\\n      period = volumeDrips[source].activate(measure, dripToken, periodSeconds, dripAmount, endTime);\\n    }\\n\\n    emit VolumeDripActivated(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      periodSeconds,\\n      dripAmount\\n    );\\n\\n    emit VolumeDripPeriodStarted(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      period,\\n      dripAmount,\\n      endTime\\n    );\\n  }\\n\\n  /// @notice Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param prevDripToken The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.\\n  function deactivateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address prevDripToken\\n  )\\n    external\\n    onlyOwner\\n  {\\n    _deactivateVolumeDrip(source, measure, dripToken, isReferral, prevDripToken);\\n  }\\n\\n  /// @notice Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period.\\n  /// @param source The Prize Pool for which to bind to\\n  /// @param measure The Prize Pool controlled token whose volume should be measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is for referrals\\n  /// @param prevDripToken The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.\\n  function _deactivateVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address prevDripToken\\n  )\\n    internal\\n  {\\n    if (isReferral) {\\n      referralVolumeDrips[source].deactivate(measure, dripToken, prevDripToken);\\n    } else {\\n      volumeDrips[source].deactivate(measure, dripToken, prevDripToken);\\n    }\\n\\n    emit VolumeDripDeactivated(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral\\n    );\\n  }\\n\\n\\n  /// @notice Sets the parameters for the *next* volume drip period.  The source, measure, dripToken and isReferral combined\\n  /// are used to uniquely identify a volume drip.  Only callable by the owner.\\n  /// @param source The Prize Pool of the volume drip\\n  /// @param measure The token whose volume is being measured\\n  /// @param dripToken The token that is being disbursed\\n  /// @param isReferral Whether this volume drip is a referral\\n  /// @param periodSeconds The length to use for the next period\\n  /// @param dripAmount The amount of tokens to drip for the next period\\n  function setVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint32 periodSeconds,\\n    uint112 dripAmount\\n  )\\n    external\\n    onlyOwner\\n  {\\n    if (isReferral) {\\n      referralVolumeDrips[source].set(measure, dripToken, periodSeconds, dripAmount);\\n    } else {\\n      volumeDrips[source].set(measure, dripToken, periodSeconds, dripAmount);\\n    }\\n\\n    emit VolumeDripSet(\\n      source,\\n      measure,\\n      dripToken,\\n      isReferral,\\n      periodSeconds,\\n      dripAmount\\n    );\\n  }\\n\\n  function getVolumeDrip(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 periodSeconds,\\n      uint256 dripAmount,\\n      uint256 periodCount\\n    )\\n  {\\n    VolumeDrip.State memory drip;\\n\\n    if (isReferral) {\\n      drip = referralVolumeDrips[source].volumeDrips[measure][dripToken];\\n    } else {\\n      drip = volumeDrips[source].volumeDrips[measure][dripToken];\\n    }\\n\\n    return (\\n      drip.nextPeriodSeconds,\\n      drip.nextDripAmount,\\n      drip.periodCount\\n    );\\n  }\\n\\n  /// @notice Gets a list of active volume drip tokens\\n  /// @param source The volume drip \\\"source\\\"; i.e. a Prize Pool address.\\n  /// @param measure The ERC20 token whose volume determines user's share of the drip rate.\\n  /// @param isReferral Whether this volume drip is a referral\\n  /// @return An array of active Volume Drip token addresses\\n  function getActiveVolumeDripTokens(address source, address measure, bool isReferral) external view returns (address[] memory) {\\n    if (isReferral) {\\n      return referralVolumeDrips[source].getActiveVolumeDrips(measure);\\n    } else {\\n      return volumeDrips[source].getActiveVolumeDrips(measure);\\n    }\\n  }\\n\\n  function isVolumeDripActive(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    if (isReferral) {\\n      return referralVolumeDrips[source].isActive(measure, dripToken);\\n    } else {\\n      return volumeDrips[source].isActive(measure, dripToken);\\n    }\\n  }\\n\\n  function getVolumeDripPeriod(\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    uint16 period\\n  )\\n    external\\n    view\\n    returns (\\n      uint112 totalSupply,\\n      uint112 dripAmount,\\n      uint32 endTime\\n    )\\n  {\\n    VolumeDrip.Period memory periodState;\\n\\n    if (isReferral) {\\n      periodState = referralVolumeDrips[source].volumeDrips[measure][dripToken].periods[period];\\n    } else {\\n      periodState = volumeDrips[source].volumeDrips[measure][dripToken].periods[period];\\n    }\\n\\n    return (\\n      periodState.totalSupply,\\n      periodState.dripAmount,\\n      periodState.endTime\\n    );\\n  }\\n\\n  /// @notice Returns a users claimable balance of drip tokens.  This is the combination of all balance and volume drips.\\n  /// @param dripToken The token that is being disbursed\\n  /// @param user The user whose balance should be checked.\\n  /// @return The claimable balance of the dripToken by the user.\\n  function balanceOfDrip(address user, address dripToken) external view returns (uint256) {\\n    return dripTokenBalances[dripToken][user];\\n  }\\n\\n  /// @notice Claims a drip token on behalf of a user.  If the passed amount is less than or equal to the users drip balance, then\\n  /// they will be transferred that amount.  Otherwise, it fails.\\n  /// @param user The user for whom to claim the drip tokens\\n  /// @param dripToken The drip token to claim\\n  /// @param amount The amount of drip token to claim\\n  function claimDrip(address user, address dripToken, uint256 amount) public {\\n    address sender = _msgSender();\\n    dripTokenTotalSupply[dripToken] = dripTokenTotalSupply[dripToken].sub(amount);\\n    dripTokenBalances[dripToken][user] = dripTokenBalances[dripToken][user].sub(amount);\\n    require(IERC20Upgradeable(dripToken).transfer(user, amount), \\\"Comptroller/claim-transfer-failed\\\");\\n\\n    emit DripTokenClaimed(sender, dripToken, user, amount);\\n  }\\n\\n  function claimDrips(address user, address[] memory dripTokens) public {\\n    for (uint i = 0; i < dripTokens.length; i++) {\\n      claimDrip(user, dripTokens[i], dripTokenBalances[dripTokens[i]][user]);\\n    }\\n  }\\n\\n  function updateActiveBalanceDripsForPairs(\\n    UpdatePair[] memory pairs\\n  ) public {\\n    uint256 currentTime = _currentTime();\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      _updateActiveBalanceDrips(\\n        balanceDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        IERC20Upgradeable(pair.measure).totalSupply(),\\n        currentTime\\n      );\\n    }\\n  }\\n\\n  function updateActiveVolumeDripsForPairs(\\n    UpdatePair[] memory pairs\\n  ) public {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      _updateActiveVolumeDrips(\\n        volumeDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        false\\n      );\\n      _updateActiveVolumeDrips(\\n        referralVolumeDrips[pair.source],\\n        pair.source,\\n        pair.measure,\\n        true\\n      );\\n    }\\n  }\\n\\n  function mintAndCaptureVolumeDripsForPairs(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) public {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n\\n      _mintAndCaptureForVolumeDrips(pair.source, pair.measure, user, amount, dripTokens);\\n      _mintAndCaptureReferralVolumeDrips(pair.source, pair.measure, user, amount, dripTokens);\\n    }\\n  }\\n\\n  function _mintAndCaptureForVolumeDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      VolumeDrip.State storage state = volumeDrips[source].volumeDrips[measure][dripToken];\\n      _captureClaimForVolumeDrip(state, source, measure, dripToken, false, user, amount);\\n    }\\n  }\\n\\n  function _mintAndCaptureReferralVolumeDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 amount,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      VolumeDrip.State storage referralState = referralVolumeDrips[source].volumeDrips[measure][dripToken];\\n      _captureClaimForVolumeDrip(referralState, source, measure, dripToken, true, user, amount);\\n    }\\n  }\\n\\n  function _captureClaimForVolumeDrip(\\n    VolumeDrip.State storage dripState,\\n    address source,\\n    address measure,\\n    address dripToken,\\n    bool isReferral,\\n    address user,\\n    uint256 amount\\n  ) internal {\\n    uint256 newUserTokens = dripState.mint(\\n      user,\\n      amount\\n    );\\n\\n    if (newUserTokens > 0) {\\n      _addDripBalance(dripToken, user, newUserTokens);\\n      emit VolumeDripDripped(source, measure, dripToken, isReferral, user, newUserTokens);\\n    }\\n  }\\n\\n  /// @param pairs The (source, measure) pairs to update.  For each pair all of the balance drips, volume drips, and referral volume drips will be updated.\\n  /// @param user The user whose drips and balances will be updated.\\n  /// @param dripTokens The drip tokens to retrieve claim balances for.\\n  function captureClaimsForBalanceDripsForPairs(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    address[] memory dripTokens\\n  )\\n    public\\n  {\\n    uint256 i;\\n    for (i = 0; i < pairs.length; i++) {\\n      UpdatePair memory pair = pairs[i];\\n      uint256 measureBalance = IERC20Upgradeable(pair.measure).balanceOf(user);\\n      _captureClaimsForBalanceDrips(pair.source, pair.measure, user, measureBalance, dripTokens);\\n    }\\n  }\\n\\n  function _captureClaimsForBalanceDrips(\\n    address source,\\n    address measure,\\n    address user,\\n    uint256 userMeasureBalance,\\n    address[] memory dripTokens\\n  ) internal {\\n    uint i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      address dripToken = dripTokens[i];\\n\\n      BalanceDrip.State storage state = balanceDrips[source].balanceDrips[measure][dripToken];\\n      if (state.exchangeRateMantissa > 0) {\\n        _captureClaimForBalanceDrip(state, source, measure, dripToken, user, userMeasureBalance);\\n      }\\n    }\\n  }\\n\\n  function _captureClaimForBalanceDrip(\\n    BalanceDrip.State storage dripState,\\n    address source,\\n    address measure,\\n    address dripToken,\\n    address user,\\n    uint256 measureBalance\\n  ) internal {\\n    uint256 newUserTokens = dripState.captureNewTokensForUser(\\n      user,\\n      measureBalance\\n    );\\n\\n    if (newUserTokens > 0) {\\n      _addDripBalance(dripToken, user, newUserTokens);\\n      emit BalanceDripDripped(source, measure, dripToken, user, newUserTokens);\\n    }\\n  }\\n\\n  function balanceOfClaims(\\n    address user,\\n    address[] memory dripTokens\\n  ) public view returns (DripTokenBalance[] memory) {\\n    DripTokenBalance[] memory balances = new DripTokenBalance[](dripTokens.length);\\n    uint256 i;\\n    for (i = 0; i < dripTokens.length; i++) {\\n      balances[i] = DripTokenBalance({\\n        dripToken: dripTokens[i],\\n        balance: dripTokenBalances[dripTokens[i]][user]\\n      });\\n    }\\n    return balances;\\n  }\\n\\n  /// @notice Updates the given drips for a user and then claims the given drip tokens.  This call will\\n  /// poke all of the drips and update the claim balances for the given user.\\n  /// @dev This function will be useful to check the *current* claim balances for a user.\\n  /// Just need to run this as a constant function to see the latest balances.\\n  /// in order to claim the values, this function needs to be run alongside a claimDrip function.\\n  /// @param pairs The (source, measure) pairs of drips to update for the given user\\n  /// @param user The user for whom to update and claim tokens\\n  /// @param dripTokens The drip tokens whose entire balance will be claimed after the update.\\n  /// @return The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\\n  function updateDrips(\\n    UpdatePair[] memory pairs,\\n    address user,\\n    address[] memory dripTokens\\n  )\\n    public returns (DripTokenBalance[] memory)\\n  {\\n    updateActiveBalanceDripsForPairs(pairs);\\n    captureClaimsForBalanceDripsForPairs(pairs, user, dripTokens);\\n    updateActiveVolumeDripsForPairs(pairs);\\n    mintAndCaptureVolumeDripsForPairs(pairs, user, 0, dripTokens);\\n    DripTokenBalance[] memory balances = balanceOfClaims(user, dripTokens);\\n    return balances;\\n  }\\n\\n  /// @notice Updates the given drips for a user and then claims the given drip tokens.  This call will\\n  /// poke all of the drips and update the claim balances for the given user.\\n  /// @dev This function will be useful to check the *current* claim balances for a user.\\n  /// Just need to run this as a constant function to see the latest balances.\\n  /// in order to claim the values, this function needs to be run alongside a claimDrip function.\\n  /// @param pairs The (source, measure) pairs of drips to update for the given user\\n  /// @param user The user for whom to update and claim tokens\\n  /// @param dripTokens The drip tokens whose entire balance will be claimed after the update.\\n  /// @return The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate.\\n  function updateAndClaimDrips(\\n    UpdatePair[] calldata pairs,\\n    address user,\\n    address[] calldata dripTokens\\n  )\\n    external returns (DripTokenBalance[] memory)\\n  {\\n    DripTokenBalance[] memory balances = updateDrips(pairs, user, dripTokens);\\n    claimDrips(user, dripTokens);\\n    return balances;\\n  }\\n\\n  function _activeBalanceDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return balanceDrips[source].activeBalanceDrips[measure].addressArray();\\n  }\\n\\n  function _activeVolumeDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return volumeDrips[source].activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  function _activeReferralVolumeDripTokens(address source, address measure) internal view returns (address[] memory) {\\n    return referralVolumeDrips[source].activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Updates the balance drips\\n  /// @param source The Prize Pool of the balance drip\\n  /// @param manager The BalanceDripManager whose drips should be updated\\n  /// @param measure The measure token whose balance is changing\\n  /// @param measureTotalSupply The last total supply of the measure tokens\\n  /// @param currentTime The current\\n  function _updateActiveBalanceDrips(\\n    BalanceDripManager.State storage manager,\\n    address source,\\n    address measure,\\n    uint256 measureTotalSupply,\\n    uint256 currentTime\\n  ) internal {\\n    address prevDripToken = manager.activeBalanceDrips[measure].end();\\n    address currentDripToken = manager.activeBalanceDrips[measure].start();\\n    while (currentDripToken != address(0) && currentDripToken != manager.activeBalanceDrips[measure].end()) {\\n      BalanceDrip.State storage dripState = manager.balanceDrips[measure][currentDripToken];\\n      uint256 limit = _availableDripTokenBalance(currentDripToken);\\n\\n      uint256 newTokens = dripState.drip(\\n        measureTotalSupply,\\n        currentTime,\\n        limit\\n      );\\n\\n      // if we've hit the limit, then kill it.\\n      bool isDripComplete = newTokens == limit;\\n\\n      if (isDripComplete) {\\n        _deactivateBalanceDrip(source, measure, currentDripToken, prevDripToken);\\n      }\\n\\n      prevDripToken = currentDripToken;\\n      currentDripToken = manager.activeBalanceDrips[measure].next(currentDripToken);\\n    }\\n  }\\n\\n  /// @notice Records a deposit for a volume drip\\n  /// @param source The Prize Pool of the volume drip\\n  /// @param manager The VolumeDripManager containing the drips that need to be iterated through.\\n  /// @param isReferral Whether the passed manager contains referral volume drip\\n  /// @param measure The token that was deposited\\n  function _updateActiveVolumeDrips(\\n    VolumeDripManager.State storage manager,\\n    address source,\\n    address measure,\\n    bool isReferral\\n  )\\n    internal\\n  {\\n    address prevDripToken = manager.activeVolumeDrips[measure].end();\\n    uint256 currentTime = _currentTime();\\n    address currentDripToken = manager.activeVolumeDrips[measure].start();\\n    while (currentDripToken != address(0) && currentDripToken != manager.activeVolumeDrips[measure].end()) {\\n      VolumeDrip.State storage dripState = manager.volumeDrips[measure][currentDripToken];\\n      uint256 limit = _availableDripTokenBalance(currentDripToken);\\n\\n      uint32 lastPeriod = dripState.periodCount;\\n      uint256 newTokens = dripState.drip(\\n        currentTime,\\n        limit\\n      );\\n      if (lastPeriod != dripState.periodCount) {\\n        emit VolumeDripPeriodEnded(\\n          source,\\n          measure,\\n          currentDripToken,\\n          isReferral,\\n          lastPeriod,\\n          dripState.periods[lastPeriod].totalSupply,\\n          newTokens\\n        );\\n        emit VolumeDripPeriodStarted(\\n          source,\\n          measure,\\n          currentDripToken,\\n          isReferral,\\n          dripState.periodCount,\\n          dripState.periods[dripState.periodCount].dripAmount,\\n          dripState.periods[dripState.periodCount].endTime\\n        );\\n      }\\n\\n      // if we've hit the limit, then kill it.\\n      bool isDripComplete = newTokens == limit;\\n\\n\\n      if (isDripComplete) {\\n        _deactivateVolumeDrip(source, measure, currentDripToken, isReferral, prevDripToken);\\n      }\\n\\n      prevDripToken = currentDripToken;\\n      currentDripToken = manager.activeVolumeDrips[measure].next(currentDripToken);\\n    }\\n  }\\n\\n  function _addDripBalance(address dripToken, address user, uint256 amount) internal returns (uint256) {\\n    uint256 amountAvailable = _availableDripTokenBalance(dripToken);\\n    uint256 actualAmount = (amount > amountAvailable) ? amountAvailable : amount;\\n\\n    dripTokenTotalSupply[dripToken] = dripTokenTotalSupply[dripToken].add(actualAmount);\\n    dripTokenBalances[dripToken][user] = dripTokenBalances[dripToken][user].add(actualAmount);\\n\\n    emit DripTokenDripped(dripToken, user, actualAmount);\\n    return actualAmount;\\n  }\\n\\n  function _availableDripTokenBalance(address dripToken) internal view returns (uint256) {\\n    uint256 comptrollerBalance = IERC20Upgradeable(dripToken).balanceOf(address(this));\\n    uint256 totalClaimable = dripTokenTotalSupply[dripToken];\\n    return (totalClaimable < comptrollerBalance) ? comptrollerBalance.sub(totalClaimable) : 0;\\n  }\\n\\n  /// @notice Called by a \\\"source\\\" (i.e. Prize Pool) when a user mints new \\\"measure\\\" tokens.\\n  /// @param to The user who is minting the tokens\\n  /// @param amount The amount of tokens they are minting\\n  /// @param measure The measure token they are minting\\n  /// @param referrer The user who referred the minting.\\n  function beforeTokenMint(\\n    address to,\\n    uint256 amount,\\n    address measure,\\n    address referrer\\n  )\\n    external\\n    override\\n  {\\n    address source = _msgSender();\\n    uint256 balance = IERC20Upgradeable(measure).balanceOf(to);\\n    uint256 totalSupply = IERC20Upgradeable(measure).totalSupply();\\n\\n    address[] memory balanceDripTokens = _activeBalanceDripTokens(source, measure);\\n    _updateActiveBalanceDrips(\\n      balanceDrips[source],\\n      source,\\n      measure,\\n      totalSupply,\\n      _currentTime()\\n    );\\n    _captureClaimsForBalanceDrips(source, measure, to, balance, balanceDripTokens);\\n\\n    address[] memory volumeDripTokens = _activeVolumeDripTokens(source, measure);\\n    _updateActiveVolumeDrips(\\n      volumeDrips[source],\\n      source,\\n      measure,\\n      false\\n    );\\n    _mintAndCaptureForVolumeDrips(source, measure, to, amount, volumeDripTokens);\\n\\n    if (referrer != address(0)) {\\n      address[] memory referralVolumeDripTokens = _activeReferralVolumeDripTokens(source, measure);\\n      _updateActiveVolumeDrips(\\n        referralVolumeDrips[source],\\n        source,\\n        measure,\\n        true\\n      );\\n      _mintAndCaptureReferralVolumeDrips(source, measure, referrer, amount, referralVolumeDripTokens);\\n     }\\n  }\\n\\n  /// @notice Called by a \\\"source\\\" (i.e. Prize Pool) when tokens change hands or are burned\\n  /// @param from The user who is sending the tokens\\n  /// @param to The user who is receiving the tokens\\n  /// @param measure The measure token they are burning\\n  function beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256,\\n    address measure\\n  )\\n    external\\n    override\\n  {\\n    if (from == address(0)) {\\n      // ignore minting\\n      return;\\n    }\\n    address source = _msgSender();\\n    uint256 totalSupply = IERC20Upgradeable(measure).totalSupply();\\n    uint256 fromBalance = IERC20Upgradeable(measure).balanceOf(from);\\n\\n    address[] memory balanceDripTokens = _activeBalanceDripTokens(source, measure);\\n\\n    _updateActiveBalanceDrips(\\n      balanceDrips[source],\\n      source,\\n      measure,\\n      totalSupply,\\n      _currentTime()\\n    );\\n\\n    _captureClaimsForBalanceDrips(source, measure, from, fromBalance, balanceDripTokens);\\n\\n    if (to != address(0)) {\\n      uint256 toBalance = IERC20Upgradeable(measure).balanceOf(to);\\n      _captureClaimsForBalanceDrips(source, measure, to, toBalance, balanceDripTokens);\\n    }\\n  }\\n\\n  /// @notice returns the current time.  Allows for override in testing.\\n  /// @return The current time (block.timestamp)\\n  function _currentTime() internal virtual view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd5c0913f4f77d44e56cfb9125d745cb2243eb58da5c7442be6c3c735e08844d7\",\"license\":\"GPL-3.0\"},\"contracts/comptroller/ComptrollerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../drip/BalanceDripManager.sol\\\";\\nimport \\\"../drip/VolumeDripManager.sol\\\";\\n\\ncontract ComptrollerStorage is OwnableUpgradeable {\\n  mapping(address => VolumeDripManager.State) internal volumeDrips;\\n  mapping(address => VolumeDripManager.State) internal referralVolumeDrips;\\n  mapping(address => BalanceDripManager.State) internal balanceDrips;\\n\\n  mapping(address => uint256) internal dripTokenTotalSupply;\\n  mapping(address => mapping(address => uint256)) internal dripTokenBalances;\\n}\\n\",\"keccak256\":\"0x3eb323e730a03fa582d1f126d7be5349a9992a9ca0931787f82b461e9f46b446\",\"license\":\"GPL-3.0\"},\"contracts/drip/BalanceDrip.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"../utils/ExtendedSafeCast.sol\\\";\\nimport \\\"@pooltogether/fixed-point/contracts/FixedPoint.sol\\\";\\n\\n/// @title Calculates a users share of a token faucet.\\n/// @notice The tokens are dripped at a \\\"drip rate per second\\\".  This is the number of tokens that\\n/// are dripped each second to the entire supply of a \\\"measure\\\" token.  A user's share of ownership\\n/// of the measure token corresponds to the share of the drip tokens per second.\\nlibrary BalanceDrip {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeCastUpgradeable for uint256;\\n  using ExtendedSafeCast for uint256;\\n\\n  struct UserState {\\n    uint128 lastExchangeRateMantissa;\\n  }\\n\\n  struct State {\\n    uint256 dripRatePerSecond;\\n    uint112 exchangeRateMantissa;\\n    uint112 totalDripped;\\n    uint32 timestamp;\\n    mapping(address => UserState) userStates;\\n  }\\n\\n  /// @notice Captures new tokens for a user\\n  /// @dev This must be called before changes to the user's balance (i.e. before mint, transfer or burns)\\n  /// @param self The balance drip state\\n  /// @param user The user to capture tokens for\\n  /// @param userMeasureBalance The current balance of the user's measure tokens\\n  /// @return The number of new tokens\\n  function captureNewTokensForUser(\\n    State storage self,\\n    address user,\\n    uint256 userMeasureBalance\\n  ) internal returns (uint128) {\\n    return _captureNewTokensForUser(\\n      self,\\n      user,\\n      userMeasureBalance\\n    );\\n  }\\n\\n  function resetTotalDripped(State storage self) internal {\\n    self.totalDripped = 0;\\n  }\\n\\n  /// @notice Drips new tokens.\\n  /// @dev Should be called immediately before a change to the measure token's total supply\\n  /// @param self The balance drip state\\n  /// @param measureTotalSupply The measure token's last total supply (prior to any change)\\n  /// @param timestamp The current time\\n  /// @param maxNewTokens Maximum new tokens that can be dripped\\n  /// @return The number of new tokens dripped.\\n  function drip(\\n    State storage self,\\n    uint256 measureTotalSupply,\\n    uint256 timestamp,\\n    uint256 maxNewTokens\\n  ) internal returns (uint256) {\\n    // this should only run once per block.\\n    if (self.timestamp == uint32(timestamp)) {\\n      return 0;\\n    }\\n\\n    uint256 lastTime = self.timestamp == 0 ? timestamp : self.timestamp;\\n    uint256 newSeconds = timestamp.sub(lastTime);\\n\\n    uint112 exchangeRateMantissa = self.exchangeRateMantissa == 0 ? FixedPoint.SCALE.toUint112() : self.exchangeRateMantissa;\\n\\n    uint256 newTokens;\\n    if (newSeconds > 0 && self.dripRatePerSecond > 0) {\\n      newTokens = newSeconds.mul(self.dripRatePerSecond);\\n      if (newTokens > maxNewTokens) {\\n        newTokens = maxNewTokens;\\n      }\\n      uint256 indexDeltaMantissa = measureTotalSupply > 0 ? FixedPoint.calculateMantissa(newTokens, measureTotalSupply) : 0;\\n      exchangeRateMantissa = uint256(exchangeRateMantissa).add(indexDeltaMantissa).toUint112();\\n    }\\n\\n    self.exchangeRateMantissa = exchangeRateMantissa;\\n    self.totalDripped = uint256(self.totalDripped).add(newTokens).toUint112();\\n    self.timestamp = timestamp.toUint32();\\n\\n    return newTokens;\\n  }\\n\\n  function _captureNewTokensForUser(\\n    State storage self,\\n    address user,\\n    uint256 userMeasureBalance\\n  ) private returns (uint128) {\\n    UserState storage userState = self.userStates[user];\\n    uint256 lastExchangeRateMantissa = userState.lastExchangeRateMantissa;\\n    if (lastExchangeRateMantissa == 0) {\\n      // if the index is not intialized\\n      lastExchangeRateMantissa = FixedPoint.SCALE.toUint112();\\n    }\\n\\n    uint256 deltaExchangeRateMantissa = uint256(self.exchangeRateMantissa).sub(lastExchangeRateMantissa);\\n    uint128 newTokens = FixedPoint.multiplyUintByMantissa(userMeasureBalance, deltaExchangeRateMantissa).toUint128();\\n\\n    self.userStates[user] = UserState({\\n      lastExchangeRateMantissa: self.exchangeRateMantissa\\n    });\\n\\n    return newTokens;\\n  }\\n}\\n\",\"keccak256\":\"0xe4c0f5ce6e729dde8bee9f4dbcf2dfd495ba476c7a3840d5a11788baa62c0dd1\",\"license\":\"GPL-3.0\"},\"contracts/drip/BalanceDripManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"./BalanceDrip.sol\\\";\\n\\n/// @title Manages the lifecycle of a set of Balance Drips.\\nlibrary BalanceDripManager {\\n  using SafeMathUpgradeable for uint256;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n  using BalanceDrip for BalanceDrip.State;\\n\\n  struct State {\\n    mapping(address => MappedSinglyLinkedList.Mapping) activeBalanceDrips;\\n    mapping(address => mapping(address => BalanceDrip.State)) balanceDrips;\\n  }\\n\\n  /// @notice Activates a drip by setting it's state and adding it to the active balance drips list.\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param dripRatePerSecond The amount of the drip token to be dripped per second\\n  function activateDrip(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint256 dripRatePerSecond\\n  )\\n    internal\\n  {\\n    require(!self.activeBalanceDrips[measure].contains(dripToken), \\\"BalanceDripManager/drip-active\\\");\\n    if (self.activeBalanceDrips[measure].count == 0) {\\n      self.activeBalanceDrips[measure].initialize();\\n    }\\n    self.activeBalanceDrips[measure].addAddress(dripToken);\\n    self.balanceDrips[measure][dripToken].resetTotalDripped();\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\\n  }\\n\\n  /// @notice Deactivates an active balance drip.  The balance drip is removed from the active balance drips list.\\n  /// The drip rate for the balance drip will be set to zero to ensure it's \\\"frozen\\\".\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param prevDripToken The previous drip token previous in the list.\\n  /// If no previous, then pass the SENTINEL address: 0x0000000000000000000000000000000000000001\\n  /// @param currentTime The current time\\n  function deactivateDrip(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    address prevDripToken,\\n    uint32 currentTime,\\n    uint256 maxNewTokens\\n  )\\n    internal\\n  {\\n    self.activeBalanceDrips[measure].removeAddress(prevDripToken, dripToken);\\n    self.balanceDrips[measure][dripToken].drip(IERC20Upgradeable(measure).totalSupply(), currentTime, maxNewTokens);\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = 0;\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @return An array of Balance Drip token addresses\\n  function getActiveBalanceDrips(State storage self, address measure) internal view returns (address[] memory) {\\n    return self.activeBalanceDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Sets the drip rate for an active balance drip.\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param dripRatePerSecond The amount to drip of the token each second\\n  /// @param currentTime The current time.\\n  function setDripRate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint256 dripRatePerSecond,\\n    uint32 currentTime,\\n    uint256 maxNewTokens\\n  ) internal {\\n    require(self.activeBalanceDrips[measure].contains(dripToken), \\\"BalanceDripManager/drip-not-active\\\");\\n    self.balanceDrips[measure][dripToken].drip(IERC20Upgradeable(measure).totalSupply(), currentTime, maxNewTokens);\\n    self.balanceDrips[measure][dripToken].dripRatePerSecond = dripRatePerSecond;\\n  }\\n\\n  /// @notice Returns whether or not a drip is active for the given measure, dripToken pair\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @return True if there is an active balance drip for the pair, false otherwise\\n  function isDripActive(State storage self, address measure, address dripToken) internal view returns (bool) {\\n    return self.activeBalanceDrips[measure].contains(dripToken);\\n  }\\n\\n  /// @notice Returns the BalanceDrip.State for the given measure, dripToken pair\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @return The BalanceDrip.State for the pair\\n  function getDrip(State storage self, address measure, address dripToken) internal view returns (BalanceDrip.State storage) {\\n    return self.balanceDrips[measure][dripToken];\\n  }\\n}\\n\",\"keccak256\":\"0x6fcfdda6578439227ba8e1e5da6ac2b28a0e303626a7e3f4e9f20f94b485a5c8\",\"license\":\"GPL-3.0\"},\"contracts/drip/VolumeDrip.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"@pooltogether/fixed-point/contracts/FixedPoint.sol\\\";\\nimport \\\"../utils/ExtendedSafeCast.sol\\\";\\n\\nlibrary VolumeDrip {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeCastUpgradeable for uint256;\\n  using ExtendedSafeCast for uint256;\\n\\n  struct Deposit {\\n    uint112 balance;\\n    uint32 period;\\n  }\\n\\n  struct Period {\\n    uint112 totalSupply;\\n    uint112 dripAmount;\\n    uint32 endTime;\\n  }\\n\\n  struct State {\\n    mapping(address => Deposit) deposits;\\n    mapping(uint32 => Period) periods;\\n    uint32 nextPeriodSeconds;\\n    uint112 nextDripAmount;\\n    uint112 __gap;\\n    uint112 totalDripped;\\n    uint32 periodCount;\\n  }\\n\\n  function setNewPeriod(\\n    State storage self,\\n    uint32 _periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    internal\\n    minPeriod(_periodSeconds)\\n  {\\n    self.nextPeriodSeconds = _periodSeconds;\\n    self.nextDripAmount = dripAmount;\\n    self.totalDripped = 0;\\n    self.periodCount = uint256(self.periodCount).add(1).toUint16();\\n    self.periods[self.periodCount] = Period({\\n      totalSupply: 0,\\n      dripAmount: dripAmount,\\n      endTime: endTime\\n    });\\n  }\\n\\n  function setNextPeriod(\\n    State storage self,\\n    uint32 _periodSeconds,\\n    uint112 dripAmount\\n  )\\n    internal\\n    minPeriod(_periodSeconds)\\n  {\\n    self.nextPeriodSeconds = _periodSeconds;\\n    self.nextDripAmount = dripAmount;\\n  }\\n\\n  function drip(\\n    State storage self,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    if (_isPeriodOver(self, currentTime)) {\\n      return _completePeriod(self, currentTime, maxNewTokens);\\n    }\\n    return 0;\\n  }\\n\\n  function mint(\\n    State storage self,\\n    address user,\\n    uint256 amount\\n  )\\n    internal\\n    returns (uint256)\\n  {\\n    if (self.periodCount == 0) {\\n      return 0;\\n    }\\n    uint256 accrued = _lastBalanceAccruedAmount(self, self.deposits[user].period, self.deposits[user].balance);\\n    uint32 currentPeriod = self.periodCount;\\n    if (accrued > 0) {\\n      self.deposits[user] = Deposit({\\n        balance: amount.toUint112(),\\n        period: currentPeriod\\n      });\\n    } else {\\n      self.deposits[user] = Deposit({\\n        balance: uint256(self.deposits[user].balance).add(amount).toUint112(),\\n        period: currentPeriod\\n      });\\n    }\\n    self.periods[currentPeriod].totalSupply = uint256(self.periods[currentPeriod].totalSupply).add(amount).toUint112();\\n\\n    return accrued;\\n  }\\n\\n  function currentPeriod(State storage self) internal view returns (Period memory) {\\n    return self.periods[self.periodCount];\\n  }\\n\\n  function _isPeriodOver(State storage self, uint256 currentTime) private view returns (bool) {\\n    return currentTime >= self.periods[self.periodCount].endTime;\\n  }\\n\\n  function _completePeriod(\\n    State storage self,\\n    uint256 currentTime,\\n    uint256 maxNewTokens\\n  ) private onlyPeriodOver(self, currentTime) returns (uint256) {\\n    // calculate the actual drip amount\\n    uint112 dripAmount;\\n    // If no one deposited, then don't drip anything\\n    if (self.periods[self.periodCount].totalSupply > 0) {\\n      dripAmount = self.periods[self.periodCount].dripAmount;\\n    }\\n\\n    // if the drip amount is not valid, it has to be updated.\\n    if (dripAmount > maxNewTokens) {\\n      dripAmount = maxNewTokens.toUint112();\\n      self.periods[self.periodCount].dripAmount = dripAmount;\\n    }\\n\\n    // if we are completing the period far into the future, then we'll have skipped a lot of periods.\\n    // Here we set the end time so that it's the next period from *now*\\n    uint256 lastEndTime = self.periods[self.periodCount].endTime;\\n    uint256 numberOfPeriods = currentTime.sub(lastEndTime).div(self.nextPeriodSeconds).add(1);\\n    uint256 endTime = lastEndTime.add(numberOfPeriods.mul(self.nextPeriodSeconds));\\n    self.totalDripped = uint256(self.totalDripped).add(dripAmount).toUint112();\\n    self.periodCount = uint256(self.periodCount).add(1).toUint16();\\n\\n    self.periods[self.periodCount] = Period({\\n      totalSupply: 0,\\n      dripAmount: self.nextDripAmount,\\n      endTime: endTime.toUint32()\\n    });\\n\\n    return dripAmount;\\n  }\\n\\n  function _lastBalanceAccruedAmount(\\n    State storage self,\\n    uint32 depositPeriod,\\n    uint128 balance\\n  )\\n    private view\\n    returns (uint256)\\n  {\\n    uint256 accrued;\\n    if (depositPeriod < self.periodCount && self.periods[depositPeriod].totalSupply > 0) {\\n      uint256 fractionMantissa = FixedPoint.calculateMantissa(balance, self.periods[depositPeriod].totalSupply);\\n      accrued = FixedPoint.multiplyUintByMantissa(self.periods[depositPeriod].dripAmount, fractionMantissa);\\n    }\\n    return accrued;\\n  }\\n\\n  modifier onlyPeriodNotOver(State storage self, uint256 _currentTime) {\\n    require(!_isPeriodOver(self, _currentTime), \\\"VolumeDrip/period-over\\\");\\n    _;\\n  }\\n\\n  modifier onlyPeriodOver(State storage self, uint256 _currentTime) {\\n    require(_isPeriodOver(self, _currentTime), \\\"VolumeDrip/period-not-over\\\");\\n    _;\\n  }\\n\\n  modifier minPeriod(uint256 _periodSeconds) {\\n    require(_periodSeconds > 0, \\\"VolumeDrip/period-gt-zero\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x7ca2fc1f3e81aa4bbeaf193874e51a6ae38b5ed553320b5fa1cd4342a1db652c\",\"license\":\"GPL-3.0\"},\"contracts/drip/VolumeDripManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"../utils/MappedSinglyLinkedList.sol\\\";\\nimport \\\"./VolumeDrip.sol\\\";\\n\\n/// @title Manages the active set of Volume Drips.\\nlibrary VolumeDripManager {\\n  using SafeMathUpgradeable for uint256;\\n  using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n  using VolumeDrip for VolumeDrip.State;\\n\\n  struct State {\\n    mapping(address => MappedSinglyLinkedList.Mapping) activeVolumeDrips;\\n    mapping(address => mapping(address => VolumeDrip.State)) volumeDrips;\\n  }\\n\\n  /// @notice Activates a volume drip for the given (measure,dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param periodSeconds The period of the volume drip in seconds\\n  /// @param dripAmount The amount of tokens to drip each period\\n  /// @param endTime The end time to set for the current period.\\n  function activate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    uint32 periodSeconds,\\n    uint112 dripAmount,\\n    uint32 endTime\\n  )\\n    internal\\n    returns (uint32)\\n  {\\n    require(!self.activeVolumeDrips[measure].contains(dripToken), \\\"VolumeDripManager/drip-active\\\");\\n    if (self.activeVolumeDrips[measure].count == 0) {\\n      self.activeVolumeDrips[measure].initialize();\\n    }\\n    self.activeVolumeDrips[measure].addAddress(dripToken);\\n    self.volumeDrips[measure][dripToken].setNewPeriod(periodSeconds, dripAmount, endTime);\\n\\n    return self.volumeDrips[measure][dripToken].periodCount;\\n  }\\n\\n  /// @notice Deactivates the volume drip for the given (measure, dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param prevDripToken The active drip token previous to the passed on in the list.\\n  function deactivate(\\n    State storage self,\\n    address measure,\\n    address dripToken,\\n    address prevDripToken\\n  )\\n    internal\\n  {\\n    self.activeVolumeDrips[measure].removeAddress(prevDripToken, dripToken);\\n  }\\n\\n  /// @notice Gets a list of active balance drip tokens\\n  /// @param self The BalanceDripManager state\\n  /// @param measure The measure token\\n  /// @return An array of Balance Drip token addresses\\n  function getActiveVolumeDrips(State storage self, address measure) internal view returns (address[] memory) {\\n    return self.activeVolumeDrips[measure].addressArray();\\n  }\\n\\n  /// @notice Sets the parameters for the next period of an active volume drip\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  /// @param periodSeconds The length in seconds to use for the next period\\n  /// @param dripAmount The amount of tokens to be dripped in the next period\\n  function set(State storage self, address measure, address dripToken, uint32 periodSeconds, uint112 dripAmount) internal {\\n    require(self.activeVolumeDrips[measure].contains(dripToken), \\\"VolumeDripManager/drip-not-active\\\");\\n    self.volumeDrips[measure][dripToken].setNextPeriod(periodSeconds, dripAmount);\\n  }\\n\\n  /// @notice Returns whether or not an active volume drip exists for the given (measure, dripToken) pair\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  function isActive(State storage self, address measure, address dripToken) internal view returns (bool) {\\n    return self.activeVolumeDrips[measure].contains(dripToken);\\n  }\\n\\n  /// @notice Returns the VolumeDrip.State for the given (measure, dripToken) pair.\\n  /// @param self The VolumeDripManager state\\n  /// @param measure The measure token\\n  /// @param dripToken The drip token\\n  function getDrip(State storage self, address measure, address dripToken) internal view returns (VolumeDrip.State storage) {\\n    return self.volumeDrips[measure][dripToken];\\n  }\\n}\\n\",\"keccak256\":\"0xad583f66afe41253c170f25e3e596a0ef440eb7ff9822da94ca092dac5eb64e4\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenListener.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\nimport \\\"./TokenListenerInterface.sol\\\";\\nimport \\\"./TokenListenerLibrary.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\nabstract contract TokenListener is TokenListenerInterface {\\n  function supportsInterface(bytes4 interfaceId) external override view returns (bool) {\\n    return (\\n      interfaceId == Constants.ERC165_INTERFACE_ID_ERC165 || \\n      interfaceId == TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb0e98d10b004602e1d4f4369a70e6382002dc0c0c5713698eb6a92943aef2265\"},\"contracts/token/TokenListenerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\\ninterface TokenListenerInterface is IERC165Upgradeable {\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\n}\\n\",\"keccak256\":\"0x86b29792852503c80fc94e3040d1648f4c5bef59a3786582410db6d63de12a0a\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenListenerLibrary.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nlibrary TokenListenerLibrary {\\n  /*\\n    *     bytes4(keccak256('beforeTokenMint(address,uint256,address,address)')) == 0x4d7f3db0\\n    *     bytes4(keccak256('beforeTokenTransfer(address,address,uint256,address)')) == 0xb2210957\\n    *\\n    *     => 0x4d7f3db0 ^ 0xb2210957 == 0xff5e34e7\\n    */\\n  bytes4 public constant ERC165_INTERFACE_ID_TOKEN_LISTENER = 0xff5e34e7;\\n}\",\"keccak256\":\"0x3ed670015409e43fcf0fa2e4094e4fe171f0b99681dedfef81eeece34af4cfcd\"},\"contracts/utils/ExtendedSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nlibrary ExtendedSafeCast {\\n\\n  /**\\n    * @dev Converts an unsigned uint256 into a unsigned uint112.\\n    *\\n    * Requirements:\\n    *\\n    * - input must be less than or equal to maxUint112.\\n    */\\n  function toUint112(uint256 value) internal pure returns (uint112) {\\n    require(value < 2**112, \\\"SafeCast: value doesn't fit in an uint112\\\");\\n    return uint112(value);\\n  }\\n\\n  /**\\n    * @dev Converts an unsigned uint256 into a unsigned uint96.\\n    *\\n    * Requirements:\\n    *\\n    * - input must be less than or equal to maxUint96.\\n    */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    require(value < 2**96, \\\"SafeCast: value doesn't fit in an uint96\\\");\\n    return uint96(value);\\n  }\\n\\n}\",\"keccak256\":\"0x5d148bcc213678809ef19419650e351ecfa794708d6a168a7b2c10974f79f761\",\"license\":\"GPL-3.0\"},\"contracts/utils/MappedSinglyLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\n/// @notice An efficient implementation of a singly linked list of addresses\\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\\nlibrary MappedSinglyLinkedList {\\n\\n  /// @notice The special value address used to denote the end of the list\\n  address public constant SENTINEL = address(0x1);\\n\\n  /// @notice The data structure to use for the list.\\n  struct Mapping {\\n    uint256 count;\\n\\n    mapping(address => address) addressMap;\\n  }\\n\\n  /// @notice Initializes the list.\\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\\n  function initialize(Mapping storage self) internal {\\n    require(self.count == 0, \\\"Already init\\\");\\n    self.addressMap[SENTINEL] = SENTINEL;\\n  }\\n\\n  function start(Mapping storage self) internal view returns (address) {\\n    return self.addressMap[SENTINEL];\\n  }\\n\\n  function next(Mapping storage self, address current) internal view returns (address) {\\n    return self.addressMap[current];\\n  }\\n\\n  function end(Mapping storage) internal pure returns (address) {\\n    return SENTINEL;\\n  }\\n\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      addAddress(self, addresses[i]);\\n    }\\n  }\\n\\n  /// @notice Adds an address to the front of the list.\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param newAddress The address to shift to the front of the list\\n  function addAddress(Mapping storage self, address newAddress) internal {\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[newAddress] == address(0), \\\"Already added\\\");\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\n    self.addressMap[SENTINEL] = newAddress;\\n    self.count = self.count + 1;\\n  }\\n\\n  /// @notice Removes an address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\\n  /// @param addr The address to remove from the list.\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\n    require(addr != SENTINEL && addr != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[prevAddress] == addr, \\\"Invalid prevAddress\\\");\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\n    delete self.addressMap[addr];\\n    self.count = self.count - 1;\\n  }\\n\\n  /// @notice Determines whether the list contains the given address\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param addr The address to check\\n  /// @return True if the address is contained, false otherwise.\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\n  }\\n\\n  /// @notice Returns an address array of all the addresses in this list\\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @return An array of all the addresses\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\n    address[] memory array = new address[](self.count);\\n    uint256 count;\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      array[count] = currentAddress;\\n      currentAddress = self.addressMap[currentAddress];\\n      count++;\\n    }\\n    return array;\\n  }\\n\\n  /// @notice Removes every address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  function clearAll(Mapping storage self) internal {\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      address nextAddress = self.addressMap[currentAddress];\\n      delete self.addressMap[currentAddress];\\n      currentAddress = nextAddress;\\n    }\\n    self.addressMap[SENTINEL] = SENTINEL;\\n    self.count = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x3c5c76537d0fdf5b623761bd57e752743324401228bb076688228955da70da54\",\"license\":\"GPL-3.0\"},\"contracts/utils/UInt256Array.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nlibrary UInt256Array {\\n  function remove(uint256[] storage self, uint256 index) internal {\\n    require(index < self.length, \\\"UInt256Array/unknown-index\\\");\\n    self[index] = self[self.length-1];\\n    delete self[self.length-1];\\n    self.pop();\\n  }\\n}\",\"keccak256\":\"0x8df0258f6081854503fc8f58ac1487cf863db220329cef61b8c3083fe5fee899\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620002b0565b600054610100900460ff16806200003e57506200003e620000cb565b806200004d575060005460ff16155b620000755760405162461bcd60e51b81526004016200006c9062000262565b60405180910390fd5b600054610100900460ff16158015620000a1576000805460ff1961ff0019909116610100171660011790555b620000ab620000e9565b620000b562000173565b8015620000c8576000805461ff00191690555b50565b6000620000e3306200025860201b62001a6e1760201c565b15905090565b600054610100900460ff168062000105575062000105620000cb565b8062000114575060005460ff16155b620001335760405162461bcd60e51b81526004016200006c9062000262565b600054610100900460ff16158015620000b5576000805460ff1961ff0019909116610100171660011790558015620000c8576000805461ff001916905550565b600054610100900460ff16806200018f57506200018f620000cb565b806200019e575060005460ff16155b620001bd5760405162461bcd60e51b81526004016200006c9062000262565b600054610100900460ff16158015620001e9576000805460ff1961ff0019909116610100171660011790555b6000620001f56200025e565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015620000c8576000805461ff001916905550565b3b151590565b3390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6149b480620002c06000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063ce730461116100a2578063e5f83b7011610071578063e5f83b7014610405578063e72edc2814610418578063f28219ac14610438578063f2fde38b1461044b576101cf565b8063ce730461146103b9578063d7840aad146103cc578063e2937c77146103df578063e37288ec146103f2576101cf565b80639aebef23116100de5780639aebef231461035e578063b221095714610380578063b7e6810a14610393578063c35185df146103a6576101cf565b8063715018a61461032e57806384f8f31c146103365780638da5cb5b14610349576101cf565b80633a6c8a2c11610171578063503bd4801161014b578063503bd480146102d35780635d68ae22146102e65780635e19bad5146102f9578063626e76b41461030c576101cf565b80633a6c8a2c1461027e57806343fcacd01461029e5780634d7f3db0146102c0576101cf565b80631dc2d7a4116101ad5780631dc2d7a4146102255780632697a1a91461023857806334de6d19146102585780633632c1f41461026b576101cf565b806301ffc9a7146101d4578063078d3b79146101fd5780631a6eae6714610212575b600080fd5b6101e76101e23660046141a4565b61045e565b6040516101f491906142d1565b60405180910390f35b61021061020b366004613e82565b610498565b005b610210610220366004614094565b6105b1565b610210610233366004614109565b610684565b61024b610246366004613e38565b6106e8565b6040516101f4919061422c565b610210610266366004613e82565b610742565b610210610279366004614061565b6108c3565b61029161028c366004614094565b610965565b6040516101f49190614279565b6102b16102ac366004613c49565b6109a6565b6040516101f493929190614892565b6102106102ce366004613f56565b610ae0565b6102106102e1366004613de8565b610cc8565b6102106102f4366004613de8565b610d95565b610210610307366004613b30565b610e45565b61031f61031a366004613b87565b610e90565b6040516101f4939291906148e9565b610210611001565b610210610344366004613d48565b61108a565b6103516111e5565b6040516101f491906141ff565b61037161036c366004613aeb565b6111f4565b6040516101f4939291906148c4565b61021061038e366004613ec2565b61124b565b6102106103a1366004614061565b611449565b6102106103b4366004613cbc565b61153e565b6102916103c7366004613f8b565b611633565b6101e76103da366004613b87565b61170f565b6102106103ed366004613bdf565b61176c565b610210610400366004613f09565b6117b8565b61024b610413366004613ab7565b611845565b61042b610426366004613ab7565b61186a565b6040516101f491906148bb565b610291610446366004613f09565b611896565b610210610459366004613a9c565b6119ad565b60006001600160e01b031982166301ffc9a760e01b148061049257506001600160e01b03198216600162a1cb1960e01b0319145b92915050565b6104a0611a74565b6001600160a01b03166104b16111e5565b6001600160a01b0316146104e05760405162461bcd60e51b81526004016104d790614713565b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061050e9085908590600401614213565b602060405180830381600087803b15801561052857600080fd5b505af115801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190614188565b50816001600160a01b0316836001600160a01b03167f175984d55e63e57889870f617ac3d775087f5bf4e22126f7ae4145152113d79c836040516105a491906148bb565b60405180910390a3505050565b60005b835181101561067e576105c56138f5565b8482815181106105d157fe5b60200260200101519050600081602001516001600160a01b03166370a08231866040518263ffffffff1660e01b815260040161060d91906141ff565b60206040518083038186803b15801561062557600080fd5b505afa158015610639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065d91906141e7565b905061067482600001518360200151878488611a78565b50506001016105b4565b50505050565b60005b84518110156106e1576106986138f5565b8582815181106106a457fe5b602002602001015190506106c381600001518260200151878787611b08565b6106d881600001518260200151878787611b80565b50600101610687565b5050505050565b60608115610719576001600160a01b03841660009081526066602052604090206107129084611bfc565b905061073b565b6001600160a01b03841660009081526065602052604090206107129084611bfc565b9392505050565b600061074c611a74565b6001600160a01b0384166000908152606860205260409020549091506107729083611c20565b6001600160a01b038085166000908152606860209081526040808320949094556069815283822092881682529190915220546107ae9083611c20565b6001600160a01b038085166000818152606960209081526040808320948a168352939052829020929092555163a9059cbb60e01b815263a9059cbb906107fa9087908690600401614213565b602060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190614188565b6108685760405162461bcd60e51b81526004016104d7906145d7565b836001600160a01b0316836001600160a01b0316826001600160a01b03167f76db671dc988a5ba4764a06da6bfc2a6a8df0d7d373cc205a687084b4a8492f0856040516108b591906148bb565b60405180910390a450505050565b60005b8151811015610961576108d76138f5565b8282815181106108e357fe5b6020026020010151905061092a6065600083600001516001600160a01b03166001600160a01b03168152602001908152602001600020826000015183602001516000611c48565b80516001600160a01b0316600090815260666020908152604090912082519183015161095892906001611c48565b506001016108c6565b5050565b606061097084611449565b61097b8484846105b1565b610984846108c3565b6109918484600085610684565b606061099d8484611896565b95945050505050565b60008060006109b361390c565b8515610a4057506001600160a01b0380891660009081526066602090815260408083208b8516845260019081018352818420948b16845293825280832061ffff89168452909301815290829020825160608101845290546001600160701b038082168352600160701b82041692820192909252600160e01b90910463ffffffff1691810191909152610ac3565b506001600160a01b0380891660009081526065602090815260408083208b8516845260019081018352818420948b16845293825280832061ffff89168452909301815290829020825160608101845290546001600160701b038082168352600160701b82041692820192909252600160e01b90910463ffffffff16918101919091525b80516020820151604090920151909a919950975095505050505050565b6000610aea611a74565b90506000836001600160a01b03166370a08231876040518263ffffffff1660e01b8152600401610b1a91906141ff565b60206040518083038186803b158015610b3257600080fd5b505afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a91906141e7565b90506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba757600080fd5b505afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf91906141e7565b90506060610bed8487611f32565b6001600160a01b0385166000908152606760205260409020909150610c1c90858885610c17611f63565b611f67565b610c2984878a8685611a78565b6060610c35858861208b565b6001600160a01b0386166000908152606560205260408120919250610c5e919087908a90611c48565b610c6b85888b8b85611b08565b6001600160a01b03861615610cbd576060610c8686896120bc565b6001600160a01b0387166000908152606660205260409020909150610cae90878a6001611c48565b610cbb8689898c85611b80565b505b505050505050505050565b610cd0611a74565b6001600160a01b0316610ce16111e5565b6001600160a01b031614610d075760405162461bcd60e51b81526004016104d790614713565b610d48838383610d1d610d18611f63565b6120ed565b610d2687612117565b6001600160a01b038a16600090815260676020526040902094939291906121ca565b816001600160a01b0316836001600160a01b0316856001600160a01b03167f1198b38b5e10d4b1e4cd2866dd9bc4e71e32c649b6ff51addd64e01fb6a6d5ad846040516108b591906148bb565b610d9d611a74565b6001600160a01b0316610dae6111e5565b6001600160a01b031614610dd45760405162461bcd60e51b81526004016104d790614713565b6001600160a01b0384166000908152606760205260409020610df8908484846122e6565b816001600160a01b0316836001600160a01b0316856001600160a01b03167f4cf47603ce110cd8061678afe77c525be4ca073f4640f629292afcef7be49259846040516108b591906148bb565b610e4d611a74565b6001600160a01b0316610e5e6111e5565b6001600160a01b031614610e845760405162461bcd60e51b81526004016104d790614713565b61067e848484846123e3565b6000806000610e9d61392c565b8415610f3d57506001600160a01b0380881660009081526066602090815260408083208a851684526001018252808320938916835292815290829020825160a081018452600282015463ffffffff80821683526001600160701b036401000000008304811695840195909552600160901b9091048416948201949094526003909101549182166060820152600160701b9091049091166080820152610fd3565b506001600160a01b0380881660009081526065602090815260408083208a851684526001018252808320938916835292815290829020825160a081018452600282015463ffffffff80821683526001600160701b036401000000008304811695840195909552600160901b9091048416948201949094526003909101549182166060820152600160701b90910490911660808201525b8051602082015160809092015163ffffffff9182169a6001600160701b039093169950169650945050505050565b611009611a74565b6001600160a01b031661101a6111e5565b6001600160a01b0316146110405760405162461bcd60e51b81526004016104d790614713565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b611092611a74565b6001600160a01b03166110a36111e5565b6001600160a01b0316146110c95760405162461bcd60e51b81526004016104d790614713565b600084156110fe576001600160a01b03881660009081526066602052604090206110f790888887878761246f565b9050611127565b6001600160a01b038816600090815260656020526040902061112490888887878761246f565b90505b856001600160a01b0316876001600160a01b0316896001600160a01b03167f0ee63f5b7633ec1ad321f6f89b83ec0993c2cc680112d7b153759242a655ed43888888604051611178939291906142fd565b60405180910390a4856001600160a01b0316876001600160a01b0316896001600160a01b03167f5030027163f1655f8ac4c205c22bfe42c59f83e61a7c15da775499920b214314888588886040516111d39493929190614350565b60405180910390a45050505050505050565b6033546001600160a01b031690565b6001600160a01b038316600090815260676020526040812081908190819061121d908787612582565b805460019091015490986001600160701b0382169850600160e01b90910463ffffffff169650945050505050565b6001600160a01b03841661125e5761067e565b6000611268611a74565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a557600080fd5b505afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd91906141e7565b90506000836001600160a01b03166370a08231886040518263ffffffff1660e01b815260040161130d91906141ff565b60206040518083038186803b15801561132557600080fd5b505afa158015611339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135d91906141e7565b9050606061136b8486611f32565b6001600160a01b038516600090815260676020526040902090915061139590858786610c17611f63565b6113a284868a8585611a78565b6001600160a01b0387161561143f576040516370a0823160e01b81526000906001600160a01b038716906370a08231906113e0908b906004016141ff565b60206040518083038186803b1580156113f857600080fd5b505afa15801561140c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143091906141e7565b9050610cbd85878a8486611a78565b5050505050505050565b6000611453611f63565b905060005b8251811015611539576114696138f5565b83828151811061147557fe5b602002602001015190506115306067600083600001516001600160a01b03166001600160a01b031681526020019081526020016000208260000151836020015184602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114f257600080fd5b505afa158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a91906141e7565b87611f67565b50600101611458565b505050565b611546611a74565b6001600160a01b03166115576111e5565b6001600160a01b03161461157d5760405162461bcd60e51b81526004016104d790614713565b82156115ad576001600160a01b03861660009081526066602052604090206115a890868685856125ae565b6115d2565b6001600160a01b03861660009081526065602052604090206115d290868685856125ae565b836001600160a01b0316856001600160a01b0316876001600160a01b03167f401facfe78ba5adec5aae1404afebf8e3a77cb5dfdf5b4b611504d626d9a2ed5868686604051611623939291906142fd565b60405180910390a4505050505050565b6060806116c68787808060200260200160405190810160405280939291908181526020016000905b8282101561168757611678604083028601368190038101906141cc565b8152602001906001019061165b565b50505050508686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061096592505050565b9050611705858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506117b892505050565b9695505050505050565b60008115611741576001600160a01b038516600090815260666020526040902061173a90858561261e565b9050611764565b6001600160a01b038516600090815260656020526040902061173a90858561261e565b949350505050565b611774611a74565b6001600160a01b03166117856111e5565b6001600160a01b0316146117ab5760405162461bcd60e51b81526004016104d790614713565b6106e18585858585612640565b60005b81518110156115395761183d838383815181106117d457fe5b6020026020010151606960008686815181106117ec57fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002054610742565b6001016117bb565b6001600160a01b038216600090815260676020526040902060609061073b9083611bfc565b6001600160a01b0380821660009081526069602090815260408083209386168352929052205492915050565b606080825167ffffffffffffffff811180156118b157600080fd5b506040519080825280602002602001820160405280156118eb57816020015b6118d86138f5565b8152602001906001900390816118d05790505b50905060005b83518110156119a557604051806040016040528085838151811061191157fe5b60200260200101516001600160a01b031681526020016069600087858151811061193757fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000205481525082828151811061199257fe5b60209081029190910101526001016118f1565b509392505050565b6119b5611a74565b6001600160a01b03166119c66111e5565b6001600160a01b0316146119ec5760405162461bcd60e51b81526004016104d790614713565b6001600160a01b038116611a125760405162461bcd60e51b81526004016104d7906144a5565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3b151590565b3390565b60005b8151811015611b00576000828281518110611a9257fe5b6020908102919091018101516001600160a01b03808a1660009081526067845260408082208b841683526001908101865281832093851683529290945292909220918201549092506001600160701b031615611af657611af6818989858a8a6126ef565b5050600101611a7b565b505050505050565b60005b8151811015611b00576000828281518110611b2257fe5b6020908102919091018101516001600160a01b03808a1660009081526065845260408082208b841683526001018552808220928416825291909352822090925090611b769082908a908a9086908b8b612779565b5050600101611b0b565b60005b8151811015611b00576000828281518110611b9a57fe5b6020908102919091018101516001600160a01b03808a1660009081526066845260408082208b84168352600190810186528183209385168352929094529290922090925090611bf29082908a908a9086908b8b612779565b5050600101611b83565b6001600160a01b038116600090815260208390526040902060609061073b906127eb565b600082821115611c425760405162461bcd60e51b81526004016104d7906145a0565b50900390565b6001600160a01b0382166000908152602085905260408120611c69906128cb565b90506000611c75611f63565b6001600160a01b038516600090815260208890526040812091925090611c9a906128d1565b90505b6001600160a01b03811615801590611ce757506001600160a01b0385166000908152602088905260409020611cd1906128cb565b6001600160a01b0316816001600160a01b031614155b15611f29576001600160a01b0380861660009081526001890160209081526040808320938516835292905290812090611d1f83612117565b600383015490915063ffffffff600160701b909104811690600090611d4a908590889086906128ee16565b600385015490915063ffffffff838116600160701b9092041614611ee05763ffffffff82166000908152600185016020526040908190205490516001600160a01b03808816928c821692918e16917f5af66de08c3f6079fb9df0df086b4866eef80830affd2db8a278a87a3c98317891611dd5918e9189916001600160701b03909116908990614324565b60405180910390a4846001600160a01b0316896001600160a01b03168b6001600160a01b03167f5030027163f1655f8ac4c205c22bfe42c59f83e61a7c15da775499920b2143148b88600301600e9054906101000a900463ffffffff168960010160008b600301600e9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020600001600e9054906101000a90046001600160701b03168a60010160008c600301600e9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020600001601c9054906101000a900463ffffffff16604051611ed79493929190614350565b60405180910390a45b8083148015611ef657611ef68b8b888c8c612640565b6001600160a01b038a16600090815260208d9052604090209597508795611f1d9087612914565b95505050505050611c9d565b50505050505050565b6001600160a01b03808316600090815260676020908152604080832093851683529290522060609061073b906127eb565b4290565b6001600160a01b0383166000908152602086905260408120611f88906128cb565b6001600160a01b038516600090815260208890526040812091925090611fad906128d1565b90505b6001600160a01b03811615801590611ffa57506001600160a01b0385166000908152602088905260409020611fe4906128cb565b6001600160a01b0316816001600160a01b031614155b15611f29576001600160a01b038086166000908152600189016020908152604080832093851683529290529081209061203283612117565b9050600061204283888885612937565b90508181148015612059576120598a8a87896123e3565b6001600160a01b038916600090815260208c90526040902094955085946120809086612914565b945050505050611fb0565b6001600160a01b03808316600090815260656020908152604080832093851683529290522060609061073b906127eb565b6001600160a01b03808316600090815260666020908152604080832093851683529290522060609061073b906127eb565b600064010000000082106121135760405162461bcd60e51b81526004016104d7906147de565b5090565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161214691906141ff565b60206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219691906141e7565b6001600160a01b0384166000908152606860205260409020549091508181106121c0576000611764565b6117648282611c20565b6001600160a01b03851660009081526020879052604090206121ec9085612ae7565b6122085760405162461bcd60e51b81526004016104d790614690565b6122b5856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561224457600080fd5b505afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c91906141e7565b6001600160a01b03808816600090815260018a0160209081526040808320938a168352929052209063ffffffff80861690859061293716565b5050506001600160a01b03928316600090815260019094016020908152604080862093909416855291909152912055565b6001600160a01b03831660009081526020859052604090206123089083612ae7565b156123255760405162461bcd60e51b81526004016104d7906143d2565b6001600160a01b038316600090815260208590526040902054612363576001600160a01b038316600090815260208590526040902061236390612b38565b6001600160a01b03831660009081526020859052604090206123859083612b7c565b6001600160a01b03808416600090815260018601602090815260408083209386168352929052206123b590612c44565b6001600160a01b03928316600090815260019094016020908152604080862093909416855291909152912055565b61241f8383836123f4610d18611f63565b6123fd87612117565b6001600160a01b038a1660009081526067602052604090209493929190612c5a565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fbbd41ee308597dd699317716979d8ce8edde7cdde9471c26bfab7752e1186c9460405160405180910390a450505050565b6001600160a01b03851660009081526020879052604081206124919086612ae7565b156124ae5760405162461bcd60e51b81526004016104d79061485b565b6001600160a01b0386166000908152602088905260409020546124ec576001600160a01b03861660009081526020889052604090206124ec90612b38565b6001600160a01b038616600090815260208890526040902061250e9086612b7c565b6001600160a01b038087166000908152600189016020908152604080832093891683529290522061254190858585612ce9565b505050506001600160a01b0391821660009081526001939093016020908152604080852092909316845252902060030154600160701b900463ffffffff1690565b6001600160a01b0391821660009081526001939093016020908152604080852092909316845252902090565b6001600160a01b03841660009081526020869052604090206125d09084612ae7565b6125ec5760405162461bcd60e51b81526004016104d790614618565b6001600160a01b03808516600090815260018701602090815260408083209387168352929052206106e1908383612e35565b6001600160a01b03821660009081526020849052604081206117649083612ae7565b811561266f576001600160a01b038516600090815260666020526040902061266a90858584612ea4565b612693565b6001600160a01b038516600090815260656020526040902061269390858584612ea4565b826001600160a01b0316846001600160a01b0316866001600160a01b03167f9684c938581734d57a998217c38505f0c4fc95afd0af9da2c97b9822ee7a66c8856040516126e091906142d1565b60405180910390a45050505050565b60006126fc878484612ec7565b6001600160801b031690508015611f2957612718848483612ed4565b50836001600160a01b0316856001600160a01b0316876001600160a01b03167f782be3085b3ef7b927740f3ed02f7393ee3f20b8fe87595484dbf65c5be4230d8685604051612768929190614213565b60405180910390a450505050505050565b6000612786888484612fc6565b9050801561143f57612799858483612ed4565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f06c65e2aee0f9ad46bde72ca6800e5b29333356dc073eba0e3995ffc980148f78787866040516111d3939291906142dc565b606080826000015467ffffffffffffffff8111801561280957600080fd5b50604051908082528060200260200182016040528015612833578160200160208202803683370190505b50600160008181529085016020526040812054919250906001600160a01b03165b6001600160a01b0381161580159061287657506001600160a01b038116600114155b156128c2578083838151811061288857fe5b6001600160a01b03928316602091820292909201810191909152918116600090815260018088019093526040902054929091019116612854565b50909392505050565b50600190565b60016000818152910160205260409020546001600160a01b031690565b60006128fa84846131d4565b1561290a5761071284848461320a565b5060009392505050565b6001600160a01b0380821660009081526001840160205260409020541692915050565b600184015460009063ffffffff848116600160e01b90920416141561295e57506000611764565b6001850154600090600160e01b900463ffffffff161561298f576001860154600160e01b900463ffffffff16612991565b835b9050600061299f8583611c20565b60018801549091506000906001600160701b0316156129cb5760018801546001600160701b03166129dc565b6129dc670de0b6b3a76400006134da565b9050600080831180156129ef5750885415155b15612a49578854612a019084906134ff565b905085811115612a0e5750845b6000808911612a1e576000612a28565b612a28828a613539565b9050612a45612a406001600160701b0385168361355a565b6134da565b9250505b6001890180546001600160701b0319166001600160701b038481169190911791829055612a8391612a4091600160701b909104168361355a565b89600101600e6101000a8154816001600160701b0302191690836001600160701b03160217905550612ab4876120ed565b60018a01805463ffffffff92909216600160e01b026001600160e01b039092169190911790559350505050949350505050565b60006001600160a01b038216600114801590612b0b57506001600160a01b03821615155b801561073b5750506001600160a01b03908116600090815260019290920160205260409091205416151590565b805415612b575760405162461bcd60e51b81526004016104d790614748565b60016000818152918101602052604090912080546001600160a01b0319169091179055565b6001600160a01b038116600114801590612b9e57506001600160a01b03811615155b612bba5760405162461bcd60e51b81526004016104d79061444f565b6001600160a01b0381811660009081526001840160205260409020541615612bf45760405162461bcd60e51b81526004016104d7906147b7565b60016000818152838201602052604080822080546001600160a01b039586168085529284208054969091166001600160a01b03199687161790559183905281549093169092179091558154019055565b6001018054600160701b600160e01b0319169055565b6001600160a01b0385166000908152602087905260409020612c7d90848661357f565b612cb9856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561224457600080fd5b505050506001600160a01b0391821660009081526001939093016020908152604080852092909316845252812055565b8263ffffffff1660008111612d105760405162461bcd60e51b81526004016104d7906144eb565b60028501805463ffffffff191663ffffffff86811691909117640100000000600160901b0319166401000000006001600160701b03871602179091556003860180546001600160701b03191690819055612d8091612d7b91600160701b900481169060019061355a16565b613649565b60038601805463ffffffff60701b191661ffff92909216600160701b90810292909217908190556040805160608101825260008082526001600160701b03978816602080840191825263ffffffff98891684860190815295879004891683526001909b01909a529190912090518154985192516001600160701b031990991690871617600160701b600160e01b03191691909516909102176001600160e01b0316600160e01b95909216949094021790555050565b8163ffffffff1660008111612e5c5760405162461bcd60e51b81526004016104d7906144eb565b50600290920180546001600160701b0390931664010000000002640100000000600160901b031963ffffffff90931663ffffffff199094169390931791909116919091179055565b6001600160a01b038316600090815260208590526040902061067e90828461357f565b600061176484848461366d565b600080612ee085612117565b90506000818411612ef15783612ef3565b815b6001600160a01b038716600090815260686020526040902054909150612f19908261355a565b6001600160a01b03808816600090815260686020908152604080832094909455606981528382209289168252919091522054612f55908261355a565b6001600160a01b038088166000818152606960209081526040808320948b1680845294909152908190209390935591519091907f0f3ed8b918f23095606f705f6253b10267861573421cf05301b0f1f006c92b4490612fb59085906148bb565b60405180910390a395945050505050565b6003830154600090600160701b900463ffffffff16612fe75750600061073b565b6001600160a01b03831660009081526020859052604081205461302290869063ffffffff600160701b820416906001600160701b031661374d565b6003860154909150600160701b900463ffffffff1681156130bd576040518060400160405280613051866134da565b6001600160701b03908116825263ffffffff8085166020938401526001600160a01b03891660009081528a845260409020845181549590940151909116600160701b0263ffffffff60701b19939092166001600160701b03199094169390931791909116179055613160565b6040805180820182526001600160a01b03871660009081526020899052919091205481906130f890612a40906001600160701b03168861355a565b6001600160701b03908116825263ffffffff8085166020938401526001600160a01b03891660009081528a845260409020845181549590940151909116600160701b0263ffffffff60701b19939092166001600160701b031990941693909317919091161790555b63ffffffff808216600090815260018801602052604090205461319391612a40916001600160701b031690879061355a16565b63ffffffff9091166000908152600187016020526040902080546001600160701b03929092166001600160701b031990921691909117905590509392505050565b600382015463ffffffff600160701b90910481166000908152600184016020526040902054600160e01b90041681101592915050565b6000838361321882826131d4565b6132345760405162461bcd60e51b81526004016104d790614824565b6003860154600160701b900463ffffffff1660009081526001870160205260408120546001600160701b03161561329657506003860154600160701b9081900463ffffffff166000908152600188016020526040902054046001600160701b03165b84816001600160701b031611156132f9576132b0856134da565b6003880154600160701b9081900463ffffffff16600090815260018a01602052604090208054600160701b600160e01b0319166001600160701b03841690920291909117905590505b600387015463ffffffff600160701b909104811660009081526001808a01602052604082205460028b0154600160e01b9091048416936133569291613350919081169061334a908d908890611c2016565b90613804565b9061355a565b60028a01549091506000906133819061337a90849063ffffffff908116906134ff16565b849061355a565b60038b01549091506133a490612a40906001600160701b0390811690871661355a565b60038b0180546001600160701b0319166001600160701b039290921691909117908190556133e990612d7b90600160701b900463ffffffff9081169060019061355a16565b60038b01805463ffffffff60701b191661ffff92909216600160701b02919091179055604080516060810182526000815260028c01546001600160701b03640100000000909104166020820152908101613442836120ed565b63ffffffff90811690915260038c0154600160701b908190048216600090815260018e01602090815260409182902085518154928701519690930151909416600160e01b026001600160e01b036001600160701b03968716909402600160701b600160e01b03199387166001600160701b03199093169290921792909216179190911617905593909316955050505050509392505050565b6000600160701b82106121135760405162461bcd60e51b81526004016104d79061476e565b60008261350e57506000610492565b8282028284828161351b57fe5b041461073b5760405162461bcd60e51b81526004016104d7906146d2565b60008061354e84670de0b6b3a76400006134ff565b90506117648184613836565b60008282018381101561073b5760405162461bcd60e51b81526004016104d790614522565b6001600160a01b0381166001148015906135a157506001600160a01b03811615155b6135bd5760405162461bcd60e51b81526004016104d79061444f565b6001600160a01b0382811660009081526001850160205260409020548116908216146135fb5760405162461bcd60e51b81526004016104d790614478565b6001600160a01b039081166000818152600185016020526040808220805495851683529082208054959094166001600160a01b03199586161790935552805490911690558054600019019055565b60006201000082106121135760405162461bcd60e51b81526004016104d790614409565b6001600160a01b0382166000908152600284016020526040812080546001600160801b0316806136b4576136a8670de0b6b3a76400006134da565b6001600160701b031690505b60018601546000906136cf906001600160701b031683611c20565b905060006136e56136e08784613878565b613899565b604080516020808201835260018c01546001600160701b031682526001600160a01b039a909a1660009081526002909b01909952909820965187546fffffffffffffffffffffffffffffffff19166001600160801b0390911617909655509495945050505050565b6003830154600090819063ffffffff600160701b9091048116908516108015613795575063ffffffff841660009081526001860160205260409020546001600160701b031615155b156117645763ffffffff841660009081526001860160205260408120546137cf906001600160801b038616906001600160701b0316613539565b63ffffffff8616600090815260018801602052604090205490915061170590600160701b90046001600160701b031682613878565b60008082116138255760405162461bcd60e51b81526004016104d790614659565b81838161382e57fe5b049392505050565b600061073b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506138be565b60008061388583856134ff565b905061176481670de0b6b3a7640000613836565b6000600160801b82106121135760405162461bcd60e51b81526004016104d790614559565b600081836138df5760405162461bcd60e51b81526004016104d7919061437f565b5060008385816138eb57fe5b0495945050505050565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b80356001600160a01b038116811461049257600080fd5b600082601f830112613981578081fd5b813561399461398f82614926565b6148ff565b8181529150602080830190848101818402860182018710156139b557600080fd5b60005b848110156139dc576139ca888361395a565b845292820192908201906001016139b8565b505050505092915050565b600082601f8301126139f7578081fd5b8135613a0561398f82614926565b8181529150602080830190848101604080850287018301881015613a2857600080fd5b60005b85811015613a4f57613a3d8984613a5b565b85529383019391810191600101613a2b565b50505050505092915050565b600060408284031215613a6c578081fd5b613a7660406148ff565b9050613a82838361395a565b8152613a91836020840161395a565b602082015292915050565b600060208284031215613aad578081fd5b61073b838361395a565b60008060408385031215613ac9578081fd5b613ad3848461395a565b9150613ae2846020850161395a565b90509250929050565b600080600060608486031215613aff578081fd5b613b09858561395a565b9250613b18856020860161395a565b9150613b27856040860161395a565b90509250925092565b60008060008060808587031215613b45578081fd5b613b4f868661395a565b9350613b5e866020870161395a565b9250613b6d866040870161395a565b9150613b7c866060870161395a565b905092959194509250565b60008060008060808587031215613b9c578384fd5b613ba6868661395a565b9350613bb5866020870161395a565b9250613bc4866040870161395a565b91506060850135613bd48161495e565b939692955090935050565b600080600080600060a08688031215613bf6578081fd5b613c00878761395a565b9450613c0f876020880161395a565b9350613c1e876040880161395a565b92506060860135613c2e8161495e565b9150613c3d876080880161395a565b90509295509295909350565b600080600080600060a08688031215613c60578081fd5b613c6a878761395a565b9450613c79876020880161395a565b9350613c88876040880161395a565b92506060860135613c988161495e565b9150608086013561ffff81168114613cae578182fd5b809150509295509295909350565b60008060008060008060c08789031215613cd4578384fd5b8635613cdf81614946565b95506020870135613cef81614946565b94506040870135613cff81614946565b93506060870135613d0f8161495e565b92506080870135613d1f8161496c565b915060a08701356001600160701b0381168114613d3a578182fd5b809150509295509295509295565b600080600080600080600060e0888a031215613d62578485fd5b8735613d6d81614946565b96506020880135613d7d81614946565b95506040880135613d8d81614946565b94506060880135613d9d8161495e565b93506080880135613dad8161496c565b925060a08801356001600160701b0381168114613dc8578182fd5b915060c0880135613dd88161496c565b8091505092959891949750929550565b60008060008060808587031215613dfd578182fd5b8435613e0881614946565b93506020850135613e1881614946565b92506040850135613e2881614946565b9396929550929360600135925050565b600080600060608486031215613e4c578081fd5b8335613e5781614946565b92506020840135613e6781614946565b91506040840135613e778161495e565b809150509250925092565b600080600060608486031215613e96578081fd5b8335613ea181614946565b92506020840135613eb181614946565b929592945050506040919091013590565b60008060008060808587031215613ed7578182fd5b8435613ee281614946565b93506020850135613ef281614946565b9250604085013591506060850135613bd481614946565b60008060408385031215613f1b578182fd5b613f25848461395a565b9150602083013567ffffffffffffffff811115613f40578182fd5b613f4c85828601613971565b9150509250929050565b60008060008060808587031215613f6b578182fd5b613f75868661395a565b935060208501359250613b6d866040870161395a565b600080600080600060608688031215613fa2578283fd5b853567ffffffffffffffff80821115613fb9578485fd5b818801915088601f830112613fcc578485fd5b813581811115613fda578586fd5b60208a81604084028601011115613fef578687fd5b80840198508197506140038b828c0161395a565b965060408a0135935082841115614018578485fd5b838a0193508a601f85011261402b578485fd5b833591508282111561403b578485fd5b8a81828402860101111561404d578485fd5b979a96995094975050909401935090919050565b600060208284031215614072578081fd5b813567ffffffffffffffff811115614088578182fd5b611764848285016139e7565b6000806000606084860312156140a8578081fd5b833567ffffffffffffffff808211156140bf578283fd5b6140cb878388016139e7565b9450602086013591506140dd82614946565b909250604085013590808211156140f2578283fd5b506140ff86828701613971565b9150509250925092565b6000806000806080858703121561411e578182fd5b843567ffffffffffffffff80821115614135578384fd5b614141888389016139e7565b95506020870135915061415382614946565b909350604086013592506060860135908082111561416f578283fd5b5061417c87828801613971565b91505092959194509250565b600060208284031215614199578081fd5b815161073b8161495e565b6000602082840312156141b5578081fd5b81356001600160e01b03198116811461073b578182fd5b6000604082840312156141dd578081fd5b61073b8383613a5b565b6000602082840312156141f8578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561426d5783516001600160a01b031683529284019291840191600101614248565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156142c457815180516001600160a01b03168552860151868501529284019290850190600101614296565b5091979650505050505050565b901515815260200190565b92151583526001600160a01b03919091166020830152604082015260600190565b921515835263ffffffff9190911660208301526001600160701b0316604082015260600190565b931515845263ffffffff9290921660208401526001600160701b03166040830152606082015260800190565b931515845263ffffffff92831660208501526001600160701b0391909116604084015216606082015260800190565b6000602080835283518082850152825b818110156143ab5785810183015185820160400152820161438f565b818111156143bc5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601e908201527f42616c616e6365447269704d616e616765722f647269702d6163746976650000604082015260600190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160408201526536206269747360d01b606082015260800190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b602080825260139082015272496e76616c696420707265764164647265737360681b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526019908201527f566f6c756d65447269702f706572696f642d67742d7a65726f00000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526021908201527f436f6d7074726f6c6c65722f636c61696d2d7472616e736665722d6661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f566f6c756d65447269704d616e616765722f647269702d6e6f742d61637469766040820152606560f81b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526022908201527f42616c616e6365447269704d616e616765722f647269702d6e6f742d61637469604082015261766560f01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b105b1c9958591e481a5b9a5d60a21b604082015260600190565b60208082526029908201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160408201526837103ab4b73a18989960b91b606082015260800190565b6020808252600d908201526c105b1c9958591e481859191959609a1b604082015260600190565b60208082526026908201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360408201526532206269747360d01b606082015260800190565b6020808252601a908201527f566f6c756d65447269702f706572696f642d6e6f742d6f766572000000000000604082015260600190565b6020808252601d908201527f566f6c756d65447269704d616e616765722f647269702d616374697665000000604082015260600190565b6001600160701b03938416815291909216602082015263ffffffff909116604082015260600190565b90815260200190565b9283526001600160801b0391909116602083015263ffffffff16604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561491e57600080fd5b604052919050565b600067ffffffffffffffff82111561493c578081fd5b5060209081020190565b6001600160a01b038116811461495b57600080fd5b50565b801515811461495b57600080fd5b63ffffffff8116811461495b57600080fdfea2646970667358221220fc476b09f54d2b498a7a1b80f3a4ab2436760380baa6d917b9d1d1aab5cf963764736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activateBalanceDrip(address,address,address,uint256)": {
        "params": {
          "dripRatePerSecond": "The amount of drip tokens that are awarded each second to the total supply of measure.",
          "dripToken": "The token that is dripped to users.",
          "measure": "The ERC20 token whose balances determines user's share of the drip rate.",
          "source": "The balance drip \"source\"; i.e. a Prize Pool address."
        }
      },
      "activateVolumeDrip(address,address,address,bool,uint32,uint112,uint32)": {
        "params": {
          "dripAmount": "The amount of dripTokens disbursed each period.",
          "dripToken": "The token that is being disbursed",
          "endTime": "The time at which the first period ends.",
          "isReferral": "Whether this volume drip is for referrals",
          "measure": "The Prize Pool controlled token whose volume should be measured",
          "periodSeconds": "The period of the volume drip, in seconds",
          "source": "The Prize Pool for which to bind to"
        }
      },
      "balanceOfDrip(address,address)": {
        "params": {
          "dripToken": "The token that is being disbursed",
          "user": "The user whose balance should be checked."
        },
        "returns": {
          "_0": "The claimable balance of the dripToken by the user."
        }
      },
      "beforeTokenMint(address,uint256,address,address)": {
        "params": {
          "amount": "The amount of tokens they are minting",
          "measure": "The measure token they are minting",
          "referrer": "The user who referred the minting.",
          "to": "The user who is minting the tokens"
        }
      },
      "beforeTokenTransfer(address,address,uint256,address)": {
        "params": {
          "from": "The user who is sending the tokens",
          "measure": "The measure token they are burning",
          "to": "The user who is receiving the tokens"
        }
      },
      "captureClaimsForBalanceDripsForPairs((address,address)[],address,address[])": {
        "params": {
          "dripTokens": "The drip tokens to retrieve claim balances for.",
          "pairs": "The (source, measure) pairs to update.  For each pair all of the balance drips, volume drips, and referral volume drips will be updated.",
          "user": "The user whose drips and balances will be updated."
        }
      },
      "claimDrip(address,address,uint256)": {
        "params": {
          "amount": "The amount of drip token to claim",
          "dripToken": "The drip token to claim",
          "user": "The user for whom to claim the drip tokens"
        }
      },
      "deactivateBalanceDrip(address,address,address,address)": {
        "params": {
          "dripToken": "The token that is dripped to users.",
          "measure": "The ERC20 token whose balances determines user's share of the drip rate.",
          "prevDripToken": "The previous drip token in the balance drip list.  If the dripToken is the first address, then the previous address is the SENTINEL address: 0x0000000000000000000000000000000000000001",
          "source": "The balance drip \"source\"; i.e. a Prize Pool address."
        }
      },
      "deactivateVolumeDrip(address,address,address,bool,address)": {
        "params": {
          "dripToken": "The token that is being disbursed",
          "isReferral": "Whether this volume drip is for referrals",
          "measure": "The Prize Pool controlled token whose volume should be measured",
          "prevDripToken": "The previous drip token in the volume drip list.  Is different for referrals vs non-referral volume drips.",
          "source": "The Prize Pool for which to bind to"
        }
      },
      "getActiveBalanceDripTokens(address,address)": {
        "params": {
          "measure": "The ERC20 token whose balances determines user's share of the drip rate.",
          "source": "The balance drip \"source\"; i.e. a Prize Pool address."
        },
        "returns": {
          "_0": "An array of active Balance Drip token addresses"
        }
      },
      "getActiveVolumeDripTokens(address,address,bool)": {
        "params": {
          "isReferral": "Whether this volume drip is a referral",
          "measure": "The ERC20 token whose volume determines user's share of the drip rate.",
          "source": "The volume drip \"source\"; i.e. a Prize Pool address."
        },
        "returns": {
          "_0": "An array of active Volume Drip token addresses"
        }
      },
      "getBalanceDrip(address,address,address)": {
        "params": {
          "dripToken": "The token that is being dripped to users",
          "measure": "The token that measure's a users share of the drip",
          "source": "The balance drip \"source\"; i.e. Prize Pool"
        },
        "returns": {
          "dripRatePerSecond": "The current drip rate of the balance drip.",
          "exchangeRateMantissa": "The current exchange rate from measure to dripTokens",
          "timestamp": "The timestamp at which the balance drip was last updated."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBalanceDripRate(address,address,address,uint256)": {
        "params": {
          "dripRatePerSecond": "The new drip rate per second",
          "dripToken": "The token that is dripped to the user",
          "measure": "The token to use to measure a user's share of the drip rate",
          "source": "The balance drip \"source\"; i.e. Prize Pool"
        }
      },
      "setVolumeDrip(address,address,address,bool,uint32,uint112)": {
        "params": {
          "dripAmount": "The amount of tokens to drip for the next period",
          "dripToken": "The token that is being disbursed",
          "isReferral": "Whether this volume drip is a referral",
          "measure": "The token whose volume is being measured",
          "periodSeconds": "The length to use for the next period",
          "source": "The Prize Pool of the volume drip"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAndClaimDrips((address,address)[],address,address[])": {
        "details": "This function will be useful to check the *current* claim balances for a user. Just need to run this as a constant function to see the latest balances. in order to claim the values, this function needs to be run alongside a claimDrip function.",
        "params": {
          "dripTokens": "The drip tokens whose entire balance will be claimed after the update.",
          "pairs": "The (source, measure) pairs of drips to update for the given user",
          "user": "The user for whom to update and claim tokens"
        },
        "returns": {
          "_0": "The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate."
        }
      },
      "updateDrips((address,address)[],address,address[])": {
        "details": "This function will be useful to check the *current* claim balances for a user. Just need to run this as a constant function to see the latest balances. in order to claim the values, this function needs to be run alongside a claimDrip function.",
        "params": {
          "dripTokens": "The drip tokens whose entire balance will be claimed after the update.",
          "pairs": "The (source, measure) pairs of drips to update for the given user",
          "user": "The user for whom to update and claim tokens"
        },
        "returns": {
          "_0": "The claimable balance of each of the passed drip tokens for the user.  These are the post-update balances, and therefore the most accurate."
        }
      }
    },
    "title": "The Comptroller disburses rewards to pool users",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BalanceDripActivated(address,address,address,uint256)": {
        "notice": "Emitted when a balance drip is actived"
      },
      "BalanceDripDeactivated(address,address,address)": {
        "notice": "Emitted when a balance drip is deactivated"
      },
      "BalanceDripDripped(address,address,address,address,uint256)": {
        "notice": "Emitted when a balance drip drips tokens"
      },
      "BalanceDripRateSet(address,address,address,uint256)": {
        "notice": "Emitted when a balance drip rate is updated"
      },
      "DripTokenClaimed(address,address,address,uint256)": {
        "notice": "Emitted when a user claims drip tokens"
      },
      "VolumeDripActivated(address,address,address,bool,uint256,uint256)": {
        "notice": "Emitted when a volume drip is activated"
      },
      "VolumeDripDeactivated(address,address,address,bool)": {
        "notice": "Emitted when a volume drip is deactivated."
      },
      "VolumeDripDripped(address,address,address,bool,address,uint256)": {
        "notice": "Emitted when a volue drip drips tokens"
      },
      "VolumeDripPeriodEnded(address,address,address,bool,uint32,uint256,uint256)": {
        "notice": "Emitted when a volume drip period has ended"
      },
      "VolumeDripPeriodStarted(address,address,address,bool,uint32,uint256,uint256)": {
        "notice": "Emitted when a new volume drip period has started"
      },
      "VolumeDripSet(address,address,address,bool,uint256,uint256)": {
        "notice": "Emitted when a volume drip is updated"
      }
    },
    "kind": "user",
    "methods": {
      "activateBalanceDrip(address,address,address,uint256)": {
        "notice": "Activates a balance drip.  Only callable by the owner."
      },
      "activateVolumeDrip(address,address,address,bool,uint32,uint112,uint32)": {
        "notice": "Activates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period."
      },
      "balanceOfDrip(address,address)": {
        "notice": "Returns a users claimable balance of drip tokens.  This is the combination of all balance and volume drips."
      },
      "beforeTokenMint(address,uint256,address,address)": {
        "notice": "Called by a \"source\" (i.e. Prize Pool) when a user mints new \"measure\" tokens."
      },
      "beforeTokenTransfer(address,address,uint256,address)": {
        "notice": "Called by a \"source\" (i.e. Prize Pool) when tokens change hands or are burned"
      },
      "claimDrip(address,address,uint256)": {
        "notice": "Claims a drip token on behalf of a user.  If the passed amount is less than or equal to the users drip balance, then they will be transferred that amount.  Otherwise, it fails."
      },
      "constructor": "Initializes a new Comptroller.",
      "deactivateBalanceDrip(address,address,address,address)": {
        "notice": "Deactivates a balance drip.  Only callable by the owner."
      },
      "deactivateVolumeDrip(address,address,address,bool,address)": {
        "notice": "Deactivates a volume drip.  Volume drips distribute tokens to users based on their share of the activity within a period."
      },
      "getActiveBalanceDripTokens(address,address)": {
        "notice": "Gets a list of active balance drip tokens"
      },
      "getActiveVolumeDripTokens(address,address,bool)": {
        "notice": "Gets a list of active volume drip tokens"
      },
      "getBalanceDrip(address,address,address)": {
        "notice": "Returns the state of a balance drip."
      },
      "setBalanceDripRate(address,address,address,uint256)": {
        "notice": "Sets the drip rate for a balance drip.  The drip rate is the number of drip tokens given to the entire supply of measure tokens.  Only callable by the owner."
      },
      "setVolumeDrip(address,address,address,bool,uint32,uint112)": {
        "notice": "Sets the parameters for the *next* volume drip period.  The source, measure, dripToken and isReferral combined are used to uniquely identify a volume drip.  Only callable by the owner."
      },
      "updateAndClaimDrips((address,address)[],address,address[])": {
        "notice": "Updates the given drips for a user and then claims the given drip tokens.  This call will poke all of the drips and update the claim balances for the given user."
      },
      "updateDrips((address,address)[],address,address[])": {
        "notice": "Updates the given drips for a user and then claims the given drip tokens.  This call will poke all of the drips and update the claim balances for the given user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1397,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1400,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3750,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8831,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "volumeDrips",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(State)9964_storage)"
      },
      {
        "astId": 8835,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "referralVolumeDrips",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(State)9964_storage)"
      },
      {
        "astId": 8839,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "balanceDrips",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(State)9154_storage)"
      },
      {
        "astId": 8843,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "dripTokenTotalSupply",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8849,
        "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
        "label": "dripTokenBalances",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(State)8882_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct BalanceDrip.State))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(State)8882_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(State)9444_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct VolumeDrip.State))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(State)9444_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Deposit)9418_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VolumeDrip.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)9418_storage"
      },
      "t_mapping(t_address,t_struct(Mapping)22184_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MappedSinglyLinkedList.Mapping)",
        "numberOfBytes": "32",
        "value": "t_struct(Mapping)22184_storage"
      },
      "t_mapping(t_address,t_struct(State)8882_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BalanceDrip.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)8882_storage"
      },
      "t_mapping(t_address,t_struct(State)9154_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BalanceDripManager.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)9154_storage"
      },
      "t_mapping(t_address,t_struct(State)9444_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VolumeDrip.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)9444_storage"
      },
      "t_mapping(t_address,t_struct(State)9964_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VolumeDripManager.State)",
        "numberOfBytes": "32",
        "value": "t_struct(State)9964_storage"
      },
      "t_mapping(t_address,t_struct(UserState)8869_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BalanceDrip.UserState)",
        "numberOfBytes": "32",
        "value": "t_struct(UserState)8869_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Period)9425_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct VolumeDrip.Period)",
        "numberOfBytes": "32",
        "value": "t_struct(Period)9425_storage"
      },
      "t_struct(Deposit)9418_storage": {
        "encoding": "inplace",
        "label": "struct VolumeDrip.Deposit",
        "members": [
          {
            "astId": 9415,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 9417,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "period",
            "offset": 14,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Mapping)22184_storage": {
        "encoding": "inplace",
        "label": "struct MappedSinglyLinkedList.Mapping",
        "members": [
          {
            "astId": 22179,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22183,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "addressMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Period)9425_storage": {
        "encoding": "inplace",
        "label": "struct VolumeDrip.Period",
        "members": [
          {
            "astId": 9420,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 9422,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "dripAmount",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 9424,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "endTime",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(State)8882_storage": {
        "encoding": "inplace",
        "label": "struct BalanceDrip.State",
        "members": [
          {
            "astId": 8871,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "dripRatePerSecond",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8873,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "exchangeRateMantissa",
            "offset": 0,
            "slot": "1",
            "type": "t_uint112"
          },
          {
            "astId": 8875,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "totalDripped",
            "offset": 14,
            "slot": "1",
            "type": "t_uint112"
          },
          {
            "astId": 8877,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "timestamp",
            "offset": 28,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8881,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "userStates",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(UserState)8869_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(State)9154_storage": {
        "encoding": "inplace",
        "label": "struct BalanceDripManager.State",
        "members": [
          {
            "astId": 9147,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "activeBalanceDrips",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Mapping)22184_storage)"
          },
          {
            "astId": 9153,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "balanceDrips",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(State)8882_storage))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(State)9444_storage": {
        "encoding": "inplace",
        "label": "struct VolumeDrip.State",
        "members": [
          {
            "astId": 9429,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "deposits",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Deposit)9418_storage)"
          },
          {
            "astId": 9433,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "periods",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint32,t_struct(Period)9425_storage)"
          },
          {
            "astId": 9435,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "nextPeriodSeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 9437,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "nextDripAmount",
            "offset": 4,
            "slot": "2",
            "type": "t_uint112"
          },
          {
            "astId": 9439,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "__gap",
            "offset": 18,
            "slot": "2",
            "type": "t_uint112"
          },
          {
            "astId": 9441,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "totalDripped",
            "offset": 0,
            "slot": "3",
            "type": "t_uint112"
          },
          {
            "astId": 9443,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "periodCount",
            "offset": 14,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(State)9964_storage": {
        "encoding": "inplace",
        "label": "struct VolumeDripManager.State",
        "members": [
          {
            "astId": 9957,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "activeVolumeDrips",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Mapping)22184_storage)"
          },
          {
            "astId": 9963,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "volumeDrips",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(State)9444_storage))"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserState)8869_storage": {
        "encoding": "inplace",
        "label": "struct BalanceDrip.UserState",
        "members": [
          {
            "astId": 8868,
            "contract": "contracts/comptroller/Comptroller.sol:Comptroller",
            "label": "lastExchangeRateMantissa",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}