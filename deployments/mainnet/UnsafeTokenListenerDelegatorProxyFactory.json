{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract TokenListenerInterface",
          "name": "tokenListener",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "contract UnsafeTokenListenerDelegator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "deployMinimal",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instance",
      "outputs": [
        {
          "internalType": "contract UnsafeTokenListenerDelegator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0xE0F4217390221aF47855E094F6e112D43C8698fE",
    "contractAddress": "0xd952003A0e4B6a63507dc7c0889e841D6bdDb1bA",
    "transactionIndex": 71,
    "gasUsed": "538401",
    "logsBloom": "0x
    "blockHash": "0x5e050b88f9f3757e6d94a2f096a84a3c767f2ae294dfe26e54880cad34e23919",
    "transactionHash": "0x8f4fa4daa205a62ea3514b1f4679bc36b7e86ddd3c677f918104b2e961a763c1",
    "logs": [],
    "blockNumber": 11429554,
    "cumulativeGasUsed": "7579625",
    "status": 1,
    "byzantium": true
  },
  "address": "0xd952003A0e4B6a63507dc7c0889e841D6bdDb1bA",
  "args": [],
  "solcInputHash": "0x89bbf3e2d952f8739de43ccc9c444c6ea21efd21d39fe209a93d9d197f784510",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract TokenListenerInterface\",\"name\":\"tokenListener\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"contract UnsafeTokenListenerDelegator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"deployMinimal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instance\",\"outputs\":[{\"internalType\":\"contract UnsafeTokenListenerDelegator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address)\":{\"returns\":{\"_0\":\"A reference to the new proxied Controlled ERC20 Token\"}}},\"title\":\"Controlled ERC20 Token Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Initializes the Factory with an instance of the Controlled ERC20 Token\",\"create(address)\":{\"notice\":\"Creates a new Controlled ERC20 Token as a proxy of the template instance\"},\"instance()\":{\"notice\":\"Contract template for deploying proxied tokens\"}},\"notice\":\"Minimal proxy pattern for creating new Controlled ERC20 Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/UnsafeTokenListenerDelegatorFactory.sol\":\"UnsafeTokenListenerDelegatorProxyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xc8f73c50cb3cf3dc80d09c82e9c265d778f30a2801c5ff394aca3be7dd064acd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC1820RegistryUpgradeable.sol\\\";\\n\\nlibrary Constants {\\n  IERC1820RegistryUpgradeable public constant REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n  // keccak256(\\\"ERC777TokensSender\\\")\\n  bytes32 public constant TOKENS_SENDER_INTERFACE_HASH =\\n  0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n  // keccak256(\\\"ERC777TokensRecipient\\\")\\n  bytes32 public constant TOKENS_RECIPIENT_INTERFACE_HASH =\\n  0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n  // keccak256(abi.encodePacked(\\\"ERC1820_ACCEPT_MAGIC\\\"));\\n  bytes32 public constant ACCEPT_MAGIC =\\n  0xa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4;\\n\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n  bytes4 public constant ERC165_INTERFACE_ID_ERC721 = 0x80ac58cd;\\n}\",\"keccak256\":\"0x085c2442bd9361a4853c324b5bcf96dda70d1ee0108b3335bc19dbca6eee8738\"},\"contracts/external/openzeppelin/ProxyFactory.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.7.0;\\n\\n// solium-disable security/no-inline-assembly\\n// solium-disable security/no-low-level-calls\\ncontract ProxyFactory {\\n\\n  event ProxyCreated(address proxy);\\n\\n  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    bytes20 targetBytes = bytes20(_logic);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, clone, 0x37)\\n    }\\n\\n    emit ProxyCreated(address(proxy));\\n\\n    if(_data.length > 0) {\\n      (bool success,) = proxy.call(_data);\\n      require(success, \\\"ProxyFactory/constructor-call-failed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x571028e27d301916b4d956f9f6442a57203a3a43bda705fa8db7e23010d4c136\"},\"contracts/token/TokenListener.sol\":{\"content\":\"pragma solidity ^0.6.4;\\n\\nimport \\\"./TokenListenerInterface.sol\\\";\\nimport \\\"./TokenListenerLibrary.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\nabstract contract TokenListener is TokenListenerInterface {\\n  function supportsInterface(bytes4 interfaceId) external override view returns (bool) {\\n    return (\\n      interfaceId == Constants.ERC165_INTERFACE_ID_ERC165 || \\n      interfaceId == TokenListenerLibrary.ERC165_INTERFACE_ID_TOKEN_LISTENER\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb0e98d10b004602e1d4f4369a70e6382002dc0c0c5713698eb6a92943aef2265\"},\"contracts/token/TokenListenerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\\ninterface TokenListenerInterface is IERC165Upgradeable {\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\n}\\n\",\"keccak256\":\"0x86b29792852503c80fc94e3040d1648f4c5bef59a3786582410db6d63de12a0a\",\"license\":\"GPL-3.0\"},\"contracts/token/TokenListenerLibrary.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nlibrary TokenListenerLibrary {\\n  /*\\n    *     bytes4(keccak256('beforeTokenMint(address,uint256,address,address)')) == 0x4d7f3db0\\n    *     bytes4(keccak256('beforeTokenTransfer(address,address,uint256,address)')) == 0xb2210957\\n    *\\n    *     => 0x4d7f3db0 ^ 0xb2210957 == 0xff5e34e7\\n    */\\n  bytes4 public constant ERC165_INTERFACE_ID_TOKEN_LISTENER = 0xff5e34e7;\\n}\",\"keccak256\":\"0x3ed670015409e43fcf0fa2e4094e4fe171f0b99681dedfef81eeece34af4cfcd\"},\"contracts/token/UnsafeTokenListenerDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport \\\"./TokenListener.sol\\\";\\n\\ncontract UnsafeTokenListenerDelegator is TokenListener, Initializable {\\n\\n  event Initialized(TokenListenerInterface unsafeTokenListener);\\n\\n  TokenListenerInterface public unsafeTokenListener;\\n\\n  function initialize (TokenListenerInterface _unsafeTokenListener) external initializer {\\n    unsafeTokenListener = _unsafeTokenListener;\\n\\n    emit Initialized(unsafeTokenListener);\\n  }\\n\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external override {\\n    unsafeTokenListener.beforeTokenMint(to, amount, controlledToken, referrer);\\n  }\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external override {\\n    unsafeTokenListener.beforeTokenTransfer(from, to, amount, controlledToken);\\n  }\\n\\n}\",\"keccak256\":\"0x502e4700919c4f150fcfd66cc07c5e7bff570e8e5ff9a574a9acfe4eaf9b3bec\",\"license\":\"GPL-3.0\"},\"contracts/token/UnsafeTokenListenerDelegatorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"./UnsafeTokenListenerDelegator.sol\\\";\\nimport \\\"../external/openzeppelin/ProxyFactory.sol\\\";\\n\\n/// @title Controlled ERC20 Token Factory\\n/// @notice Minimal proxy pattern for creating new Controlled ERC20 Tokens\\ncontract UnsafeTokenListenerDelegatorProxyFactory is ProxyFactory {\\n\\n  /// @notice Contract template for deploying proxied tokens\\n  UnsafeTokenListenerDelegator public instance;\\n\\n  /// @notice Initializes the Factory with an instance of the Controlled ERC20 Token\\n  constructor () public {\\n    instance = new UnsafeTokenListenerDelegator();\\n  }\\n\\n  /// @notice Creates a new Controlled ERC20 Token as a proxy of the template instance\\n  /// @return A reference to the new proxied Controlled ERC20 Token\\n  function create(TokenListenerInterface tokenListener) external returns (UnsafeTokenListenerDelegator) {\\n    UnsafeTokenListenerDelegator delegator = UnsafeTokenListenerDelegator(deployMinimal(address(instance), \\\"\\\"));\\n    delegator.initialize(tokenListener);\\n    return delegator;\\n  }\\n}\\n\",\"keccak256\":\"0x1f54fb3fe7d4314d34546c9b29f2f0b1655eeadb4d965e3a319c86fec0c8293b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b6104268061043f83390190565b6103c48061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec095146100465780639ed933181461006a578063b3eeb5e214610090575b600080fd5b61004e610146565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b0316610155565b61004e600480360360408110156100a657600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101ee945050505050565b6000546001600160a01b031681565b600080546040805160208101909152828152829161017e916001600160a01b03909116906101ee565b9050806001600160a01b031663c4d66de8846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156101cf57600080fd5b505af11580156101e3573d6000803e3d6000fd5b509295945050505050565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0604080516001600160a01b038316815290519194507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349925081900360200190a1825115610363576000826001600160a01b0316846040518082805190602001908083835b602083106102ba5780518252601f19909201916020918201910161029b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461031c576040519150601f19603f3d011682016040523d82523d6000602084013e610321565b606091505b50509050806103615760405162461bcd60e51b815260040180806020018281038252602481526020018061036b6024913960400191505060405180910390fd5b505b509291505056fe50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d6661696c6564a264697066735822122026947d9bcbd46cab7121abd5fdf1b25342f03919e0c139ebca67a1dc0d753ca864736f6c634300060c0033608060405234801561001057600080fd5b50610406806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780634d7f3db014610097578063b2210957146100d5578063c4d66de814610111578063c8a1fc5514610137575b600080fd5b6100836004803603602081101561007257600080fd5b50356001600160e01b03191661015b565b604080519115158252519081900360200190f35b6100d3600480360360808110156100ad57600080fd5b506001600160a01b03813581169160208101359160408201358116916060013516610195565b005b6100d3600480360360808110156100eb57600080fd5b506001600160a01b0381358116916020810135821691604082013591606001351661021a565b6100d36004803603602081101561012757600080fd5b50356001600160a01b0316610281565b61013f610387565b604080516001600160a01b039092168252519081900360200190f35b60006001600160e01b031982166301ffc9a760e01b148061018f57506001600160e01b03198216600162a1cb1960e01b0319145b92915050565b60008054604080516304d7f3db60e41b81526001600160a01b038881166004830152602482018890528681166044830152858116606483015291516201000090930490911692634d7f3db09260848084019382900301818387803b1580156101fc57600080fd5b505af1158015610210573d6000803e3d6000fd5b5050505050505050565b600080546040805163b221095760e01b81526001600160a01b03888116600483015287811660248301526044820187905285811660648301529151620100009093049091169263b22109579260848084019382900301818387803b1580156101fc57600080fd5b600054610100900460ff168061029a575061029a61039c565b806102a8575060005460ff16155b6102e35760405162461bcd60e51b815260040180806020018281038252602e8152602001806103a3602e913960400191505060405180910390fd5b600054610100900460ff1615801561030e576000805460ff1961ff0019909116610100171660011790555b600080546001600160a01b038085166201000090810262010000600160b01b03199093169290921792839055604080519290930416815290517f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e69181900360200190a18015610383576000805461ff00191690555b5050565b6000546201000090046001600160a01b031681565b303b159056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a264697066735822122030770a9d60e82a972676a667813b306bf0f497f0dd68afde3f0698435007eba164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063022ec095146100465780639ed933181461006a578063b3eeb5e214610090575b600080fd5b61004e610146565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b0316610155565b61004e600480360360408110156100a657600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184600183028401116401000000008311171561010557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101ee945050505050565b6000546001600160a01b031681565b600080546040805160208101909152828152829161017e916001600160a01b03909116906101ee565b9050806001600160a01b031663c4d66de8846040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156101cf57600080fd5b505af11580156101e3573d6000803e3d6000fd5b509295945050505050565b6000808360601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0604080516001600160a01b038316815290519194507efffc2da0b561cae30d9826d37709e9421c4725faebc226cbbb7ef5fc5e7349925081900360200190a1825115610363576000826001600160a01b0316846040518082805190602001908083835b602083106102ba5780518252601f19909201916020918201910161029b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461031c576040519150601f19603f3d011682016040523d82523d6000602084013e610321565b606091505b50509050806103615760405162461bcd60e51b815260040180806020018281038252602481526020018061036b6024913960400191505060405180910390fd5b505b509291505056fe50726f7879466163746f72792f636f6e7374727563746f722d63616c6c2d6661696c6564a264697066735822122026947d9bcbd46cab7121abd5fdf1b25342f03919e0c139ebca67a1dc0d753ca864736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address)": {
        "returns": {
          "_0": "A reference to the new proxied Controlled ERC20 Token"
        }
      }
    },
    "title": "Controlled ERC20 Token Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "Initializes the Factory with an instance of the Controlled ERC20 Token",
      "create(address)": {
        "notice": "Creates a new Controlled ERC20 Token as a proxy of the template instance"
      },
      "instance()": {
        "notice": "Contract template for deploying proxied tokens"
      }
    },
    "notice": "Minimal proxy pattern for creating new Controlled ERC20 Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27722,
        "contract": "contracts/token/UnsafeTokenListenerDelegatorFactory.sol:UnsafeTokenListenerDelegatorProxyFactory",
        "label": "instance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(UnsafeTokenListenerDelegator)27712"
      }
    ],
    "types": {
      "t_contract(UnsafeTokenListenerDelegator)27712": {
        "encoding": "inplace",
        "label": "contract UnsafeTokenListenerDelegator",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "192800",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "create(address)": "infinite",
      "deployMinimal(address,bytes)": "infinite",
      "instance()": "1015"
    }
  }
}